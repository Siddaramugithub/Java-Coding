Print reverse string using recursion?
public class RevStrRecursion {
public static void main(String[] args) {
	RevStrRecursion recursion = new RevStrRecursion();
	String str = recursion.reverseStrRecursion("kolle siddaramu");
	System.out.println(str);
}
private String reverseStrRecursion(String string) {
	String reverse = "";
	if(string.length() == 1) {
		return string;
	}
	reverse = reverse + string.charAt(string.length() - 1)+reverseStrRecursion(string.substring(0, string.length() - 1));
	return reverse;
}
}
Output:
umaraddis ellok


Delete all Words whose character start with “i”

public class DeleteWordsStartWithCharacter {
	public static void main(String[] args) {
		String str[] = { "India", "Italy", "Uk", "US" };
		List<String> list = new ArrayList<String>(Arrays.asList(str));
		filter(list, 'i');
		for (String string : list) {
			System.out.println(string);
		}
	}
	private static void filter(List<String> list, char c) {
		int i = 0;
		while (i < list.size()) {
			String string = list.get(i);
			if (string.toLowerCase().charAt(0) == c) {
				list.remove(i);
			} else {
				i++;
			}
		}
	}
}

Print reverse string without using built in methods?
public class revStrWithoutApi {
	public static void main(String[] args) {
		reverseString("kolle siddaramu");
	}

	private static void reverseString(String string) {
		String reverse = "";
		for (int i = string.length()-1; i >= 0; i--) {
			reverse = reverse + string.charAt(i);
		}
		System.out.println(reverse);
	}
}
Output:
umaraddis ellok
or
public class ReversewithoutLoop{
	public static void main(String[] args) {
		String s = "Sagar";
		StringBuilder sb = new StringBuilder();
		for (int i = s.length() - 1; i >= 0; i--) {
			sb.append(s.charAt(i));
		}
		System.out.println(sb);	
	}
}

public class revStrWithoutApi {
	public static void main(String[] args) {
		String input = "GeeksforGeeks";
		byte[] str = input.getBytes();
		byte[] result = new byte[str.length];
		for (int i = 0; i < str.length; i++)
			result[i] = str[str.length - i - 1];
                               System.out.println(new String(result));
}
}

public class revStrWithoutApi {
	public static void main(String[] args) {
		String input = "GeeksForGeeks";
		char[] try1 = input.toCharArray();
		for (int i = try1.length - 1; i >= 0; i--)
			System.out.print(try1[i]);
	}
}

public class revStrWithoutApi {
	public static void main(String[] args) {
		String input = "Geeks For Geeks"; 
        char[] temparray = input.toCharArray(); 
        int left, right=0; 
        right = temparray.length-1; 
  
        for (left=0; left < right ; left++ ,right--) 
        { 
            char temp = temparray[left]; 
            temparray[left] = temparray[right]; 
            temparray[right]=temp; 
        } 
        for (char c : temparray) 
            System.out.print(c); 
        System.out.println(); 
	}
}

public class revStrWithoutApi {
	public static void main(String[] args) {
		String input = "Geeks For Geeks"; 
        char[] hello = input.toCharArray(); 
        List<Character> trial1 = new ArrayList<>(); 
        for (char c: hello) 
            trial1.add(c); 
        Collections.reverse(trial1); 
        ListIterator li = trial1.listIterator(); 
        while (li.hasNext()) 
            System.out.print(li.next()); 
	}
}

Reverse number using while loop condition?
public class RevNumWhile {
public static void main(String[] args) {
	revNumWhileLoop(12345);
}

private static void revNumWhileLoop(int num) {
	int reverse = 0;
	while (num!=0) {
		int remainder = num%10;
		reverse =  reverse*10+remainder;
		num = num/10;
	}
	System.out.println(reverse);
}

To check given string is palindrome or not
public class PolynStr {
	public static void main(String[] args) {
		String str = "amma";
		String polyndrome = checkStrPolyndrome(str);
		if (str.equals(polyndrome)) {
			System.out.println("polyndrome");
		} else {
			System.out.println("Not polyndrome");
		}
	}

	private static String checkStrPolyndrome(String str) {
		String reverse = "";
		for (int i = str.length() - 1; i >= 0; i--) {
			reverse = reverse + str.charAt(i);
		}
		return reverse;
	}
}

TO check given string is polindrom or not using Stack 
public class PoliStringwithStack {
	public static void main(String[] args) {
		String str = "ammaaa";
		String polidrome = checkPoliWithStack(str);
		if (str.equals(polidrome)) {
			System.out.println("Polindrome");
		}else {
			System.out.println("Not Polindrome");
		}
	}
	private static String checkPoliWithStack(String str) {
		String reverse = "";
		Stack stack = new Stack();
		for (int i = 0; i < str.length(); i++) {
			stack.push(str.charAt(i));
		}
		while (!stack.empty()) {
			reverse = reverse+stack.pop();
		}
		return reverse;
	}
}

Reverse a number using recursion?
public class ReverseNumRecursion {
public static void main(String[] args) {
	int num = 12345;
	int reverse = revNumRecursion(num);
	System.out.println(""+reverse);
}
private static int revNumRecursion(int num) {
     if(num<10) {
    	return num; 
     }
     else {
    	 System.out.print(num%10);
    	 return revNumRecursion(num/10);
     }
}
}

To check given number is reverse/palindrome or not?
public class ReverseNumOrNot {
public static void main(String[] args) {
	int num = 12123;
	int reverseNum = reverseNum(num);
	if (num == reverseNum) {
		System.out.println("polindrome");
	} else {
		System.out.println("Not polindrome");
	}
}
private static int reverseNum(int num) {
	int reverse = 0 ,remainder;
	while (num>0) {
		remainder = num%10;
		reverse = reverse*10+remainder;
		num = num/10;
	}
	return reverse;
}
}

Reverse given num array?
public final class RevNumArray {
	public static void main(String[] args) {
		int num[] = { 1, 3, 2, 4, 5, 6 };
		reverseNumArr(num);
	}

	private static void reverseNumArr(int[] num) {
		for (int i = num.length - 1; i >= 0; i--) {
			System.out.print(" "+num[i]);
		}
	}
}

Reverse each word in given sentence?
public class RevEachWord {
	public static void main(String[] args) {
		reverseEachWord("java concept of the day");
	}
	private static void reverseEachWord(String str) {
		String reverseSentence = "";
		String words[] = str.split(" ");
		for (int i = 0; i < words.length; i++) {
			String word = words[i];
			String reverseWord = "";
			for (int j = word.length() - 1; j >= 0; j--) {
				reverseWord = reverseWord + word.charAt(j);
			}
			reverseSentence = reverseSentence + reverseWord+" ";
		}
		System.out.println(reverseSentence);
	}
}



Reverse word at even position a given sentence?
public class RevWordAtOddPos {
public static void main(String[] args) {
	String msg = "java concepr of the day";
	String[] strWords = msg.split(" ");
	StringBuffer buffer = new StringBuffer();
	for (int i = 0; i <strWords.length; i++) {
		if (i%2 == 0 ) {
			buffer.append(strWords[i]);
		}
		else {
			buffer.append(revesreWord(strWords[i]));
		}
		buffer.append(" ");
	}
	System.out.println(buffer.toString());
}
private static Object revesreWord(String words) {
	char[] ch = words.toCharArray();
	char[] reverseChar = new char[ch.length];
	int length = ch.length-1;
	for (int i = length; i >=0; i--) {
		reverseChar[length-i] = ch[i];
	}
	return new String(reverseChar);
}
}

Check string contains alphabetic using lambda expression?
public class RevStrRecursion {
	public static void main(String[] args) {
		String str1 = "GeeksforGeeks";
		System.out.println("Output: " + isStringOnlyAlphabet(str1));
	}
	public static boolean isStringOnlyAlphabet(String str) {
		if (str == null) {
		return false;
		}
		return ((str != null) && (!str.equals("")) && (str.chars().allMatch(Character::isLetter)));
	}
}






To check given two strings are anagram or Not?
public class AnagramOrNot {
	public static void main(String[] args) {
		anagramOrNot("kolle", "OlKle");
	}

	private static void anagramOrNot(String string, String string2) {
		String str1 = string.replace("//s", " ");
		String str2 = string2.replace("//s", " ");
		boolean flag = true;
		if (str1.length() != str2.length()) {
			flag = false;
		} else {
			char[] ch1 = str1.toLowerCase().toCharArray();
			char[] ch2 = str2.toLowerCase().toCharArray();
			Arrays.sort(ch1);
			Arrays.sort(ch2);
			flag = Arrays.equals(ch1, ch2);
		}
		if (flag) {
			System.out.println("Is anagram");
		} else {
			System.out.println("Is not anagram");
		}
	}
}

Remove leading zero’s from string?
public class RemoveLeadingZeros {
	public static void main(String[] args) {
		String str = "0000023456";
		int i = 0;
		while (str.charAt(i) == '0')
			i++;
		StringBuffer sb = new StringBuffer(str);
		sb.replace(0, i, "");
		System.out.println(sb.toString()); // 23456
	}
}
Or
public class RevStrRecursion {
	public static void main(String[] args) {
		String str ="000001234";
		String s = str.replace("0", "");
		System.out.println(s);
	}
}
Or
public class RevStrRecursion {
	public static void main(String[] args) {
		String str = "0000012345";
		str = str.replaceAll("[0]","");
		System.out.println(str);
	}
}
Or 
public class RevStrRecursion {
	public static void main(String[] args) {
		String str = "0000012345";
		String add = "";
		char[] ch = str.toCharArray();
		for (int i = 0; i < ch.length; i++) {
			if (ch[i]!='0') {
				add = add+ch[i];
			}
		}
		System.out.println(add);
	}
}


Remove duplicate’s given string? 
public class RemDupStr {
	public static void main(String[] args) {
			removeDupStr("kolle");
		}

		private static void removeDupStr(String string) {
			Set set = new LinkedHashSet();
			char[] ch = string.toCharArray();
			for (Character c : ch) {
				set.add(c);
			}
			Object[] obj = set.toArray();
			for (Object object : obj) {
				System.out.print(object.toString());
			}
		}

	}













Remove specific character from array?

public class Test {
		public static void main(String[] args) {
		removeDupStr("kolle");
	}

	private static void removeDupStr(String string) {
		List set = new ArrayList();
		char[] ch = string.toCharArray();
		for (int i = 0; i < ch.length; i++) {
			if(ch[i]!='k') {
				set.add(ch[i]);
			}
		}
		
		Object[] obj = set.toArray();
		for (Object object : obj) {
			System.out.print(object.toString());
		}
	}

}

Remove duplicates in ArrayList?
public class RemoveDuplicateInArrList {
	public static void main(String[] args) {
		removeDuplicatesInArrylist();
	}

	private static void removeDuplicatesInArrylist() {
		ArrayList<String> arrList = new ArrayList<String>();
		arrList.add("ABCD");
		arrList.add("ABCDEF");
		arrList.add("ABCD");
		arrList.add("ABCDEF");
		arrList.add("XYZ");
		Object[] obj = arrList.toArray();
		for (Object object : obj) {
			if (arrList.indexOf(object) != arrList.lastIndexOf(object)) {
				arrList.remove(arrList.lastIndexOf(object));
			}
		}
		System.out.println(arrList);
	}
}

Remove white space from String? 
public class DeleteWhiteSpace {
	public static void main(String[] args) {
		String str = "java concept of the day";
		removeWhiteSpace(str);
	}

	private static void removeWhiteSpace(String str) {
		char[] ch = str.toCharArray();
		String add = "";
		for (int i = 0; i < ch.length; i++) {
			if (ch[i] != ' ' && ch[i] != '\t') {
				add = add + str.charAt(i);
			}
		}
		System.out.println(add);
	}
}

Remove special characters from string?
public class RevStrRecursion {
	public static void main(String[] args) {
		String str = "@Kolle1991";
		removeSpecialChars(str);
	}

	private static void removeSpecialChars(String str) {
		String add = "";
		for (int i = 0; i < str.length(); i++) {
			if (str.charAt(i) > 47 && str.charAt(i) < 58) {
				add = add + str.charAt(i);
			}
		}
		System.out.println(add);//1991
	}
}
or
public class RemoveSpecialChar {
	public static void main(String[] args) {
		String str = "@Kolle1991";
		removeSpecialChars(str);
	}

	private static void removeSpecialChars(String str) {
		String add = "";
		for (int i = 0; i < str.length(); i++) {
			if (str.charAt(i) > 64 && str.charAt(i) < 121) {
				add = add + str.charAt(i);
			}
		}
		System.out.println(add);//Kolle
	}
}

Remove vowels from given String? 
public class DeleteVowels {
public static void main(String[] args) {
	String str = "java concept of the day";
	deleteVowels(str);
}

private static void deleteVowels(String str) {
String remove = str.replaceAll("[aeiouAEIOU]", "");
	System.out.println(remove);
}
--without using replace method
public class DeleteVowel1 {
	public static void main(String[] args) {
		String str = "java concept of the day";
		removeVowelsstr(str);
	}

	private static void removeVowelsstr(String str) {
		String add = "";
		for (int i = 0; i < str.length(); i++) {
			if (!isVowel(str.charAt(i))) {
				add = add + str.charAt(i);
			}
		}
		System.out.println(add);
	}

	private static boolean isVowel(char c) {
		String str = "aeiou";
		for (int i = 0; i < str.length(); i++) {
			if (c == str.charAt(i)) {
				return true;
			}
		}
		return false;
	}
}


Remove even number from array/Display Odd numbers given array?
public class RemoveEvenNumber {
	public static void main(String[] args) {
		removeEvenFromArr();
	}

	private static void removeEvenFromArr() {
		int arr[] = { 1, 2, 5, 4, 7, 6, 9 };
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] % 2 != 0) {
				System.out.println(arr[i]);// 1,5,7,9
			}
		}
	}
}

Count duplicate words in a given string? Remove even number?
public class CountDupStr {
public static void main(String[] args) {
	 String str = "abc abc s df fr et gg rr yy flg gg tt";
	countDuplicatStr(str);
}
private static void countDuplicatStr(String str) {
	List<String> list = Arrays.asList(str.split(" "));
	Set<String> uniqueWords = new HashSet<String>(list);
	for (String word : uniqueWords) {
		System.out.println(word + ": " + Collections.frequency(list, word));
	}
	}
}
Output:
gg: 2
rr: 1
yy: 1
flg: 1
tt: 1
df: 1
abc: 2
fr: 1
et: 1
s: 1

Count duplicate characters in String?
public class CountDupChar {
	public static void main(String[] args) {
		String str = "java";
		countDupChar(str);
	}

	private static void countDupChar(String str) {
		Map<Character, Integer>map = new HashMap<>();
		char[] ch = str.toCharArray();
		for (char c : ch) {
			if (!map.containsKey(c)) {
				map.put(c, 1);
			} else {
				map.put(c, map.get(c) + 1);
			}
			Set<Map.Entry<Character, Integer>>entrySet = map.entrySet();
			for (Map.Entry<Character, Integer>entry : entrySet) {

				if (entry.getValue() > 1) {
					System.out.println(entry.getKey() + "=" + entry.getValue());
				}
			}
		}
	}
}

Count Number of words in sentence?
public static void main(String[] args) {
	String str = "java concept of the day";
	int count = 0;
	String[] words = str.split(" ");
	for (String string : words) {
		count++;
	}
	System.out.println(str+"="+count);
 }
}
Or 
public class CountNoOfWords {
public static void main(String[] args) {
	String str = "java concept of the day nd fdf dfd";
	int count = 1;
	for (int i = 0; i < str.length(); i++) {
		if(str.charAt(i)==' ') {
			count++;
		}
	}
	System.out.println(count);
 }
}

Count no.of Vowel in a sentence?
public class CountNoOfVowels {
public static void main(String[] args) {
	String str = "java concept of the day";
	countVowelsInStr(str);
}

private static void countVowelsInStr(String str) {
	char[] ch = str.toCharArray();
	int count = 0;
	for (char c : ch) {
		switch (c) {
		case 'a':
		case 'e':
		case 'i':
		case 'o':
		case 'u':
			count++;
			break;
		default:
		}
		
	}
	System.out.println("Vowels="+count);	
}
}	

Count no.of lines, words, characters and paragraph?
public class CountLineWordsCharParagraph {
	public static void main(String[] args) throws IOException {
		File file = new File("C:\\Users\\Mayank\\Desktop\\1.txt");
		FileInputStream fileStream = new FileInputStream(file);
		InputStreamReader input = new InputStreamReader(fileStream);
		BufferedReader reader = new BufferedReader(input);
		String line;
		int countWord = 0;
		int sentenceCount = 0;
		int characterCount = 0;
		int paragraphCount = 1;
		int whitespaceCount = 0;
		while ((line = reader.readLine()) != null) {
			if (line.equals("")) {
				paragraphCount++;
			}
			if (!(line.equals(""))) {

				characterCount += line.length();
				String[] wordList = line.split("\\s+");
				countWord += wordList.length;
				whitespaceCount += countWord - 1;
				String[] sentenceList = line.split("[!?.:]+");

				sentenceCount += sentenceList.length;
			}
		}

		System.out.println("Total word count = " + countWord);
		System.out.println("Total number of sentences = " + sentenceCount);
		System.out.println("Total number of characters = " + characterCount);
		System.out.println("Number of paragraphs = " + paragraphCount);
		System.out.println("Total number of whitespaces = " + whitespaceCount);
	}
}

Convert Array List to String? 
public class ArrayListToStr {
public static void main(String[] args) {
	convertArrListToStr();
}

private static void convertArrListToStr() {
ArrayList<String> arrList = new ArrayList<String>();
arrList.add("abc");
arrList.add("lmn");
arrList.add("pqr");
arrList.add("xyz");
Object[] obj = arrList.toArray();
for (Object object : obj) {
	System.out.println(object.toString());
}
}
}

Convert Array to ArrayList?
public class ArrayToArrayList {
	public static void main(String[] args) {
		String[] str = { "abc", "bcd", "xyz" };
		convertArrToArrList(str);
	}
	private static void convertArrToArrList(String[] str) {
		ArrayList<String> list = new ArrayList<String>();
		for (String s : str) {
			list.add(s);
		}
		System.out.println(list);
	}
}

Convert List to Map?
public class ListToMap {
	public static void main(String[] args) {
		convertListToMap();
	}

	private static void convertListToMap() {
		ArrayList<String> list = new ArrayList<String>();
		list.add("abc");
		list.add("xyz");
		list.add("pqr");
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(i, list.get(i));
		}
		System.out.println(map);
	}
}

Convert Map to List? 
public class MapToList {
public static void main(String[] args) {
	convertMapToList();
}

private static void convertMapToList() {
	Map<Integer, String> map = new HashMap<Integer, String>();
	map.put(1, "abc");
	map.put(2, "pqr");
	map.put(3, "xyz");
	List<String> list = new ArrayList<String>( map.values());
	System.out.println("values"+list);

	List<Entry<Integer, String>> list1 = new ArrayList<Entry<Integer, String>>( map.entrySet());
	System.out.println("key and values"+list1);
	
	List<Integer> list2 = new ArrayList<Integer>( map.keySet());
	System.out.println("Keys"+list2);
	
}
}

Converting Object TO XML and XML to Object?
@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
public class Student {
	@XmlElement(name="Student_id")
	private int id;
	@XmlElement(name="Student_name")
	private String name;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
}
public class convertObjectToXML {
	public static void main(String[] args) throws JAXBException {
		convertObjectToXML();
		convertXmlToObject();
	}
	private static void convertXmlToObject() throws JAXBException {
     File file = new File("student.xml");
     JAXBContext context= JAXBContext.newInstance(Student.class);
     Unmarshaller unmarshaller = context.createUnmarshaller();
     Student student = (Student) unmarshaller.unmarshal(file);
     System.out.println(student.getId());
     System.out.println(student.getName());
	}
	private static void convertObjectToXML() throws JAXBException {
		Student student = new Student();
		student.setId(11);
		student.setName("Kolle");
		JAXBContext context = JAXBContext.newInstance(Student.class);
		Marshaller marshaller = context.createMarshaller();
		marshaller.setProperty(marshaller.JAXB_FORMATTED_OUTPUT, true);
		marshaller.marshal(student, new File("student.xml"));
		marshaller.marshal(student, System.out);
	}
}

Convert Object to Json and Json to Object?
public class Employee {
private int id;
private String name;
public int getId() {
	return id;
}
public void setId(int id) {
	this.id = id;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
}

public class ObjectToJsonAndJsonToObject {
	public static void main(String[] args) {
		convertObjToJson();
		convertJsonToObj();
	}

	private static void convertJsonToObj() {
		Employee employee=new Employee();
		try {
			ObjectMapper mapper=new ObjectMapper();
			File f=new File("employee.txt");
			Employee employee2=mapper.readValue(f,Employee.class);
		} catch (Exception e) {
		}	
	}

	private static void convertObjToJson() {
		Employee employee=new Employee();
		try {
			ObjectMapper mapper=new ObjectMapper();
			String json=mapper.writeValueAsString(employee);
			System.out.println(json);
		} catch (Exception e) {
		}	
	}
}

Convert String to QRCode?
public class QrCode {
	public static void main(String[] args) throws IOException {
		String string = "Name:Siddaramu Kolle";
		ByteArrayOutputStream stream = QRCode.from(string).to(ImageType.JPG).stream();
		File file = new File("F:\\siddu.jpg");
		FileOutputStream stream2 = new FileOutputStream(file);
		stream2.write(stream.toByteArray());
		stream2.flush();
	}
}

Convert encode to decode vice versa using base64?
public class EncodeToDecode {
	public static void main(String[] args) throws IOException {
		String passwod = "kolle@1991";
		endeBase64(passwod);

		String url = "http://www.googel.com/";
		encodeBase64Url(url);

		File file = new File("C:\\Users\\Saritharam pavan\\Desktop\\SARI.txt");
		BufferedReader br = new BufferedReader(new FileReader(file));
		String st;
		while ((st = br.readLine()) != null) {
			encodeBase64Mime(st);
		}
	}

	private static void encodeBase64Url(String url) {
		Base64.Encoder encodeMime = Base64.getUrlEncoder();
		Base64.Decoder decodeMime = Base64.getUrlDecoder();
		String en = encodeMime.encodeToString(url.getBytes());
		System.out.println("EncodeUrl pasword-->" + en);
		String de = new String(decodeMime.decode(en));
		System.out.println("DecodeUrl pasword<--" + de);

	}

	private static void encodeBase64Mime(String password) {
		Base64.Encoder encodeMime = Base64.getMimeEncoder();
		Base64.Decoder decodeMime = Base64.getMimeDecoder();
		String en = encodeMime.encodeToString(password.getBytes());
		System.out.println("EncodeMime pasword-->" + en);
		String de = new String(decodeMime.decode(en));
		System.out.println("DecodeMime pasword<--" + de);
	}

	private static void endeBase64(String passwod) {
		Base64.Encoder encode = Base64.getEncoder();
		Base64.Decoder decode = Base64.getDecoder();
		String en = encode.encodeToString(passwod.getBytes());
		System.out.println("Encode pasword-->" + en);
		String de = new String(decode.decode(en));
		System.out.println("Decode pasword<--" + de);
	}
}

Convert Binary To Decimal? 
public class BinaryToDecimal {
	public static int binaryToDecimal(int binaryNumber) {
		int decimal = 0;
		int p = 0;
		while (true) {
			if (binaryNumber == 0) {
				break;
			} else {
				int temp = binaryNumber % 10;
				decimal = (int) (decimal + temp * Math.pow(2, p));
				binaryNumber = binaryNumber / 10;
				p++;
				
			}
		}
		return decimal;
	}

	public static void main(String args[]) {
		int result = binaryToDecimal(110);
		System.out.println(result);
	}
}
Or
Integer.parseInt(binaryString,2);

Convert Decimal to Binary? 
public class DecimalToBinary {
	public static void main(String args[]) {
		int decnum = 10,quot, i = 1;
		int binnum[] = new int[100];
		quot = decnum;
		while (quot != 0) {
			binnum[i++] = quot % 2;
			quot = quot / 2;
		}
		for (int j = i-1; j > 0; j--) {
			System.out.print(binnum[j]);
		}
	}
}

Convert Fah to Cent and Vice versa?
public class FahToCenAndCentToFah {
	public static void main(String[] args) {
		int cent = 45;
		convertCentToFah(cent);
		int fah = 113;
		convertFahToCent(fah);
	}

	private static void convertFahToCent(int fah) {
		int cent = (int) ((fah - 32) / 1.8);
		System.out.println("FahToCent::"+cent);
	}
	private static void convertCentToFah(int cent) {
		int fah = (int) ((1.8 * cent) + 32);
		System.out.println("CentToFah::"+fah);
	}
}

Generate OTP with length 4 and 10?
public class Otp {
	public static void main(String[] args) {
		System.out.println("new password is:");
		System.out.println(otpPass(8));
		System.out.println("OTP is:");
		System.out.println(otp(4));
	}

	private static char[] otpPass(int len) {
		String alphabets = "ABCDE";
		String numbers = "12345";
		String symbols = "@#&*%";
		String values = alphabets + numbers + symbols;
		Random random = new Random();
		char[] password = new char[len];
		for (int i = 0; i < len; i++) {
			password[i] = values.charAt(random.nextInt(values.length()));
		}
		return password;
	}

	private static char[] otp(int len) {

		String numbers = "12345";
		Random random = new Random();
		char[] otp = new char[len];
		for (int i = 0; i < len; i++) {
			otp[i] = numbers.charAt(random.nextInt(numbers.length()));
		}
		return otp;
	}
}

Generate factorial number using recursion?  
public class Factorial {
	public static void main(String[] args) {
		int result = factorial(5);
		System.out.println(result);
	}
	private static int factorial(int n) {
		if (n == 1) {
			return 1;
		} else {
			return factorial(n - 1) * n;
		}
	}
}

Factorial without using recursion?
public class FactorialWithoutRecursion {
	public static void main(String[] args) {
		factWithoutRecursion();
	}
	private static void factWithoutRecursion() {
		int i, fact = 1, num = 5;
		for (i = num; i > 0; i--) {
			fact = fact * i;
		}
		System.out.print(fact);
	}
}

Sorting map values by Key? 
public class SortMapByKey {
	public static void main(String[] args) {
		Map<Integer, String> map = new HashMap<Integer, String>();
		map.put(1, "kolle");
		map.put(4, "ramu");
		map.put(2, "sari");
		map.put(3, "tej");
		Set<Entry<Integer, String>> set = map.entrySet();
		List<Map.Entry<Integer, String>> list = new ArrayList<Map.Entry<Integer, String>>(set);
		Collections.sort(list, new Comparator<Map.Entry<Integer, String>>() {
			@Override
			public int compare(Map.Entry<Integer, String> o1, Map.Entry<Integer, String> o2) {
				return o1.getKey() - o2.getKey();
			}
		});
		for (Entry<Integer, String> entry : list) {
			System.out.println(entry.getKey() + ":::" + entry.getValue());
		}
	}
}

Sorting names alphabetical order?
public class SoringAlphaStr {
	public static void main(String[] args) {
		String[] str = new String[] { "kolle", "tej", "sari", "ramu" };
		sortAlphaOrder(str);
	}

	private static void sortAlphaOrder(String[] str) {
		for (int i = 0; i < str.length; i++) {
			for (int j = 1; j < str.length; j++) {
				if (str[j-1].compareTo(str[j]) > 0) {
					String temp = str[j-1];
					str[j-1] = str[j];
					str[j] = temp;
				}
			}
		}
      for (int i = 0; i < str.length; i++) {
		System.out.println(str[i]);
	}
	}
}

Sorting numbers given array Ascending and descending order?
public class AscAndDescNumArr {
	public static void main(String[] args) {
		int num[] = { 3, 2, 5, 7, 5, 8 };
		ascAndDesNumArr(num);
	}

	private static void ascAndDesNumArr(int[] num) {
		for (int i = 0; i < num.length; i++) {
			for (int j = 1; j < num.length; j++) {
				if (num[j - 1] > num[j]) {
					int temp = num[j - 1];
					num[j - 1] = num[j];
					num[j] = temp;
				}
			}
		}
		for (int i = 0; i < num.length; i++) {
			System.out.print(num[i] + " ");
		}
		System.out.println();
		for (int i = num.length - 1; i >= 0; i--) {
			System.out.print(num[i]+" ");
		}
	}
}

Convert String to Integer and vice versa?
public class IntStrViceversa {
	public static void main(String[] args) {
		// converting int to string
		int num = 123;

		String str1 = Integer.toString(num);
		System.out.println(str1);

		String str2 = String.valueOf(num);
		System.out.println(str2);

		Integer i = new Integer(num);
		String str3 = i.toString();
		System.out.println(str3);

		String str4 = new Integer(num).toString();
		System.out.println(str4);

		DecimalFormat formatter = new DecimalFormat("#");
		String str5 = formatter.format(num);
		System.out.println(str5);

		StringBuffer sb = new StringBuffer();
		sb.append(num);
		String str6 = sb.toString();
		System.out.println(str6);

		StringBuilder builder = new StringBuilder();
		builder.append(num);
		String str7 = builder.toString();
		System.out.println(str7);

		String str8 = Integer.toBinaryString(num);
		System.out.println(str8);

		String str9 = Integer.toHexString(num);
		System.out.println(str9);

		String str10 = Integer.toHexString(num);
		System.out.println(str10);

		// convert String to int
		int decimalExample = Integer.parseInt("20");
		int signedPositiveExample = Integer.parseInt("+20");
		int signedNegativeExample = Integer.parseInt("-20");
		int radixExample = Integer.parseInt("20", 16);
		int stringExample = Integer.parseInt("geeks", 29);

		System.out.println(decimalExample);
		System.out.println(signedPositiveExample);
		System.out.println(signedNegativeExample);
		System.out.println(radixExample);
		System.out.println(stringExample);

		int decimalExample1 = Integer.valueOf("20");
		int signedPositiveExample1 = Integer.valueOf("+20");
		int signedNegativeExample1 = Integer.valueOf("-20");
		int radixExample1 = Integer.valueOf("20", 16);
		int stringExample1 = Integer.valueOf("geeks", 29);

		System.out.println(decimalExample1);
		System.out.println(signedPositiveExample1);
		System.out.println(signedNegativeExample1);
		System.out.println(radixExample1);
		System.out.println(stringExample1);

	}
}

Swap two string using 3rd and without using 3rd-temp variable?
public class SwapTwoString {
	public static void main(String[] args) {
		// without using 3rd variable
		String str1 = "Hello";
		String str2 = "world";

		str1 = str1 + str2;
		str2 = str1.substring(0, str2.length());
		str1 = str1.substring(str2.length());

		System.out.println(str1);
		System.out.println(str2);

		// With using 3rd variable

		String str3 = "amma";
		String str4 = "nanna";

		String temp = str3;
		str3 = str4;
		str4 = temp;
		System.out.println(str3);
		System.out.println(str4);

	}
}

Swap two numbers using 3rd and without using 3rd-temp variable?
public classSwappinTwoNumbers {
	public static void main(String[] args) {
		Scanner scanner=new Scanner(System.in);
		System.out.println("enter first number:");
		int a=scanner.nextInt();
		System.out.println("enter second number:");
		int b=scanner.nextInt();
		
		System.out.println("before swapping:");
		System.out.println("A="+a);
		System.out.println("B="+b);
		
		/*int temp=a;// way 1 Using 3rd value
		         a=b;
		         b=temp;
		*/

		/*a=a+b; //2 way swapping witout using 3 rd value
		  b=a-b;
		  a=a-b;*/

		  b=a+b-(a=b);//way 3 in single line of code withot using 3rd value

		System.out.println("After swapping:");
		System.out.println("A="+a);
		System.out.println("B="+b);
	}
	}

Searching char or string or substring?
public class CharStrSearch {
	public static void main(String[] args) {

		String str = "GeeksforGeeks is a computer science portal";

		int firstIndex = str.indexOf('s');
		System.out.println("First occurrence of char 's'" + " is found at : " + firstIndex);

		int lastIndex = str.lastIndexOf('s');
		System.out.println("Last occurrence of char 's' is" + " found at : " + lastIndex);

		int first_in = str.indexOf('s', 10);
		System.out.println("First occurrence of char 's'" + " after index 10 : " + first_in);

		int last_in = str.lastIndexOf('s', 20);
		System.out.println("Last occurrence of char 's'" + " after index 20 is : " + last_in);

		int char_at = str.charAt(20);
		System.out.println("Character at location 20: " + char_at);

	}
}

Create anonymous HashMap object?
public class CheckHash {
	public static void main(String[] args) {
		Map<String, String> myMap = new HashMap() {{
	        put("a", "b");
	        put("c", "d");
	    }};
	    System.out.println(myMap);
	}
}

QUEUE:
package corejava;

import java.util.Scanner;
	class Wonder 
	{ 
	int ele[]=new int[100];
	int size;
	int top; 
	int rear;
	Wonder(int limit)
	{
	size=limit;
	top=-1;
	}
	void pushitem(int value) { 
	if (top < size - 1) { 
	top++; 
	ele[top] = value; 
	System.out.println("Element " + value 
	+ " is pushed to Queue !"); 
	} else { 
	System.out.println("Overflow !"); 
	} 
	} int popitem() { 

	if (top >= rear) { 
	int a1=ele[rear];
	rear++; 
	System.out.println("Pop operation done !"); 
	return(a1); 
	} else { 
	System.out.println("Underflow !"); 
	return(-9999);
	}
	} 
	void printwonder() { 
	if (top >= rear) { 
	System.out.println("Elements in Queue : "); 
	for (int i = rear; i <= top; i++) { 
	System.out.println(ele[i]); 
	} 
	} 
	} 
	public static void main(String[] args) 
	{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter limit:");
	int l=ob.nextInt();
	Wonder q = new Wonder(l);
	char ch;
	do
	{
	System.out.println("Enter I(Insert)/R(Remove)/D(Display):");
	char x=ob.next().charAt(0);
	x=Character.toUpperCase(x);
	switch(x)
	{
	case 'I':System.out.println("Enter an element:");
	int z=ob.nextInt();
	q.pushitem(z); 
	break;
	case 'R':System.out.println("Popped value="+q.popitem());
	break;
	case 'D':q.printwonder();
	break;
	}
	Scanner ob1=new Scanner(System.in);
	System.out.println("Do you want to continue?(Y/N):");
	ch=ob1.next().charAt(0);
	}while(ch=='y'||ch=='Y');
	} 
	}

TREES:
public class BinaryTree {
	static class TreeNode {
		TreeNode leftReference;
		TreeNode rightReference;
		int nodeValue;

		public TreeNode(int nodeValue) {
			this.nodeValue = nodeValue;
		}
	}

	public static void main(String[] args) {
		new BinaryTree().run();
	}

	public void run() {
		// tree root node.
		int rootValue = 40;
		TreeNode rootnode = new TreeNode(rootValue);
		System.out.println("root node created. " + rootnode.nodeValue);
		// insertNode new element starting with rootnode.
		insertNode(rootnode, 11);
		insertNode(rootnode, 15);
		insertNode(rootnode, 16);
		insertNode(rootnode, 23);
		insertNode(rootnode, 79);
		System.out.println("print the content of  tree in  binary tree order");
		printTree(rootnode);
	}

	/*
	 *
	 * inserting new parentNode to tree. binary tree set the smaller nodeValue on
	 * left and the bigger nodeValue on the right parent TreeNode in the first case
	 * will be root node.
	 */
	public void insertNode(TreeNode parentNode, int nodeValue) {
		if (nodeValue < parentNode.nodeValue) {
			if (parentNode.leftReference != null) {
				// Go more depth to left.
				insertNode(parentNode.leftReference, nodeValue);
			} else {
				System.out.println(" LEFT:   new node value " + nodeValue + "  , its root  " + parentNode.nodeValue);
				parentNode.leftReference = new TreeNode(nodeValue);
			}
		} else if (nodeValue > parentNode.nodeValue) {
			if (parentNode.rightReference != null) {
				// Go more depth to right
				insertNode(parentNode.rightReference, nodeValue);
			} else {
				System.out.println("  Right: new node value  " + nodeValue + ", its root " + parentNode.nodeValue);
				parentNode.rightReference = new TreeNode(nodeValue);
			}
		}
	}

	/*
	 *
	 * recursivly printing the content of the tree.
	 */
	public void printTree(TreeNode node) {
		if (node != null) {
			printTree(node.leftReference);
			System.out.println("  node value  " + node.nodeValue);
			printTree(node.rightReference);
		}
	}
}
RECURSION:
import java.util.Scanner;

/**
 * Java program to calculate and print Fibonacci number using both recursion and
 * Iteration. Fibonacci number is sum of previous two Fibonacci numbers fn=
 * fn-1+ fn-2 first 10 Fibonacci numbers are 1, 1, 2, 3, 5, 8, 13, 21, 34, 55
 * 
 * @author
 */
public class FibonacciCalculator {
	public static void main(String args[]) {
		// input to print Fibonacci series upto how many numbers
		System.out.println("Enter number upto which Fibonacci series to print: ");
		int number = new Scanner(System.in).nextInt();
		System.out.println("Fibonacci series upto " + number + " numbers : ");
		// printing Fibonacci series upto number
		for (int i = 1; i <= number; i++) {
			System.out.print(fibonacci2(i) + " ");
		}
	}

	/*
	 * Java program for Fibonacci number using recursion. This program uses tail
	 * recursion to calculate Fibonacci number for a given number
	 * 
	 * @return Fibonacci number
	 */
	public static int fibonacci(int number) {
		if (number == 1 || number == 2) {
			return 1;
		}
		return fibonacci(number - 1) + fibonacci(number - 2); // tail recursion
	}

	/*
	 * Java program to calculate Fibonacci number using loop or Iteration.
	 * 
	 * @return Fibonacci number
	 */
	public static int fibonacci2(int number) {
		if (number == 1 || number == 2) {
			return 1;
		}
		int fibo1 = 1, fibo2 = 1, fibonacci = 1;
		for (int i = 3; i <= number; i++) {
			fibonacci = fibo1 + fibo2; // Fibonacci number is sum of previous two Fibonacci number
			fibo1 = fibo2;
			fibo2 = fibonacci;

		}
		return fibonacci; // Fibonacci number

	}

}
STACKS:
package corejava;
public class Stack {
	private int maxSize;
	private long[] stackArray;
	private int top;

	public Stack(int s) {
		maxSize = s;
		stackArray = new long[maxSize];
		top = -1;
	}

	public void push(long j) {
		stackArray[++top] = j;
	}

	public long pop() {
		return stackArray[top--];
	}

	public long peek() {
		return stackArray[top];
	}

	public boolean isEmpty() {
		return (top == -1);
	}

	public boolean isFull() {
		return (top == maxSize - 1);
	}

	public static void main(String[] args) {
		Stack theStack = new Stack(10);
		theStack.push(10);
		theStack.push(20);
		theStack.push(30);
		theStack.push(40);
		theStack.push(50);
		while (!theStack.isEmpty()) {
			long value = theStack.pop();
			System.out.print(value);
			System.out.print(" ");
		}
		System.out.println("");
	}
}

LINK LIST:
/**  
 LinkedList.java: This Program Demonstrate how to create Node,Insert Element   
 in the linked list and display and Delete element.  
 author:itsafiz@gmail.com  
 */  
 import java.util.*;

class Node {
	int data;
	Node next;

	Node(int d)// node class Constructor.
	{
		data = d;
		next = null;
	}
}

class LinkedList {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int data, ch, size = 0;
		Node head = null, tail = head;
		while (true) {
			System.out.println("1.Insert\n2.Display\n3.Delete\n4.Exit");
			ch = in.nextInt();
			switch (ch) {
			case 1:
				System.out.println("Enter your Element");
				data = in.nextInt();
				Node newNode = new Node(data);
				if (head == null) {
					head = newNode;
					tail = head;
				} else {
					tail.next = newNode;// inserting element
					tail = newNode;
				}
				size++;
				break;
			case 2:
				if (size > 0) {
					for (Node temp = head; temp != null; temp = temp.next)
						System.out.print(temp.data + "\t");
					System.out.println();
				} else
					System.out.println("LinkedList is empty");
				break;
			case 3:
				if (size > 0) {
					System.out.println("Enter your element");
					data = in.nextInt();
					if (head.data == data)
						head = head.next;
					else {
						tail = head;
						Node temp = head.next;
						while (temp != null) {
							if (temp.data == data) {
								tail.next = temp.next;
								size--;
								break;
							}
							tail = temp;
							temp = temp.next;
						}
					} // else
				} else
					System.out.println("LinkedList is empty");
				break;
			default:
				System.exit(0);
			}// switch
		}
	}
}

Stack Data Structure
Stack is a linear data structure of similar data type items, stores data in LIFO (Last In First Out) order
Basic operations
•	push adds an item onto the stack
•	pop removes last pushed item from the stack
•	peek returns the last item pushed onto the stack
Other operations
•	isEmpty returns true if no more items can be popped
•	isFull returns true if no more items can be pushed
•	size returns the number of items on the stack

package com.datastructures;

import java.util.NoSuchElementException;

public class Stack {
	private int top;
	private int[] stack;

	public Stack(int capacity) {
		top = -1;
		stack = new int[capacity];
	}

	public void push(int x) {
		if (isFull()) {
			throw new NoSuchElementException("Stack is full.....");
		}
		stack[++top] = x;
	}

	public int peek() {
		if (isEmpty()) {
			throw new NoSuchElementException("No element avalable in stack");
		}
		return stack[top];
	}

	private void traverseElements() {
		
		for (int i = top - 1; i <= size(); i++) {
			if (isEmpty()) {
				throw new NoSuchElementException("No elements for traverse");
			}
		
				System.out.println("valus="+i);
			
		}
		
		if (isEmpty()) {
			throw new NoSuchElementException("No element avalable in stack");
		}
	}

	public int size() {
		return top + 1;

	}

	public int pop() {
		if (isEmpty()) {
			throw new NoSuchElementException("No element avalable in stack");
		}
		return stack[top--];

	}

	private boolean isEmpty() {
		return top == -1;
	}

	private boolean isFull() {
		return top == stack.length - 1;
	}

	public static void main(String[] args) {
		Stack ss = new Stack(5);
		ss.push(1);
		ss.push(2);
		ss.push(3);
		ss.push(4);
		// ss.push(5);
		System.out.println("TOP=" + ss.peek());
		System.out.println("POP="+ss.pop());
		System.out.println("POP="+ss.pop());
		System.out.println("POP="+ss.pop());
		System.out.println("POP="+ss.pop());
		System.out.println("SIZE=" + ss.size());
		ss.traverseElements();

	}

}

Queue Data Structure
Queue is a linear data structure of similar data type items, stores data in FIFO (First In First Out) order
Basic operations
•	Insert aka Enqueue, adds an item onto the end of the queue
•	Remove aka Dequeue, retrieves and removes the head of the queue
•	Examine, retrieves, but does not remove, the head of the queue
Other operations
•	isEmpty returns true if no more items can be dequeued
•	isFull returns true if no more items can be enqueued
•	size returns the number of items on the queue
public class Queue {
	private int[] queue;
	private int rear;
	private int front;

	public Queue(int capacity) {
		queue = new int[capacity];
		rear = 0;
		front = 0;
	}

	public void enqueue(int x) {
		if (isFull()) {
			throw new NoSuchElementException("Stack full....");
		}
		queue[rear++] = x;
	}

	public int dequeue() {
		if (isEmpty()) {
			throw new NoSuchElementException("No elements");
		}
		return queue[front++];
	}

	public int front() {
		if (isEmpty()) {
			throw new NoSuchElementException("No elements");
		}

		return queue[front];
	}

	public void traverseElements() {
		for (int i = front; i <= size(); i++) {
			if (isEmpty()) {
				throw new NoSuchElementException("No elements");
			} else {
				System.out.println(i);
			}
		}
	}

	public int size() {
		return rear - front;
	}

	private boolean isEmpty() {
		return front == rear;
	}

	private boolean isFull() {
		return rear == queue.length;
	}
	public static void main(String[] args) {
		Queue queue = new Queue(4);
		queue.enqueue(1);
		queue.enqueue(2);
		queue.enqueue(3);
		System.out.println("SIZE="+queue.size());
		int top = queue.front();
		System.out.println(top);
		
		queue.dequeue();
		System.out.println("SIZE="+queue.size());
	queue.traverseElements();
		
		
	}
}

Deque
Deque is a linear data structure of similar data type items that generalizes a queue, for which elements can be added to or removed from either the front (head) or rear (tail).
public class DequeueByArray {
    private int[] dequeue;
    private int front;
    private int rear;

    public DequeueByArray(int capacity) {
        this.dequeue = new int[capacity];
        this.front = 0;
        this.rear = 0;
    }

    public void enqueueFirst(int x) {
        if (isFull()) {
            throw new IllegalStateException();
        }

        for (int i = rear; i > front ; i--) {
            dequeue[i] = dequeue[i-1];
        }

        dequeue[front] = x;
        rear++;
    }

    public void enqueueLast(int x) {
        if (isFull()) {
            throw new IllegalStateException();
        }

        dequeue[rear++] = x;
    }

    public int dequeueFirst() {
        if (isEmpty()) {
            throw new NoSuchElementException();
        }

        return dequeue[front++];
    }

    public int dequeueLast() {
        if (isEmpty()) {
            throw new NoSuchElementException();
        }

        return dequeue[rear--];
    }

    public int front() {
        if (isEmpty()) {
            throw new NoSuchElementException();
        }

        return dequeue[front];
    }

    public int rear() {
        if (isEmpty()) {
            throw new NoSuchElementException();
        }

        return dequeue[rear-1];
    }

    public boolean isEmpty() {
        return front == rear;
    }

    public boolean isFull() {
        return rear == dequeue.length;
    }

    public int size() {
        return rear - front;
    }

    public static void main(String[] args) {
        DequeueByArray myQueue = new DequeueByArray(3);
        myQueue.enqueueFirst(1);
        myQueue.enqueueLast(2);
        myQueue.enqueueFirst(3);

        System.out.println(myQueue.front()); // 3
        System.out.println(myQueue.dequeueFirst()); // 3
        System.out.println(myQueue.front()); // 1

        System.out.println(myQueue.size()); // 2
        System.out.println(myQueue.isEmpty()); // false
        System.out.println(myQueue.isFull()); // false
    }
}

Using BufferedReader: This method reads text from a character-input stream. It does buffering for efficient reading of characters, arrays, and lines.
The buffer size may be specified, or the default size may be used. The default is large enough for most purposes.
In general, each read request made of a Reader causes a corresponding read request to be made of the underlying character or byte stream. It is therefore advisable to wrap a BufferedReader around any Reader whose read() operations may be costly, such as FileReaders and InputStreamReaders. For example,
Way1:
public class FileRead1 {
public static void main(String[] args) throws IOException {
	File file = new File("E:\\Eclipse\\restapi-workspace\\Core Java\\src\\com\\file\\read\\file1.txt");
	BufferedReader br = new BufferedReader(new FileReader(file));
	String st;
	while ((st=br.readLine()) != null) {
		System.out.println(st);
	}
}
}

Using FileReader class: Convenience class for reading character files. The constructors of this class assume that the default character encoding and the default byte-buffer size are appropriate.
public class FileRead1 {
	public static void main(String[] args) throws IOException {
		FileReader file = new FileReader("E:\\Eclipse\\restapi-workspace\\Core Java\\src\\com\\file\\read\\file1.txt");
		int i;
		while ((i = file.read()) != -1) {
			System.out.print((char)i	);
		}
	}
}

Using Scanner class: A simple text scanner which can parse primitive types and strings using regular expressions.
A Scanner breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various next methods.
public class FileRead1 {
	public static void main(String[] args) throws IOException {
		File file = new File("E:\\Eclipse\\restapi-workspace\\Core Java\\src\\com\\file\\read\\file1.txt");
	    Scanner scanner = new Scanner(file);
		while (scanner.hasNextLine()) {
			System.out.print(scanner.nextLine());
		}
	}
}

Using Scanner class but without using loops:
public class FileRead1 {
	public static void main(String[] args) throws IOException {
		File file = new File("E:\\Eclipse\\restapi-workspace\\Core Java\\src\\com\\file\\read\\file1.txt");
		Scanner scanner = new Scanner(file);
		scanner.useDelimiter("\\Z");
		System.out.print(scanner.nextLine());
	}
}

Reading the whole file in a List: Read all lines from a file. This method ensures that the file is closed when all bytes have been read or an I/O error, or other runtime exception, is thrown. Bytes from the file are decoded into characters using the specified charset.
public class FileRead1 {
public static List<String> readFileInList(String fileName) {
	List<String> lines = Collections.emptyList();
	try {
		lines = Files.readAllLines(Paths.get(fileName), StandardCharsets.UTF_8);
	}
	catch (IOException e) {
		e.printStackTrace();
	}
	return lines;
}
public static void main(String[] args) {
	List l = readFileInList("E:\\Eclipse\\restapi-workspace\\Core Java\\src\\com\\file\\read\\file1.txt");
	Iterator<String> itr = l.iterator();
	while (itr.hasNext())
		System.out.println(itr.next());
}
}
Read a text file as String in Java:
// Java Program to illustrate reading from text file
// as string in Java
package io;
import java.nio.file.*;;
public class ReadTextAsString
{
  public static String readFileAsString(String fileName)throws Exception
  {
    String data = "";
    data = new String(Files.readAllBytes(Paths.get(fileName)));
    return data;
  }
 
  public static void main(String[] args) throws Exception
  {
    String data = readFileAsString("C:\\Users\\pankaj\\Desktop\\test.java");
    System.out.println(data);
  }
}

Get all IP Address from log file?
String inp ="";
    File file = new File("C:\\input.txt");
    try {
        Scanner scan = new Scanner(file);
        while(scan.hasNextLine()) {
            inp += scan.nextLine() + " ";
        }
    } catch (FileNotFoundException f) {
        f.printStackTrace();
    }

    System.out.println("File inp string is "+inp);
    Pattern pattern = 
        Pattern.compile("^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)");
    Matcher match = pattern.matcher(inp);
    while(match.find()) {
        System.out.println("IP found: "+match.group());
    }

Read IPAddress and Status code from the String
public class FileRead1 {
public static void main(String[] args) {
	String str1 = "12.1.12.1 9000 127.0.0.1 - frank [10/Oct/2000:13:55:36"
            + " -0700] \"GET /apache_pb.gif HTTP/1.0\" 200 2326 "
            + "\"http://www.example.com/start.html\" \"Mozilla/4.08 "
            + "[en] (Win98; I ;Nav)\"";
Pattern p = Pattern.compile("\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s\\S+\\s\\S+\\s\\S+\\s\\S+\\s\\S+\\s\\S+\\s(\\S+).*");
Matcher m = p.matcher(str1);
if (m.matches())
    System.out.println(m.group(1));
}
}

Read all ip address from the log files
public class FileRead1 {
	public static List<String> readFileInList(String fileName) {
		List<String> lines = Collections.emptyList();
		try {
			lines = Files.readAllLines(Paths.get(fileName), StandardCharsets.UTF_8);
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		return lines;
	}
	public static void main(String[] args) {
		List l = readFileInList("E:\\Eclipse\\restapi-workspace\\Core Java\\src\\com\\file\\read\\logdetails.log");
		for (Object object : l) {
			Pattern pattern = Pattern.compile("(\\S+).*");
			Matcher matcher =pattern.matcher((CharSequence) object);
			if (matcher.matches()) {
				System.out.println(matcher.group(1));
			}
		}
		
	}
	}


http://javaconceptoftheday.com/how-to-find-percentage-of-uppercase-letters-lowercase-letters-digits-and-special-characters-in-string/
https://www.ntu.edu.sg/home/ehchua/programming/java/J2_Basics.html
   
Reversing

public class ReverseTheString {
	public static void main(String[] args) {
		String str = "MyJava";

// 1. Using StringBuffer Class

		StringBuffer sbf = new StringBuffer(str);

		System.out.println(sbf.reverse()); // Output : avaJyM

// 2. Using iterative method

		char[] strArray = str.toCharArray();

		for (int i = strArray.length - 1; i >= 0; i--) {
			System.out.print(strArray[i]); // Output : avaJyM
		}

		System.out.println();

// 3. Using Recursive Method

		System.out.println(recursiveMethod(str)); // Output : avaJyM
	}

// Recursive method to reverse string

	static String recursiveMethod(String str) {
		if ((null == str) || (str.length() <= 1)) {
			return str;
		}

		return recursiveMethod(str.substring(1)) + str.charAt(0);
	}
}
If the “MyJava” is the string to reverse, then this method works like this.

1st Call —>   recursiveMethod(“MyJava”)
2nd Call —> recursiveMethod(“yJava”) + “M”
3rd Call —>  (recursiveMethod(“Java”) + “y”) + “M”
4th call —>  ((recursiveMethod(“ava”) + “J”)+”y”) + “M”
5th Call —>  (((recursiveMethod(“va”) + “a”) + “J”)+”y”) + “M”
6th Call —>  ((((recursiveMethod(“a”) + “v”) + “a”) + “J”)+”y”) + “M”

Removing Duplicates
public class RemovingDuplicateInArray {
	public static void main(String args[])
	{
		int array[] = { 10, 20, 30, 20, 40, 40, 50, 60, 70, 80 };// array of ten
		// elements
		int size = array.length;
		System.out.println("Size before deletion: " + size);
		for (int i = 0; i < size; i++) {
			for (int j = i + 1; j < size; j++) {
				if (array[i] == array[j]) // checking one element with all the
				// element
				{
					while (j < (size) - 1) {
						array[j] = array[j + 1];// shifting the values
						j++;
					}
					size--;
				}
			}
		}
		System.out.println("Size After deletion: " + size);
		for (int k = 0; k < size; k++) {
			System.out.println(array[k]); // printing the values
		}
	}
}

public class RemovingDuplicateInArray {
	public static void main(String[] args) {
		String stringWithDuplicates = "afsjeadrffafvgdefeverhfgberAAad";
		char[] characters = stringWithDuplicates.toCharArray();
		int length = characters.length;
		System.out.println("String with duplicates : " + stringWithDuplicates);
	for (int i = 0; i < length; i++) {
            for (int j = i + 1; j < length; j++) {
                if (characters[i] == characters[j]) {
                    int temp = j;//set duplicate element index
                    //delete the duplicate element by shifting the elements to left
                    for (int k = temp; k < length - 1; k++) {
                    	characters[k] = characters[k + 1];
                    }
                    j--;
                    length--;//reduce char array length
 
                }
            }
        }
	String stringWithOutDuplicates = new String(characters);
	stringWithOutDuplicates = stringWithOutDuplicates.substring(0, length);
	System.out.println("String after duplicates removed : " + stringWithOutDuplicates);
}
}

Removing Duplicates In String
            public static void main(String[] args) {
		String str = "sagar";
		char[] ch = str.toCharArray();
		Set<Character> set = new LinkedHashSet();
		for (Character character : ch) {
			set.add(character);
		}
		StringBuilder sb = new StringBuilder();
		for (Character newcharSet : set) {
			sb.append(newcharSet);
		}
		System.out.println("Your " + str + " After Removing Duplicates Is :: " + sb.toString());
	}
OUTPUT:
Sagr

Reverse and sortiing words
public class StringRevesreAndSort {
	public static void main(String[] args) {
		String str= "i love india";
		int i;
		String s11="";
		String[] words= str.split(" ");
		String reverse="";
		for (i = words.length-1; i >=0; i--) {
			reverse = reverse+words[i]+" ";
		}
		System.out.println("reverse="+reverse);
		char[] ch=reverse.toCharArray();
		System.out.print("sort=");
		for (i = 0; i < ch.length; i++) {
			for (int j = i+1; j < ch.length; j++) {
				if (ch[i]>ch[j]) {
					char temp = ch[i];
					ch[i]=ch[j];
					ch[j]=temp;
				}
				
			}
		
		}
		
		for (i = 0; i <ch.length; i++) {
			s11 = new String(ch);
		}
		System.out.print(s11.trim());
	}
	}

Missing Number In GivenArray
public class MissingNumberInArray {
	static int sum = 0;
	public static void main(String[] args) {
		int[] i = { 1, 2, 4, 5, 3, 7 };//6
		int n = i.length + 1;//7
		int totalSum = totalSum(n);//28
		int sum = sumOfElements(i);//22
		int missingNumber = totalSum - sum;//28-22=6
		System.out.println("Your Missing Number Is  :: " + missingNumber);//6
	}
	private static int sumOfElements(int[] i) {
		for (int j = 0; j < i.length; j++) {
			sum = sum + i[j];
		}
		return sum;
	}
	private static int totalSum(int n) {
		int totalSum = (n * (n + 1)) / 2;
		return totalSum;
	}
}

1 to 10 or N also without using loops and if condition
public class Print1To10WithoutLoopAndCondition {
	public void print1To10() {
		int[] arr = new int[11];
		try {
			printLn(arr, 1);
		} catch (ArrayIndexOutOfBoundsException e) {
		}
	}
	public void printLn(int[] arr, int i) {
		arr[i] = arr[i - 1] + 1;
		System.out.println(arr[i]);
		printLn(arr, i + 1);
	}
	public static void main(String[] args) {
		Print1To10WithoutLoopAndCondition pwt = new Print1To10WithoutLoopAndCondition();
		pwt.print1To10();
	}
}
OUTPUT:
1
2
3
4
5
6
7
8
9
10
reverse a string without using any api using loop
public class ReversewithoutLoop{
	public static void main(String[] args) {
		String s = "Sagar";
		StringBuilder sb = new StringBuilder();
		for (int i = s.length() - 1; i >= 0; i--) {
			sb.append(s.charAt(i));
		}
		System.out.println(sb);	
	}
}
OUTPUT:
ragaS
Given Number Perfect Number
public class PerfectOrNot{
	public static void main(String[] args) {
		System.out.println("Enter ur number");
		System.out.println();
		Scanner sc = new Scanner(System.in);
		int number = sc.nextInt();// 6,28,496
		int result = 0;
		for (int i = 1; i <= number / 2; i++) {
			if (number % i == 0) {
				result = result + i;
			}
		}
		if (result == number) {
			System.out.println("Given " + number + " is " + "Perfect Number");
		}
		else {
			System.out.println("Given " + number + " is " + "Not Perfect Number");
		}
	}
}
OUTPUT:
Enter ur number
3
Given 3 is Not Perfect Number
Enter ur number
6
Given 6 is Perfect Number
Finding Duplicates In Two Arrays
public class DuplicatesTwoArrays {
	public static void main(String[] args) {
		int[] arr1 = { 4, 7, 3, 9, 2 };
		int[] arr2 = { 3, 2, 12, 9, 40, 32, 4 };
		for (int i = 0; i < arr1.length; i++) {
			for (int j = 0; j < arr2.length; j++) {
				if (arr1[i] == arr2[j]) {
					System.out.println(arr1[i]);
				}
			}
		}
	}
}
OUTPUT:
4
3
9
2
String Replacement using Logic StringBuilder
public class Replace {
	public static void main(String[] args) {
		System.out.println("Plz Enter ur number :: ");
		System.out.println();
		Scanner sc = new Scanner(System.in);
		String str = sc.nextLine();//java
		char from = 'j';
		char to = 'k';
		StringBuilder result = new StringBuilder(str.length());
		for (int i = 0; i < str.length(); i++) {
			if (str.charAt(i) == from) {
				result.append(to);//jk
			} else {
				result.append(str.charAt(i));
			}
		}
		System.out.println(result);//kava
	}
}
Print Number in given String:
public class PrintNumbersInString {
	public static void main(String[] args) {
		boolean flag = false;
		String str="kolle123";
		for (int i = 0; i < str.length(); i++) {
			flag=Character.isDigit(str.charAt(i));
			if (flag) {
				System.out.print(str.charAt(i));//123
			}
		}
		
	}
}
Convert in ArrayList<E> to Arrays
public class ListToArray{
	public static void main(String[] args) {
	ArrayList<String> list = new ArrayList<>();
		list.add("kolle");
		list.add("siddu");
		list.add("pavan");
		list.add("tej");
		list.add("kolle");
       String[] str1=new String[list.size()];
      list.toArray(str1);
      for (String string : str1) {
		System.out.println(string);
	}
	}
}
OutPut:
kolle
siddu
pavan
tej
kolle
Given String Polyndrome Or Not
public   class PolyndromeTest
{
public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	String original,reverse="";
	original=sc.nextLine();
	int length=original.length();

	for (int i = length-1; i >=0; i--) {
	reverse=reverse+original.charAt(i);
	}
	System.out.println(reverse);
	if (reverse.equals(original)) {
		System.out.println("Polyndrome");
	}
	else
	{
		System.out.println("not polyndrom");
	}
}
}
OUTPUT:
amma
amma
Polyndrome
Stack Using Polyndrome or Not
public class Test {
public static void main(String[] args) {
	System.out.println("Your string is:");
	String str="aba";
	String reverse="";
Stack stack = new Stack();
    for (int i = 0; i < str.length(); i++) {
	  stack.push(str.charAt(i));
	}
    while(!stack.isEmpty()){
    	reverse=reverse+stack.pop();
    }
    if (str.equals(reverse)) {
		System.out.println("Polyndrome");
	}else{
		System.out.println("Not Polyndrome");
	}
}
}
OUTPUT:
Your string is:
Polyndrome
Is it possible to remove duplicates  from arraylist ?
public   class RemoveDuplicatesFromArraList
{
public static void main(String[] args) {
    ArrayList<String> lst = new ArrayList<String>();
    lst.add("ABC");
    lst.add("ABC");
    lst.add("ABCD");
    lst.add("ABCD");
    lst.add("ABCE");
    System.out.println("Duplicates List "+lst);
    Object[] st = lst.toArray();
      for (Object s : st) {
        if (lst.indexOf(s) != lst.lastIndexOf(s)) {
            lst.remove(lst.lastIndexOf(s));
         }
      }
    System.out.println("Distinct List "+lst);
}
}
OUTPUT:
Duplicates List [ABC, ABC, ABCD, ABCD, ABCE]
Distinct List [ABC, ABCD, ABCE]

Approach:2
public class RemoveDuplicatesDemo {
    public static void main(String[] args) {
        List<String> cityList = new ArrayList<>();
        cityList.add("Delhi");
        cityList.add("Mumbai");
        cityList.add("Bangalore");
        cityList.add("Chennai");
        cityList.add("Kolkata");
        cityList.add("Mumbai");
        
        List<String> newList = new ArrayList<>();
        for(String name : cityList){
            if(!newList.contains(name)){
                newList.add(name);
            }
        }

        for(String name : newList){
            System.out.println("City Name - " + name);
        }
    }
}
Approach3:
public class RemoveDuplicatesDemo {
    public static void main(String[] args) {
        List<String> cityList = new ArrayList<>();
        cityList.add("Delhi");
        cityList.add("Mumbai");
        cityList.add("Bangalore");
        cityList.add("Chennai");
        cityList.add("Kolkata");
        cityList.add("Mumbai");
        cityList = cityList.stream().distinct().collect(Collectors.toList());
        // displaying the elements
        for(String name : cityList){
            System.out.println("City Name - " + name);
        }
    }
}


How to Base64 encoding and decoding given String like Password and email etc…
public class Base64BasicEncryptionExample {  
    public static void main(String[] args) {  
 Base64.Encoder encoder = Base64.getMimeEncoder(); // Getting MIME encoder(MIME means any files like text,html,file,jpg,application) 
        Base64.Decoder decoder = Base64.getMimeDecoder(); // Getting MIME decoder  

         
        String message = "kolle123@#";  
        String eStr = encoder.encodeToString(message.getBytes());  
        System.out.println("Encoded message:"+eStr);  // Encoded message:a29sbGUxMjNAIw==
        // Decoding MIME encoded message
        String dStr = new String(decoder.decode(eStr));  
        System.out.println("Decoded message:"+dStr);   // Decoded message:kolle123@#
    }  
}  
OUTPUT:
Remove Even Number in given array
public class RemoveEvenNumber
{
	public static void main(String[] args) {
		int a[]={1,2,3,4,5,6,7,8};
		System.out.println("after removing evens remainig numbers are:");
		for (int i = 0; i < a.length; i++) {
			if (i%2!=0) {
			System.out.print(" "+a[i]);	
			}
		}
	}
	}
OUTPUT:
after removing evens remainig numbers are:
 1 3 5 7
Fibonacci Series
public class Fibonacci
{
public static void main(String[] args) {
int n1,n2,sum=0;
n1=0;n2=1;
System.out.println("Fibanocci Numbers:");
for (int i = 0; i <10; i++) {
System.out.print(n1+ " ");
sum=n1+n2;
n1=n2;
n2=sum;
}
}
}
OUTPUT:
Fibanocci Numbers:
0 1 1 2 3 5 8 13 21 34 
Sum the odd numbers and the even numbers from a lowerbound to an upperbound?
public class OddEvenSum {  // Save as "OddEvenSum.java"
   public static void main(String[] args) {
      int lowerbound = 1, upperbound = 1000;
      int sumOdd  = 0;    // For accumulating odd numbers, init to 0
      int sumEven = 0;    // For accumulating even numbers, init to 0
      int number = lowerbound;
      while (number <= upperbound) {
         if (number % 2 == 0) {  // Even
            sumEven += number;   // Same as sumEven = sumEven + number
         } else {                // Odd
            sumOdd += number;    // Same as sumOdd = sumOdd + number
         }
         ++number;  // Next number
      } 
      // Print the result
      System.out.println("The sum of odd numbers from " + lowerbound + " to " + upperbound + " is " + sumOdd);
      System.out.println("The sum of even numbers from " + lowerbound + " to " + upperbound + "  is " + sumEven);
      System.out.println("The difference between the two sums is " + (sumOdd - sumEven));
   }
}
OUTPUT:
The sum of odd numbers from 1 to 1000 is 250000
The sum of even numbers from 1 to 1000  is 250500
The difference between the two sums is -500
Print the minimum, maximum and bit-length for primitive types
public class PrimitiveTypesMinMax {
   public static void main(String[] args) {
      // int (32-bit signed integer)
      System.out.println("int(min) = " + Integer.MIN_VALUE);
      System.out.println("int(max) = " + Integer.MAX_VALUE);
      System.out.println("int(bit-length) = " + Integer.SIZE);
      // byte (8-bit signed integer)
      System.out.println("byte(min) = " + Byte.MIN_VALUE);
      System.out.println("byte(max) = " + Byte.MAX_VALUE);
      System.out.println("byte(bit-length)=" + Byte.SIZE); 
      // short (16-bit signed integer)
      System.out.println("short(min) = " + Short.MIN_VALUE);
      System.out.println("short(max) = " + Short.MAX_VALUE);
      System.out.println("short(bit-length) = " + Short.SIZE);
      // long (64-bit signed integer)
      System.out.println("long(min) = " + Long.MIN_VALUE); 
      System.out.println("long(max) = " + Long.MAX_VALUE);
      System.out.println("long(bit-length) = " + Long.SIZE);
      // char (16-bit character or 16-bit unsigned integer)
      System.out.println("char(min) = " + (int)Character.MIN_VALUE);
      System.out.println("char(max) = " + (int)Character.MAX_VALUE);
      System.out.println("char(bit-length) = " + Character.SIZE);
      // float (32-bit floating-point)
      System.out.println("float(min) = " + Float.MIN_VALUE);
      System.out.println("float(max) = " + Float.MAX_VALUE);
      System.out.println("float(bit-length) = " + Float.SIZE);
      // double (64-bit floating-point)
      System.out.println("double(min) = " + Double.MIN_VALUE);
      System.out.println("double(max) = " + Double.MAX_VALUE);
      System.out.println("double(bit-length) = " + Double.SIZE);
   }	
}
OUTPUT:
int(min) = -2147483648
int(max) = 2147483647
int(bit-length) = 32
byte(min) = -128
byte(max) = 127
byte(bit-length)=8
short(min) = -32768
short(max) = 32767
short(bit-length) = 16
long(min) = -9223372036854775808
long(max) = 9223372036854775807
long(bit-length) = 64
char(min) = 0
char(max) = 65535
char(bit-length) = 16
float(min) = 1.4E-45
float(max) = 3.4028235E38
float(bit-length) = 32
double(min) = 4.9E-324
double(max) = 1.7976931348623157E308
double(bit-length) = 64
Java program to check prime number
public class PrimeCheck {
	public static void main(String args[]) {
		int temp;
		boolean isPrime = true;
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter a number for check:");
		// capture the input in an integer
		int num = scan.nextInt();
		for (int i = 2; i <= num / 2; i++) {
			temp = num % i;
			if (temp == 0) {
				isPrime = false;
				break;
			}
		}
		// If isPrime is true then the number is prime else not
		if (isPrime)
			System.out.println(num + " is Prime Number");
		else
			System.out.println(num + " is not Prime Number");
	}
}
OUTPUT:
Enter a number for check:
19
19 is Prime Number
Enter a number for check:
6
6 is not Prime Number
Print 1 to 100 prime numbers in java
public class OneTo100Prime {
	public static void main(String[] args) {
		for (int i = 1; i <=100; i++) {
			boolean flag =true;
			for (int j = 2; j <=i-1; j++) {
				if (i%j==0) {
					flag=false;
					break;
				}
			}
			if (flag==true) {
				System.out.print(" "+i);
			}
		}
	}
}
Output:
1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97
Way2:
public class OneTo100Prime {
	public static void main(String[] args) {
		int p;
		for (int i = 1; i <= 100; i++) {
			p = 0;
			for (int j = 2; j < i; j++) {
				if (i % j == 0) {
					p++;
					break;
				}
			
			}
			if (p == 0) {
				System.out.println(i);
			}
		}
	}
}
Output:
1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97
Java program for linear search – Example
public class LinearSearchExample{
public static void main(String args[])
{
int counter, num, search, array[];
Scanner input =new Scanner(System.in); //To capture user input
System.out.println("Enter number of elements:");
      num = input.nextInt();
      array =new int[num]; //Creating array to store the all the numbers
System.out.println("Enter "+ num +" integers");
for(counter =0; counter < num; counter++)//Loop to store each numbers in array
        array[counter]= input.nextInt();
System.out.println("Enter the search value:");
      search = input.nextInt();
for(counter =0; counter < num; counter++){
if(array[counter]== search){
System.out.println(search +" is present at location "+(counter+1));
/*Item is found so to stop the search and to come out of the 
            * loop use break statement.*/
break;
}
}
if(counter == num)
System.out.println(search +" doesn't exist in array.");
}
}
OUTPUT:
Enter number of elements:
5
Enter 5 integers
2
4
5
6
7
Enter the search value:
5
5 is present at location 3

Enter number of elements:
5
Enter 5 integers
2
3
4
5
6
Enter the search value:
7
7 doesn't exist in array.
Reverse a number using while Loop
public class ReverseNumberWhile {
	public static void main(String args[]) {
		int num = 0;
		int reversenum = 0;
		System.out.println("Input your number and press enter: ");
		Scanner in = new Scanner(System.in); // This statement will capture the user input
		num = in.nextInt();// Captured input would be stored in number num
  		while (num != 0) {// While Loop: Logic to find out the reverse number
			reversenum = reversenum * 10;
			reversenum = reversenum + num % 10;
			num = num / 10;
		}
		System.out.println("Reverse of input number is: " + reversenum);
	}
}
Output:Input your number and press enter: 234564
Reverse of input number is: 465432
Reverse a number using recursion
public class RecursionReverseDemo {
	// A method for reverse
	public static void reverseMethod(int number) {
		if (number < 10) {
			System.out.println(number);
			return;
		} else {
			System.out.print(number % 10);
			// Method is calling itself: recursion
			reverseMethod(number / 10);
		}
	}
	public static void main(String args[]) {
		int num = 0;
		System.out.println("Input your number and press enter: ");
		Scanner in = new Scanner(System.in);
		num = in.nextInt();
		System.out.print("Reverse of the input number is:");
		reverseMethod(num);
		System.out.println();
	}
}
OUTPUT:
Input your number and press enter: 
234543
Reverse of the input number is:345432
Java Program to check Even or Odd number
public class CheckEvenOdd {
	public static void main(String args[]) {
		int num;
		System.out.println("Enter an Integer number:");
		// The input provided by user is stored in num
		Scanner input = new Scanner(System.in);
		num = input.nextInt();
		/*
		 * If number is divisible by 2 then it's an even number else odd number
		 */
		if (num % 2 == 0)
			System.out.println("Entered number is even");
		else
			System.out.println("Entered number is odd");
	}
}
OUTPUT:
Enter an Integer number:
3
Entered number is odd
Binary to Decimal conversion using Integer.parseInt() method
public class CheckEvenOdd{
public static void main(String args[]){
Scanner input =new Scanner(System.in);
System.out.print("Enter a binary number: ");
String binaryString =input.nextLine();
System.out.println("Output: "+Integer.parseInt(binaryString,2));
}
}
OUTPUT:
Enter a binary number: 1010
Output: 10
Conversion without using parseInt
public class Details{
public int BinaryToDecimal(int binaryNumber){
int decimal=0;
int p =0;
while(true){
if(binaryNumber ==0){
break;
}else{
int temp = binaryNumber%10;
decimal= (int)(decimal+temp*Math.pow(2, p));
          binaryNumber = binaryNumber/10;
          p++;
}
}
return decimal;
}
public static void main(String args[]){
Details obj =new Details();
System.out.println("110 --> "+obj.BinaryToDecimal(110));
System.out.println("1101 --> "+obj.BinaryToDecimal(1101));
System.out.println("100 --> "+obj.BinaryToDecimal(100));
System.out.println("110111 --> "+obj.BinaryToDecimal(110111));
}
}
OUTPUT:
110 --> 6
1101 --> 13
100 --> 4
110111 --> 55
Java program to calculate area of Square
public class SquareAreaDemo{
public static void main (String[] args)
{
System.out.println("Enter Side of Square:");
Scanner scanner =new Scanner(System.in); //Capture the user's input
double side = scanner.nextDouble();//Storing the captured value in a variable
double area = side*side; //Area of Square = side*side
System.out.println("Area of Square is: "+area);
}}
OUTPUT:
Enter Side of Square:
2
Area of Square is: 4.0
Java program to perform binary search – Example
public class BinarySearchExample {
	public static void main(String args[]) {
		int counter, num, item, array[], first, last, middle;
		Scanner input = new Scanner(System.in); // To capture user input
		System.out.println("Enter number of elements:");
		num = input.nextInt();
		array = new int[num]; // Creating array to store the all the numbers
		System.out.println("Enter " + num + " integers");
		for (counter = 0; counter < num; counter++)// Loop to store each numbers in array
			array[counter] = input.nextInt();
		System.out.println("Enter the search value:");
		item = input.nextInt();
		first = 0;
		last = num - 1;
		middle = (first + last) / 2;
		while (first <= last) {
			if (array[middle] < item)
				first = middle + 1;
			else if (array[middle] == item) {
				System.out.println(item + " found at location " + (middle + 1) + ".");
				break;
			} else {
				last = middle - 1;
			}
			middle = (first + last) / 2;
		}
		if (first > last)
			System.out.println(item + " is not found.\n");
	}
}
OUTPUT:
Enter number of elements:
5
Enter 5 integers
1
2
4
5
6
Enter the search value:
4
4 found at location 3.

Enter number of elements:
5
Enter 5 integers
1
2
3
4
7
Enter the search value:
5
5 is not found.
Java program to print Floyd’s triangle – Example
public class FloydTriangleExample
{
public static void main(String args[])
{
int rows, number =1, counter, j;
//To get the user's input
Scanner input =new Scanner(System.in);
System.out.println("Enter the number of rows for floyd's triangle:");
//Copying user input into an integer variable named rows
       rows = input.nextInt();
System.out.println("Floyd's triangle");
System.out.println("****************");
for( counter =1; counter <= rows ; counter++)
{
for( j =1; j <= counter ; j++)
{
System.out.print(number+" ");
//Incrementing the number value
                number++;
}
//For new line
System.out.println();
}
}
}
OUTPUT:
Enter the number of rows for floyd's triangle:
5
Floyd's triangle
****************
1 
2 3 
4 5 6 
7 8 9 10 
11 12 13 14 15 
Example Program to generate random numbers
public class GenerateRandomNumber{
public static void main(String[] args){
int counter;
Random rnum =new Random();
for(counter =1; counter <=5; counter++){
System.out.println(rnum.nextInt(200));
}
}
}
OUTPUT:
126
94
92
112
123
The output of above program would not be same everytime. It would generate any 5 random numbers between 0 and 200 whenever you run this code. For e.g. When I ran it second time, it gave me the below output, which is entirely different from the above one.
Generating Password and OTP in Java
public class OtpPasswordUsingRandom {
public static void main(String[] args) {
	int lenght=10;
	int otp_length=4;
	System.out.println("new password is:");
	System.out.println(otpPass(lenght));
	System.out.println("OTP is:");
	System.out.println(otp(otp_length));
}
private static char[] otpPass(int len) {
	String alphabets="ABCDE";
	String numbers="12345";
	String symbols="@#&*%";
	String values=alphabets+numbers+symbols;
	Random random=new Random();
	char[] password=new char[len];
	for (int i = 0; i < len; i++) {
		password[i]=values.charAt(random.nextInt(values.length()));
	}
	return password;
}
private static char[] otp(int len) {
	String numbers="12345";
	Random random=new Random();
	char[] otp=new char[len];
	for (int i = 0; i < len; i++) {
		otp[i]=numbers.charAt(random.nextInt(numbers.length()));
	}
	return otp;
}
}
Output:
new password is:
*33#C**@42
OTP is:
3355
java program to find factorial of a given number using recursion
public class FactorialDemo{
public static void main(String args[]){
//Scanner object for capturing the user input
Scanner scanner =new Scanner(System.in);
System.out.println("Enter the number:");
//Stored the entered value in variable
int num = scanner.nextInt();
//Called the user defined function fact
int factorial = fact(num);
System.out.println("Factorial of entered number is: "+factorial);
}
static int fact(int n)
{
if(n==1){
return 1;
}
//Recursion: Function calling itself!!
 return fact(n-1)* n;

}
}
OUTPUT:
Enter the number:
5
Factorial of entered number is: 120
Java program to sum the elements of an array
public class SumOfArray{
public static void main(String args[]){
int[] array ={10,20,30,40,50,10};
int sum =0;
//Advanced for loop
for(int num : array){
          sum = sum+num;
}
System.out.println("Sum of array elements is:"+sum);
}
}
OUTPUT:
Sum of array elements is:160
User enters the array’s element
public class SumDemo{
public static void main(String args[]){
Scanner scanner =new Scanner(System.in);
int[] array =new int[10];
int sum =0;
System.out.println("Enter the elements:");
for(int i=0; i<10; i++)
{
	  array[i]= scanner.nextInt();
}
for(int num : array){
          sum = sum+num;
}
System.out.println("Sum of array elements is:"+sum);
}
}
OUTPUT:
Enter the elements:
1
2
3
4
5
6
7
8
9
0
Sum of array elements is:45
Java Program to Calculate Area of Rectangle
public class AreaOfRectangle{
public static void main (String[] args)
{	
	Scanner scanner =new Scanner(System.in);
	System.out.println("Enter the length of Rectangle:");
	double length = scanner.nextDouble();
	System.out.println("Enter the width of Rectangle:");
	double width = scanner.nextDouble();
	//Area = length*width;
	double area = length*width;
	System.out.println("Area of Rectangle is:"+area);
}
}
OUTPUT:
Enter the length of Rectangle:
2
Enter the width of Rectangle:
3
Area of Rectangle is:6.0
Java program to calculate area of Triangle
public class AreaTriangleDemo {
	public static void main(String args[]) {
		Scanner scanner = new Scanner(System.in);
		System.out.println("Enter the width of the Triangle:");
		double base = scanner.nextDouble();
		System.out.println("Enter the height of the Triangle:");
		double height = scanner.nextDouble();
		// Area = (width*height)/2
		double area = (base * height) / 2;
		System.out.println("Area of Triangle is: " + area);
	}
}
OUTPUT:
Enter the width of the Triangle:
2
Enter the height of the Triangle:
4
Area of Triangle is: 4.0
Java Program to calculate area and circumference of circle
import java.util.Scanner;
public class CircleDemo
{
static Scanner sc =new Scanner(System.in);
public static void main(String args[])
{
System.out.print("Enter the radius: ");
/*We are storing the entered radius in double
       * because a user can enter radius in decimals
       */
double radius = sc.nextDouble();
//Area = PI*radius*radius
double area =Math.PI *(radius * radius);
System.out.println("The area of circle is: "+ area);
//Circumference = 2*PI*radius
double circumference=Math.PI *2*radius;
System.out.println("The circumference of the circle is:"+circumference);
}
}
OUTPUT:
Enter the radius: 3.0
The area of circle is: 28.274333882308138
The circumference of the circle is:18.84955592153876
Java Programming Code to Check Alphabet or Not
public class JavaProgram {
	public static void main(String args[]) {
		char ch;
		Scanner scan = new Scanner(System.in);

		System.out.print("Enter a Character : ");
		ch = scan.next().charAt(0);

		if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {
			System.out.print(ch + " is an Alphabet");
		} else {
			System.out.print(ch + " is not an Alphabet");
		}
	}
}
OUTPUT:
Enter a Character : a
a is an Alphabet
Enter a Character : 3
3 is not an Alphabet
Enter a Character : @
@ is not an Alphabet
Java Programming Code to Check Vowel or Not
public class JavaProgram {
	public static void main(String args[]) {
		char ch;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter an Alphabet : ");
		ch = scan.next().charAt(0);
		if (ch == 'a' || ch == 'A' || ch == 'e' || ch == 'E' || ch == 'i' || ch == 'I' || ch == 'o' || ch == 'O'
				|| ch == 'u' || ch == 'U') {
			System.out.print("This is a Vowel");
		} else {
			System.out.print("This is not a Vowel");
		}
	}
}
OUTPUT:
Enter an Alphabet : a
This is a Vowel
Enter an Alphabet : d
This is not a Vowel
Java Programming Code to Check Leap Year or Not
public class JavaProgram {
	public static void main(String args[]) {
		int yr;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Year : ");
		yr = scan.nextInt();
		if ((yr % 4 == 0) && (yr % 100 != 0)) {
			System.out.print("This is a Leap Year");
		} else if (yr % 100 == 0) {
			System.out.print("This is not a Leap Year");
		} else if (yr % 400 == 0) {
			System.out.print("This is a Leap Year");
		} else {
			System.out.print("This is not a Leap Year");
		}
	}
}
OUTPUT:
Enter Year : 2014
This is not a Leap Year
Enter Year : 2016
This is a Leap Year
Check Original Number Equals Reverse or Not
public class JavaProgram {
	public static void main(String args[]) {
		int num, orig, rev = 0, rem;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter a Number : ");
		num = scan.nextInt();
		orig = num;
		while (num > 0) {
			rem = num % 10;
			rev = rev * 10 + rem;
			num = num / 10;
		}
		if (orig == rev) {
			System.out.print("Reverse is Equal to Original");
		} else {
			System.out.print("Reverse is not Equal to Original");
		}
	}
}
OUTPUT:
Enter a Number : 12345
Reverse is not Equal to Original
Enter a Number : 12321
Reverse is Equal to Original
Perform Addition, Subtraction, Multiplication and Division
public class JavaProgram {
	public static void main(String args[]) {
		int a, b, res;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Two Numbers : ");
		a = scan.nextInt();
		b = scan.nextInt();
		res = a + b;
		System.out.println("Addition = " + res);
		res = a - b;
		System.out.println("Subtraction = " + res);
		res = a * b;
		System.out.println("Multiplication = " + res);
		res = a / b;
		System.out.println("Division = " + res);
	}
}
OUTPUT:
Enter Two Numbers : 2
3
Addition = 5
Subtraction = -1
Multiplication = 6
Division = 0
Java Program Example - Four Mathematical Operations 
public class JavaProgram {
	public static void main(String args[]) {
		int a, b, res;
		char ch;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter First Number : ");
		a = scan.nextInt();
		System.out.print("Enter Second Number : ");
		b = scan.nextInt();
		System.out.print("Enter Operator (+, -, *, /) : ");
		ch = scan.next().charAt(0);
		if (ch == '+') {
			res = a + b;
			System.out.print("Result = " + res);
		} else if (ch == '-') {
			res = a - b;
			System.out.print("Result = " + res);
		} else if (ch == '*') {
			res = a * b;
			System.out.print("Result = " + res);
		} else if (ch == '/') {
			res = a / b;
			System.out.print("Result = " + res);
		} else {
			System.out.print("Wrong Operator !!!");
		}
	}
}
OUTPUT:
Enter First Number : 2
Enter Second Number : 3
Enter Operator (+, -, *, /) : +
                    Result = 5
Java Program to Make Simple Calculato
public class JavaProgram {
	public static void main(String args[]) {
		float a, b, res;
		char choice, ch;
		Scanner scan = new Scanner(System.in);

		do {
			System.out.print("1. Addition\n");
			System.out.print("2. Subtraction\n");
			System.out.print("3. Multiplication\n");
			System.out.print("4. Division\n");
			System.out.print("5. Exit\n\n");
			System.out.print("Enter Your Choice : ");
			choice = scan.next().charAt(0);
			switch (choice) {
			case '1':
				System.out.print("Enter Two Number : ");
				a = scan.nextFloat();
				b = scan.nextFloat();
				res = a + b;
				System.out.print("Result = " + res);
				break;
			case '2':
				System.out.print("Enter Two Number : ");
				a = scan.nextFloat();
				b = scan.nextFloat();
				res = a - b;
				System.out.print("Result = " + res);
				break;
			case '3':
				System.out.print("Enter Two Number : ");
				a = scan.nextFloat();
				b = scan.nextFloat();
				res = a * b;
				System.out.print("Result = " + res);
				break;
			case '4':
				System.out.print("Enter Two Number : ");
				a = scan.nextFloat();
				b = scan.nextFloat();
				res = a / b;
				System.out.print("Result = " + res);
				break;
			case '5':
				System.exit(0);
				break;
			default:
				System.out.print("Wrong Choice!!!");
				break;
			}
			System.out.print("\n---------------------------------------\n");
		} while (choice != 5);
	}
}
OUTPUT:
1. Addition
2. Subtraction
3. Multiplication
4. Division
5. Exit
Enter Your Choice : 3
Enter Two Number : 2
3
Result = 6.0
---------------------------------------
1. Addition
2. Subtraction
3. Multiplication
4. Division
5. Exit
Enter Your Choice : 5

Java Programming Code to Add Digits of Number
public class JavaProgram {
	public static void main(String args[]) {
		int num, rem = 0, sum = 0, temp;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter a Number : ");
		num = scan.nextInt();
		temp = num;
		while (num > 0) {
			rem = num % 10;
			sum = sum + rem;
			num = num / 10;
		}
		System.out.print("Sum of Digits of " + temp + " is " + sum);
	}
}
OUTPUT:
Enter a Number : 234
Sum of Digits of 234 is 9
 Calculate Average and Percentage Marks
public class JavaProgram {
	public static void main(String args[]) {
		int mark[] = new int[5];
		int i;
		float sum = 0;
		float avg, perc;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter marks Obtained in 5 Subjects : ");
		for (i = 0; i < 5; i++) {
			mark[i] = scan.nextInt();
			sum = sum + mark[i];
		}
		avg = sum / 5;
		perc = (sum / 500) * 100;
		System.out.print("Average Marks = " + avg);
		System.out.print("\nPercentage = " + perc + "%");
	}
}
OUTPUT:
Enter marks Obtained in 5 Subjects : 
35
56
54
78
90
Average Marks = 62.6
Percentage = 62.6%
Java Programming Code to Calculate Grade
public class JavaProgram {
	public static void main(String args[]) {
		int mark[] = new int[5];
		int i;
		float sum = 0, avg;
		Scanner scan = new Scanner(System.in);

		System.out.print("Enter Marks Obtained in 5 Subjects : ");
		for (i = 0; i < 5; i++) {
			mark[i] = scan.nextInt();
			sum = sum + mark[i];
		}
		avg = sum / 5;
		System.out.print("Your Grade is ");
		if (avg > 80) {
			System.out.print("A");
		} else if (avg > 60 && avg <= 80) {
			System.out.print("B");
		} else if (avg > 40 && avg <= 60) {
			System.out.print("C");
		} else {
			System.out.print("D");
		}
	}
}
OUTPUT:
Enter Marks Obtained in 5 Subjects : 
35
54
67
90
98
                Your Grade is B
Java Programming Code to Print Table of Number		
public class JavaProgram {
	public static void main(String args[]) {
		int num, i, tab;
		Scanner scan = new Scanner(System.in);
            System.out.print("Enter a Number : ");
		num = scan.nextInt();
		System.out.print("Table of " + num + " is\n");
		for (i = 1; i <= 10; i++) {
			tab = num * i;
			System.out.print(num + " * " + i + " = " + tab + "\n");
		}
	}
}
OUTPUT: Enter a Number : 5
Table of 5 is
5 * 1 = 5
5 * 2 = 10
5 * 3 = 15
5 * 4 = 20
5 * 5 = 25
5 * 6 = 30
5 * 7 = 35
5 * 8 = 40
5 * 9 = 45
5 * 10 = 50
Java Programming Code to Add n Numbers		
public class JavaProgram {
	public static void main(String args[]) {
		int i, n, sum = 0, num;
		Scanner scan = new Scanner(System.in);
		System.out.print("How many Number You want to Enter to Add them ? ");
		n = scan.nextInt();
		System.out.print("Enter " + n + " numbers : ");
		for (i = 0; i < n; i++) {
			num = scan.nextInt();
			sum = sum + num;
		}
		System.out.print("Sum of all " + n + " numbers is " + sum);
	}
}
OUTPUT:
How many Number You want to Enter to Add them ? 
4
Enter 4 numbers : 23
45
65
34
Sum of all 4 numbers is 167
Java Programming to Interchange two Numbers
public class SwappinTwoNumbers {
public static void main(String[] args) {
	Scanner scanner=new Scanner(System.in);
	System.out.println("enter first number:");
	int a=scanner.nextInt();
	System.out.println("enter second number:");
	int b=scanner.nextInt();
	System.out.println("before swapping:");
	System.out.println("A="+a);
	System.out.println("B="+b);
	/*int temp=a;// way 1 Using 3rd value
	         a=b;
	         b=temp;
	*
	/*a=a+b;//2 way swapping witout using 3 rd value
	  b=a-b;
	  a=a-b;*/
	  b=a+b-(a=b);//way 3 in single line of code withot using 3rd value
	System.out.println("After swapping:");
	System.out.println("A="+a);
	System.out.println("B="+b);
}
}
OUTPUT:
enter first number:
2
enter second number:
3
before swapping:
A=2
B=3
After swapping:
A=3
B=2
Reverse integer data in Array
public class ReverseArray{
public static void main(String[] args) {
	int arr[]={1,2,3,4,5,6};
	int len=arr.length;
	System.out.println("before array");
	for (int i = 0; i<len; i++) {
		System.out.print(arr[i]+" ");
	}
	System.out.println("\nAftr reverse array");
	for (int i = len-1; i >=0; i--) {
		System.out.print(arr[i]+" ");
	}
}	
}
OUTPUT:
before array
1 2 3 4 5 6 
Aftr reverse array
6 5 4 3 2 1
Average of a number
public class AvarageNumber{
public static void main(String[] args) {
	int number = 12345;
	String totNumber = number+"";
	int sum = 0;
	while (number != 0) {
		sum = sum + number % 10;
		number = number / 10;
	}
	int average = sum/totNumber.length();
	System.out.println("sum of a number :: "+sum);
	System.out.println("average of a number :: "+average);
}	
}
OUTPUT:
sum of a number :: 15
average of a number :: 3
sort a map by value ::
public class AvarageNumber{
public static void main(String[] args) {
	Map<String, Integer> map = new HashMap();
	map.put("Five", 5);
	map.put("Four", 3);
	map.put("Three", 4);
	map.put("Two", 2);
	map.put("One", 1);
	Set<Map.Entry<String, Integer>> set = map.entrySet();
	List<Map.Entry<String, Integer>> list = new ArrayList<>(set);
	Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
	public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
			return o1.getValue() - o2.getValue();
		}
	});
	for (Entry<String, Integer> entry : list) {
System.out.println(entry.getKey() + "======" + entry.getValue());
	}
}	
}
OUTPUT:
One======1
Two======2
Four======3
Three======4
Five======5
Java Programming Code to Count Positive, Zero and Negative
public class JavaProgram {
	public static void main(String args[]) {
		int countp = 0, countn = 0, countz = 0, i;
		int arr[] = new int[10];
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter 10 Numbers : ");
		for (i = 0; i < 10; i++) {
			arr[i] = scan.nextInt();
		}
		for (i = 0; i < 10; i++) {
			if (arr[i] < 0) {
				countn++;
			} else if (arr[i] == 0) {
				countz++;
			} else {
				countp++;
			}
		}
		System.out.print(countp + " Positive Numbers");
		System.out.print("\n" + countn + " Negative Numbers");
		System.out.print("\n" + countz + " Zero");
	}
}
OUTPUT:
Enter 10 Numbers : 
3
4
5
6
7
-8
0
0
-6
4
6 Positive Numbers
2 Negative Numbers
2 Zero
Java Programming Code to Find Largest of Two Numbers
public class JavaProgram {
	public static void main(String args[]) {
		int a, b, big;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Two Number : ");
		a = scan.nextInt();
		b = scan.nextInt();
		if (a > b) {
			big = a;
		} else {
			big = b;
		}
		System.out.print("Largest of Two Number is " + big);
	}
}
OUTPUT:
Enter Two Number : 3
4
Largest of Two Number is 4
Java Programming Code to Find Largest of Three 
public class JavaProgram {
	public static void main(String args[]) {
		int a, b, c, big;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Three Numbers : ");
		a = scan.nextInt();
		b = scan.nextInt();
		c = scan.nextInt();
		// let a is the largest
		big = a;
		if (big < b) {
			if (b > c) {
				big = b;
			} else {
				big = c;
			}
		} else if (big < c) {
			if (c > b) {
				big = c;
			} else {
				big = b;
			}
		} else {
			big = a;
		}
		System.out.print("Largest Number is " + big);
	}
}
OUTPUT:
Enter Three Numbers : 3
7
3
Largest Number is 7
Java Programming Code to Find Factorial of Number
public class JavaProgram {
	public static void main(String args[]) {
		int num, i, fact = 1;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter a Number : ");
		num = scan.nextInt();
		for (i = num; i > 0; i--) {
			fact = fact * i;
		}
		System.out.print("Factorial of " + num + " is " + fact);
	}
}
OUTPUT:
Enter a Number : 5
Factorial of 5 is 120
Java Programming Code to Find HCF LCM of Two Numbers
public class JavaProgram {
	public static void main(String args[]) {
		int a, b, x, y, t, hcf, lcm;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Two Number : ");
		x = scan.nextInt();
		y = scan.nextInt();
		a = x;
		b = y;
		while (b != 0) {
			t = b;
			b = a % b;
			a = t;
		}
		hcf = a;
		lcm = (x * y) / hcf;
		System.out.print("HCF = " + hcf);
		System.out.print("\nLCM = " + lcm);
	}
}
OUTPUT:
Enter Two Number : 34
56
HCF = 2
LCM = 952
Java Programming Code to Convert Fahrenheit to Centigrade
public class JavaProgram {
	public static void main(String args[]) {
		float fah;
		double cel;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Temperature in Fahrenheit : ");
		fah = scan.nextFloat();
		cel = (fah - 32) / 1.8;
		System.out.print("Equivalent Temperature in Celsius = " + cel);
	}
}
OUTPUT:
Enter Temperature in Fahrenheit : 101
Equivalent Temperature in Celsius = 38.333333333333336
Java Programming Code to Convert Centigrade to Fahrenheit
public class JavaProgram {
	public static void main(String args[]) {
		float cen;
		double fah;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Temperature in Centigrade : ");
		cen = scan.nextFloat();
		fah = (1.8 * cen) + 32;
		System.out.print("Equivalent Temperature in Fahrenheit = " + fah);
	}
}
OUTPUT:
Enter Temperature in Centigrade : 45
Equivalent Temperature in Fahrenheit = 113.0
Java Programming Code to Print ASCII Values of Characters
public class JavaProgram {
	public static void main(String args[]) {
		String ch;
		int i;
		for (i = 1; i <= 255; i++) {
			ch = new Character((char) i).toString();
			System.out.print(i + " -> " + ch + "\t");
		}
	}
}
OUTPUT:
1=>_  2=>_  3=>_  4=>_  5=>_  6=>_  7=>_  8=>_  9=>	  10=>
  11=>_  12=>_  13=>
  14=>_  15=>_  16=>_  17=>_  18=>_  19=>_  20=>_  21=>_  22=>_  23=>_  24=>_  25=>_  26=>_  27=>_  28=>_  29=>_  30=>_  31=>_  32=>   33=>!  34=>"  35=>#  36=>$  37=>%  38=>&  39=>'  40=>(  41=>)  42=>*  43=>+  44=>,  45=>-  46=>.  47=>/  48=>0  49=>1  50=>2  51=>3  52=>4  53=>5  54=>6  55=>7  56=>8  57=>9  58=>:  59=>;  60=><  61=>=  62=>>  63=>?  64=>@  65=>A  66=>B  67=>C  68=>D  69=>E  70=>F  71=>G  72=>H  73=>I  74=>J  75=>K  76=>L  77=>M  78=>N  79=>O  80=>P  81=>Q  82=>R  83=>S  84=>T  85=>U  86=>V  87=>W  88=>X  89=>Y  90=>Z  91=>[  92=>\  93=>]  94=>^  95=>_  96=>`  97=>a  98=>b  99=>c  100=>d  101=>e  102=>f  103=>g  104=>h  105=>i  106=>j  107=>k  108=>l  109=>m  110=>n  111=>o  112=>p  113=>q  114=>r  115=>s  116=>t  117=>u  118=>v  119=>w  120=>x  121=>y  122=>z  123=>{  124=>|  125=>}  126=>~  127=>  128=>?  129=>?  130=>?  131=>?  132=>?  133=>?  134=>?  135=>?  136=>?  137=>?  138=>?  139=>?  140=>?  141=>?  142=>?  143=>?  144=>?  145=>?  146=>?  147=>?  148=>?  149=>?  150=>?  151=>?  152=>?  153=>?  154=>?  155=>?  156=>?  157=>?  158=>?  159=>?  160=>   161=>¡  162=>¢  163=>£  164=>¤  165=>¥  166=>¦  167=>§  168=>¨  169=>©  170=>ª  171=>«  172=>¬  173=>­  174=>®  175=>¯  176=>°  177=>±  178=>²  179=>³  180=>´  181=>µ  182=>¶  183=>·  184=>¸  185=>¹  186=>º  187=>»  188=>¼  189=>½  190=>¾  191=>¿  192=>À  193=>Á  194=>Â  195=>Ã  196=>Ä  197=>Å  198=>Æ  199=>Ç  200=>È  201=>É  202=>Ê  203=>Ë  204=>Ì  205=>Í  206=>Î  207=>Ï  208=>Ð  209=>Ñ  210=>Ò  211=>Ó  212=>Ô  213=>Õ  214=>Ö  215=>×  216=>Ø  217=>Ù  218=>Ú  219=>Û  220=>Ü  221=>Ý  222=>Þ  223=>ß  224=>à  225=>á  226=>â  227=>ã  228=>ä  229=>å  230=>æ  231=>ç  232=>è  233=>é  234=>ê  235=>ë  236=>ì  237=>í  238=>î  239=>ï  240=>ð  241=>ñ  242=>ò  243=>ó  244=>ô  245=>õ  246=>ö  247=>÷  248=>ø  249=>ù  250=>ú  251=>û  252=>ü  253=>ý  254=>þ  255=>ÿ  
Java Programming Code to Check Armstrong or Not
Since 153 = 1*1*1 + 5*5*5 + 3*3*3. So 153 is an Armstrong number
Since 12 is not equal to 1*1*1+2*2*2. So 12 is not an Armstrong number	
public class JavaProgram {
	public static void main(String args[]) {
		int n, nu, num = 0, rem;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter any Positive Number : ");
		n = scan.nextInt();
		nu = n;
		while (nu != 0) {
			rem = nu % 10;
			num = num + rem * rem * rem;
			nu = nu / 10;
		}
		if (num == n) {
			System.out.print("Armstrong Number");
		} else {
			System.out.print("Not an Armstrong Number");
		}
	}
}
OUTPUT:
Enter any Positive Number : 234
Not an Armstrong Number
Enter any Positive Number : 153
Armstrong Number
Java Programming Code to Generate Armstrong Numbers
public class JavaProgram {
	public static void main(String args[]) {
		int num1, num2, i, n, rem, temp, count = 0;
		Scanner scan = new Scanner(System.in);
		/* enter the interval (two number) */
		System.out.print("Enter the Interval :\n");
		System.out.print("Enter Starting Number : ");
		num1 = scan.nextInt();
		System.out.print("Enter Ending Number : ");
		num2 = scan.nextInt();
		for (i = num1 + 1; i < num2; i++) {
			temp = i;
			n = 0;
			while (temp != 0) {
				rem = temp % 10;
				n = n + rem * rem * rem;
				temp = temp / 10;
			}
			if (i == n) {
				if (count == 0) {
					System.out.print("Armstrong Numbers Between the Given Interval are :\n");
				}
				System.out.print(i + "  ");
				count++;
			}
		}
		if (count == 0) {
		System.out.print("Armstrong Number not Found between the Given Interval.");
		}
	}
}
OUTPUT:
Enter the Interval :
Enter Starting Number : 1
Enter Ending Number : 100
Armstrong Number not Found between the Given Interval.
Enter the Interval :
Enter Starting Number : 1
Enter Ending Number : 1000
Armstrong Numbers Between the Given Interval are :
153  370  371  407  
Java Programming Code to Find ncR nPr
public class JavaProgram {
	public static int fact(int num) {
		int fact = 1, i;
		for (i = 1; i <= num; i++) {
			fact = fact * i;
		}
		return fact;
	}
	public static void main(String args[]) {
		int n, r;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Value of n : ");
		n = scan.nextInt();
		System.out.print("Enter Value of r : ");
		r = scan.nextInt();
		System.out.print("NCR = " + (fact(n) / (fact(n - r) * fact(r))));
		System.out.print("\nNPR = " + (fact(n) / (fact(n - r))));
	}
}
OUTPUT:
When the above Java Program is compile andEnter Value of n : 23
Enter Value of r : 3
NCR = 3
NPR = 0 
Java Programming Code to Convert Decimal to Binary
public class JavaProgram {
	public static void main(String args[]) {
		int decnum, rem, quot, i = 1, j;
		int binnum[] = new int[100];
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter any Decimal Number : ");
		decnum = scan.nextInt();
		quot = decnum;
		while (quot != 0) {
			binnum[i++] = quot % 2;
			quot = quot / 2;
		}
		System.out.print("Equivalent Binary Value of " + decnum + " is :\n");
		for (j = i - 1; j > 0; j--) {
			System.out.print(binnum[j]);
		}
	}
}
OUTPUT:
Enter any Decimal Number : 12
Equivalent Binary Value of 12 is :
1100
Java Program - Pattern 1
public class JavaProgram {
	public static void main(String args[]) {
		int i, j;
		for (i = 0; i < 5; i++) {
			for (j = 0; j <= i; j++) {
				System.out.print("* ");
			}
			System.out.println();
		}
	}
}
OUTPUT:
* 
* * 
* * * 
* * * * 
* * * * * 
Java Program - Pattern 2
public class JavaProgram {
	public static void main(String args[]) {
		int i, j, k = 1;
		for (i = 0; i < 5; i++) {
			for (j = 0; j < k; j++) {
				System.out.print("* ");
			}
			k = k + 2;
			System.out.println();
		}
	}
}
OUTPUT:
* 
* * * 
* * * * * 
* * * * * * * 
* * * * * * * * * 
Java Program - Pattern 3
public class JavaProgram {
	public static void main(String[] args) {
		for (int i = 1; i <= 5; i++) {
			for (int j = 5; j >= i; j--) {
				System.out.print(" ");
			}
			for (int j = 1; j <= i; j++) {
				System.out.print("*");
			}
			System.out.println(" ");
		}
	}
}
OUTPUT:
     * 
    ** 
   *** 
  **** 
 ***** 
Java Program - Pattern 4
public class pattern3 {
	public static void main(String[] args) {
		int p=1;
		for (int i = 1; i <=5; i++) {
			for (int j = 20; j >=i; j--) {
				System.out.print(" ");
			}
			for (int k = 1; k <=p; k++) {
				System.out.print("*");
			}
			p=p+2;
			System.out.println(" ");
		}
	}
}
OUTPUT:
                    * 
                   *** 
                  ***** 
                 ******* 
                ********* 
Java Program - Pattern 6
public class pattern3 {
	public static void main(String args[]) {
		int i, j, num;
		for (i = 0; i < 5; i++) {
			num = 1;
			for (j = 0; j <= i; j++) {
				System.out.print(num + " ");
				num++;
			}
			System.out.println();
		}
	}
}
OUTPUT:
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5
Java Programming Code to Find Largest and Smallest Element in Array
public class pattern3 {
	public static void main(String args[]) {
		int large, small, size, i;
		int arr[] = new int[50];
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Array Size : ");
		size = scan.nextInt();
		System.out.print("Enter Array Elements : ");
		for (i = 0; i < size; i++) {
			arr[i] = scan.nextInt();
		}
		System.out.print("Searching for the Largest Number....\n\n");
		large = arr[0];
		small = arr[0];
		for (i = 0; i < size; i++) {
			if (large < arr[i]) {
				large = arr[i];
			} else if (small > arr[i]) {
				small = arr[i];
			}
		}
		System.out.println("Largest Number = " + large);
		System.out.println("Samllest Number = " + small);
	}
}
OUTPUT:
Enter Array Size : 4
Enter Array Elements : 12
34
23
56
Searching for the Largest Number....
Largest Number = 56
Samllest Number = 12
Java Programming Code to Insert Element in Array
public class InsertElementInArray {
	public static void main(String args[])
	{
		int arr[]=new int[10];
		Scanner scanner=new Scanner(System.in);
		System.out.println("array size is");
		int size=scanner.nextInt();
		System.out.println("enter elements are:");
				for (int i = 0; i < size; i++) {
					arr[i]=scanner.nextInt();
				}
				System.out.println("insert element is:");
				int insert=scanner.nextInt();
				System.out.println("position at:");
				int pos=scanner.nextInt();
				for (int i = size; i > pos; i--) {
					arr[i]=arr[i-1];
				}
				arr[pos]=insert;
				System.out.println("value succesfully inserted");
				System.out.println("new array elements are;");
				for (int i = 0; i < size+1; i++) {
					System.out.println(arr[i]);
				}
	   }
	}
OUTPUT:
array size is
5
enter elements are:
1
2
3
4
5
insert element is:
34
position at:
1
value succesfully inserted
new array elements are;
1
34
2
3
4
5
Java Programming Code for Bubble Sort
public class Bubblesort {
	public static void main(String args[]) {
		int n, i, j, temp;
		int arr[] = new int[50];
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Total Number of Elements : ");
		n = scan.nextInt();
		System.out.print("Enter " + n + " Numbers : ");
		for (i = 0; i < n; i++) {
			arr[i] = scan.nextInt();
		}
		System.out.print("Sorting Array using Bubble Sort Technique...\n");
		for (i = 0; i < (n - 1); i++) {
			for (j = 0; j < (n - i - 1); j++) {
				if (arr[j] > arr[j + 1]) {
					temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
	
		System.out.print("Array Sorted Successfully..!!\n");
		System.out.print("Sorted List in Ascending Order : \n");
		for (i = 0; i < n; i++) {
			System.out.print(arr[i] + "  ");
		}
	}
}
OUTPUT:
Enter Total Number of Elements : 4
Enter 4 Numbers : 23
34
22
23
Sorting Array using Bubble Sort Technique...
Array Sorted Successfully..!!
Sorted List in Ascending Order : 
22  23  23  34  
Java Programming Code for Selection Sort
public class SelectionSort {
	public static void main(String args[]) {
		int size, i, j, temp;
		int arr[] = new int[50];
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Array Size : ");
		size = scan.nextInt();
		System.out.print("Enter Array Elements : ");
		for (i = 0; i < size; i++) {
			arr[i] = scan.nextInt();
		}
		System.out.print("Sorting Array using Selection Sort Technique..\n");
		for (i = 0; i < size; i++) {
			for (j = i + 1; j < size; j++) {
				if (arr[i] > arr[j]) {
					temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
		System.out.print("Now the Array after Sorting is :\n");
		for (i = 0; i < size; i++) {
			System.out.print(arr[i] + "  ");
		}
	}
}
OUTPUT:
Enter Array Size : 4
Enter Array Elements : 12
34
22
21
Sorting Array using Selection Sort Technique..
Now the Array after Sorting is :
12  21  22  34  
Java Programming Code for Insertion Sort
public class JavaProgram {
	public static void main(String args[]) {
		int size, i, j, temp;
		int arr[] = new int[50];
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Array Size : ");
		size = scan.nextInt();

		System.out.print("Enter Array Elements : ");
		for (i = 0; i < size; i++) {
			arr[i] = scan.nextInt();
		}

		System.out.print("Sorting Array using Insertion Sort Technique..\n");
		for (i = 1; i < size; i++) {
			temp = arr[i];
			j = i - 1;
			while ((temp < arr[j]) && (j >= 0)) {
				arr[j + 1] = arr[j];
				j = j - 1;
			}
			arr[j + 1] = temp;
		}
		System.out.print("Array after Sorting is : \n");
		for (i = 0; i < size; i++) {
			System.out.print(arr[i] + "  ");
		}
	}
}
OUTPUT:
Enter Array Size : 4
Enter Array Elements : 12
34
32
44
Sorting Array using Insertion Sort Technique..
Array after Sorting is : 
12  32  34  44  		
Java Programming Code for Two Dimensional (2D) Array
public class TwoDimention{
	public static void main(String args[]) {
		int row, col, i, j;
		int arr[][] = new int[10][10];
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Number of Row for Array (max 10) : ");
		row = scan.nextInt();
		System.out.print("Enter Number of Column for Array (max 10) : ");
		col = scan.nextInt();
		System.out.print("Enter " + (row * col) + " Array Elements : ");
		for (i = 0; i < row; i++) {
			for (j = 0; j < col; j++) {
				arr[i][j] = scan.nextInt();
			}
		}
		System.out.print("The Array is :\n");
		for (i = 0; i < row; i++) {
			for (j = 0; j < col; j++) {
				System.out.print(arr[i][j] + "  ");
			}
			System.out.println();
		}
	}
}
OUTPUT:
Enter Number of Row for Array (max 10) : 2
Enter Number of Column for Array (max 10) : 2
Enter 4 Array Elements : 12
34
45
67
The Array is :
12  34  
45  67  
Java Programming Code to Add Two Matric
public class JavaProgram {
	public static void main(String args[]) {
		int i, j;
		int mat1[][] = new int[3][3];
		int mat2[][] = new int[3][3];
		int mat3[][] = new int[3][3];
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter Matrix 1 Elements : ");
		for (i = 0; i < 3; i++) {
			for (j = 0; j < 3; j++) {
				mat1[i][j] = scan.nextInt();
			}	
		}
		System.out.print("Enter Matrix 2 Elements : ");
		for (i = 0; i < 3; i++) {
			for (j = 0; j < 3; j++) {
				mat2[i][j] = scan.nextInt();
			}
		}

		System.out.print("Adding both Matrix to form the Third Matrix...\n");
		for (i = 0; i < 3; i++) {
			for (j = 0; j < 3; j++) {
				mat3[i][j] = mat1[i][j] + mat2[i][j];
			}
		}
		System.out.print("The Two Matrix Added Successfully..!!\n");
		System.out.print("The New Matrix will be :\n");
		for (i = 0; i < 3; i++) {
			for (j = 0; j < 3; j++) {
				System.out.print(mat3[i][j] + " ");
			}
			System.out.println();
		}
	}
}
OUTPUT:
Enter Matrix 1 Elements : 1
2
3
4
5
6
7
8
9
Enter Matrix 2 Elements : 0
9
8
7
6
5
4
3
2
Adding both Matrix to form the Third Matrix...
The Two Matrix Added Successfully..!!
The New Matrix will be :
1 11 11 
11 11 11 
11 11 11 
Java Programming Code to Transpose Matrix
public class TwoDimention {
	public static void main(String args[]) {
		int i, j;
		int arr[][] = new int[3][3];
		int arrt[][] = new int[3][3];
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter 3*3 Array Elements : ");
		for (i = 0; i < 3; i++) {
			for (j = 0; j < 3; j++) {
				arr[i][j] = scan.nextInt();
			}
		}
		System.out.print("Transposing Array...\n");
		for (i = 0; i < 3; i++) {
			for (j = 0; j < 3; j++) {
				arrt[i][j] = arr[j][i];
			}
		}
		System.out.print("Transpose of the Matrix is :\n");
		for (i = 0; i < 3; i++) {
			for (j = 0; j < 3; j++) {
				System.out.print(arrt[i][j] + " ");
			}
			System.out.println();
		}
	}
}
OUTPUT:
Enter 3*3 Array Elements : 1
2
3
33
4
5
6
6
7
Transposing Array...
Transpose of the Matrix is :
1 33 6 
2 4 6 
3 5 7 
Java Programming Code to Compare Two Strings
public class Test {
	public static void main(String args[]) {
		String str1, str2;
		Scanner in = new Scanner(System.in);
		System.out.println("Enter First String");
		str1 = in.nextLine();
		System.out.println("Enter Second String");
		str2 = in.nextLine();
		if (str1.compareTo(str2) > 0) {
			System.out.println("First String is Greater than Second String.");
		} else if (str1.compareTo(str2) < 0) {
			System.out.println("First String is Smaller than Second String.");
		} else {	
			System.out.println("Both Strings are Equal (i.e. String1 is Equal to String2)");
		}
	}
}
OUTPUT:
Enter First String
kolle
Enter Second String
pavan
First String is Smaller than Second String.
Java Programming Code to Delete Words from Sentence
public class Test {
	public static void main(String args[]) {
		String strOrig, word;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter a String : ");
		strOrig = scan.nextLine();
		System.out.print("Enter a Word to be Delete from the String : ");
		word = scan.nextLine();
		System.out.print("Deleting all '" + word + "' from '" + strOrig + "'...\n");
		strOrig = strOrig.replaceAll(word, "");
		System.out.print("Specified word deleted Successfully from the String..!!");
		System.out.print("\nNow the String is :\n");
		System.out.print(strOrig);
	}
}
OUTPUT:
Enter a String : hi siddu how are you
Enter a Word to be Delete from the String : siddu
Deleting all 'siddu' from 'hi siddu how are you'...
Specified word deleted Successfully from the String..!!
Now the String is :
hi  how are you
Java Programming Code to Find Frequency of Characters in String
public class Test {
	public static void main(String args[]) {
		String str;
		char c, ch;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter a String : ");
		str = scan.nextLine();
		for (c = 'a'; c <= 'z'; c++) {
			int k = 0;
			for (int j = 0; j < str.length(); j++) {
				ch = str.charAt(j);
				if (ch == c) {
					k++;
				}
			}	
			if (k > 0) {
			System.out.println("The character " + c + " has occurred for " + k + " times");
			}
		}
	}
}
OUTPUT:
Enter a String : siddu
The character d has occurred for 2 times
The character i has occurred for 1 times
The character s has occurred for 1 times
The character u has occurred for 1 times
Java Programming Code to Count Occurrence of Word in Sentence
public class Test {
	public static int countWords(String str) {
		int count = 1;
		for (int i = 0; i <= str.length() - 1; i++) {
			if (str.charAt(i) == ' ' && str.charAt(i + 1) != ' ') {
				count++;
			}
		}
		return count;
	}	
	public static void main(String args[]) {
		String sentence;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter a Sentence : ");
		sentence = scan.nextLine();
		System.out.print("Total Number of Words in Entered Sentence is " + countWords(sentence));
	}
}
OUTPUT:
Enter a Sentence : hi siduu how are you
Total Number of Words in Entered Sentence is 5
Java Programming Code to Remove Spaces from String
public class JavaProgram {
	public static void main(String args[]) {
		String str, strWithoutSpace;
		int i;	
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter a Sentence : ");
		str = scan.nextLine();
		// 1. Using replaceAll() Method
		strWithoutSpace = str.replaceAll(" ", "");
		System.out.println(strWithoutSpace);
		// 2. Without Using replaceAll() Method
		char[] strArray = str.toCharArray();
		StringBuffer sb = new StringBuffer();
		for (i = 0; i < strArray.length; i++) {
			if ((strArray[i] != ' ') && (strArray[i] != '\t')) {
				sb.append(strArray[i]);
			}
		}
		System.out.println(sb);
	}
}
OUTPUT:
Enter a Sentence : hi siddu
hisiddu
hisiddu
Java Programming Code to Sort Strings in Alphabetical Order
public class Test {
	public static void main(String[] input) {
		int i, j;
		String temp;
		Scanner scan = new Scanner(System.in);
		String names[] = new String[5];
		System.out.print("Enter 5 Names/Words : ");
		for (i = 0; i < 5; i++) {
			names[i] = scan.nextLine();
		}	
		System.out.println("\nSorting Words/Names in Alphabetical Order...\n");
		for (i = 0; i < 5; i++) {
			for (j = 1; j < 5; j++) {
				if (names[j - 1].compareTo(names[j]) > 0) {
					temp = names[j - 1];
					names[j - 1] = names[j];
					names[j] = temp;
				}
			}
		}
		System.out.print("Words/Names Sorted in Alphabetical Order Successfully..!!");
		System.out.println("\nNow the List is :\n");
		for (i = 0; i < 5; i++) {
			System.out.println(names[i]);
		}
	}
}
OUTPUT:
Enter 5 Names/Words : kolle
tej
pavan
saritha
siddu
Sorting Words/Names in Alphabetical Order...
Words/Names Sorted in Alphabetical Order Successfully..!!
Now the List is :
kolle
pavan
saritha
siddu
tej
Java Programming Code to Convert Uppercase Character to Lowercase
public class Test {
	public static void main(String[] input) {
		char ch;
		int temp;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter a Character in Uppercase : ");
		ch = scan.next().charAt(0);
		temp = (int) ch;
		temp = temp + 32;//UPPere to Lower
		//temp = temp - 32;//lower to upper
		ch = (char) temp;
		System.out.print("Equivalent Character in Lowercase = " + ch);
	}
}
OUTPUT:
Enter a Character in Uppercase : B
Equivalent Character in Lowercase = b
Java Programming Code to Get IP Address
public class Test
{
   public static void main(String args[]) throws Exception
   {
      System.out.println(InetAddress.getLocalHost());
   }
}
OUTPUT:
DESKTOP-2854VFR/127.0.0.1
Java Programming Code to Shutdown Computer
public class Test {
	public static void main(String args[]) throws IOException {
		Runtime runtime = Runtime.getRuntime();
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	System.out.print("Enter No. of Seconds after which You want your Computer to Shutdown :");
		long a = Long.parseLong(br.readLine());
		Process proc = runtime.exec("shutdown -s -t " + a);
		System.exit(0);
	}
}
Print Number Pattern in Java
public class NumberPattern
{
public static void main(String[] args)
{
for(int i =1; i <=5; i++)
{
for(int j =1; j <= i; j++)
{
if(j%2==0)
{
System.out.print(0);
}
else
{
System.out.print(1);
}
}
System.out.println();
}
}
}
OUTPUT:
1
10
101
1010
10101
Find Largest Number Among Three Numbers
public class greatestnumber {
	public static void main(String[] args) {
		int a, b, c, largest;
		Scanner s = new Scanner(System.in);
		System.out.println("Enter any three numbers: ");
		a = s.nextInt();
		b = s.nextInt();
		c = s.nextInt();

		if (a >= b && a >= c) {
			System.out.println("Largest number: " + a);
		}
		if (b >= a && b >= c) {
			System.out.println("Largest number: " + b);
		}
		if (c >= a && c >= b) {
			System.out.println("Largest number: " + c);
		}
		//largest=(a>b)?(a>c?a:c):(b>c?b:c);
	}
}
output:
Enter any three numbers: 
2
3
4
Largest number: 4
Sort the Array in an Ascending Order
public class AscendingOrder {
	public static void main(String[] args) {
		int n, temp;
		Scanner s = new Scanner(System.in);
		System.out.print("Enter no. of elements you want in array:");
		n = s.nextInt();
		int a[] = new int[n];
		System.out.println("Enter all the elements:");
		for (int i = 0; i < n; i++) {
			a[i] = s.nextInt();
		}
		for (int i = 0; i < n; i++) {
			for (int j = i + 1; j < n; j++) {
				if (a[i] > a[j]) {
					temp = a[i];
					a[i] = a[j];
					a[j] = temp;
				}
			}
		}
		System.out.print("Ascending Order:");
		for (int i = 0; i < n - 1; i++) {
			System.out.print(a[i] + ",");
		}
		System.out.print(a[n - 1]);
	}
}
OUTPUT:
Enter no. of elements you want in array:3
Enter all the elements:
1
5
3
Ascending Order:1,3,5
Recursive method to find all permutations of a String 
public class MainClass {
	public static void main(String args[]) {
		permuteString("", "tej");
	}
	public static void permuteString(String beginningString, String endingString) {
		if (endingString.length() <= 1)
			System.out.println(beginningString + endingString);
		                 else
			for (int i = 0; i < endingString.length(); i++) {
				try {
		String newString = endingString.substring(0, i) + endingString.substring(i + 1);
			permuteString(beginningString + endingString.charAt(i), newString);
				} catch (StringIndexOutOfBoundsException exception) {
					exception.printStackTrace();
				}
			}
	}
}
OUTPUT:
tej
tje
etj
ejt
jte
jet
remove special characters from a string in Java 
 public class Main {
	public static void main(String[] args) {
		String str = "gasd@!dfas%";
		String newStr = "";
		for (int i = 0; i < str.length(); i++) {
			// Ascci range for a-z A-Z
			if (str.charAt(i) > 64 && str.charAt(i) < 121) {
				newStr += str.charAt(i);
			}	
		}
		System.out.println("String before filter " + str);
		System.out.println("String after filter " + newStr);
	}
}
OUTPUT:
String before filter gasd@!dfas%
String after filter gasddfas
Find out Dupicate number between 1 tpo n numbers
public class DuplicateNumber {
	public int findDuplicateNumber(List<Integer> numbers) {
		int highestNumber = numbers.size() - 1;
		int total = getSum(numbers);
		int duplicate = total - (highestNumber * (highestNumber + 1) / 2);
		return duplicate;
	}
	public int getSum(List<Integer> numbers) {
		int sum = 0;
		for (int num : numbers) {
			sum += num;
		}
		return sum;
	}	

	public static void main(String a[]) {
		List<Integer> numbers = new ArrayList<Integer>();
		for (int i = 1; i < 30; i++) {
			numbers.add(i);
		}
		// add duplicate number into the list
		numbers.add(22);
		DuplicateNumber dn = new DuplicateNumber();
		System.out.println("Duplicate Number: " + dn.findDuplicateNumber(numbers));
	}
}

Arrays.asList method to convert the Array to ArrayList.
public class ArrayToArrayList {
	public static void main(String[] args) {
		/* Array Declaration and initialization */
		String citynames[] = { "Agra", "Mysore", "Chandigarh", "Bhopal" };
		/* Array to ArrayList conversion */
		ArrayList<String> citylist = new ArrayList<String>(Arrays.asList(citynames));
		/* Adding new elements to the converted List */
		citylist.add("New City2");
		citylist.add("New City3");
		/* Final ArrayList content display using for */
		for (String str : citylist) {
			System.out.println(str);
		}
	}
}
OUTPUT:
Agra
Mysore
Chandigarh
Bhopal
New City2
New City3
How to convert ArrayList to string array in java
public class ArrayListTOArray {
	public static void main(String[] args) {
		/* ArrayList declaration and initialization */
		ArrayList<String> arrlist = new ArrayList<String>();
		arrlist.add("String1");
		arrlist.add("String2");
		arrlist.add("String3");
		arrlist.add("String4");
		/* ArrayList to Array Conversion */
		String array[] = new String[arrlist.size()];
		for (int j = 0; j < arrlist.size(); j++) {
			array[j] = arrlist.get(j);
		}

		/* Displaying Array elements */
		for (String k : array) {
			System.out.println(k);
		}
	}
}
OUTPUT:
String1
String2
String3
String4
Convert List to Map
public class Main {
	public static void main(String[] args) {
		List<String> aList = new ArrayList<String>();
		Map<Integer, String> aMap = new HashMap<Integer, String>();
		aList.add("A");
		aList.add("B");
		for (int i = 0; i < aList.size(); i++) {
			aMap.put(i + 1, aList.get(i));
		}
		System.out.println(aMap.toString());
	}
}
OUTPUT:
{1=A, 2=B}
How to convert HashMap to ArrayList in Java?Jav
public class CrunchifyHashmapToArrayList {
	public static void main(String... args) {
		HashMap<String, Integer> companyDetails = new HashMap<String, Integer>();
		// create hashmap with keys and values (CompanyName, #Employees)
		companyDetails.put("eBay", 4444);
		companyDetails.put("Paypal", 5555);
		companyDetails.put("IBM", 6666);
		companyDetails.put("Google", 7777);
		companyDetails.put("Yahoo", 8888);
		System.out.println("==> Size of companyDetails Map: " + companyDetails.size());
		Iterator it = companyDetails.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry pairs = (Map.Entry) it.next();
			System.out.println(pairs.getKey() + " = " + pairs.getValue());
		}
		// Converting HashMap keys into ArrayList
		List<String> keyList = new ArrayList<String>(companyDetails.keySet());
		System.out.println("\n==> Size of Key list: " + keyList.size());
		for (String temp : keyList) {
			System.out.println(temp);
		}
		// Converting HashMap Values into ArrayList
		List<Integer> valueList = new ArrayList<Integer>(companyDetails.values());
		System.out.println("\n==> Size of Value list: " + valueList.size());
		for (Integer temp : valueList) {
			System.out.println(temp);
		}
		List<Entry> entryList = new ArrayList<Entry>(companyDetails.entrySet());
		System.out.println("\n==> Size of Entry list: " + entryList.size());
		for (Entry temp : entryList) {
			System.out.println(temp);
		}
	}
}
OUTPUT:
==> Size of companyDetails Map: 5
Paypal = 5555
Google = 7777
Yahoo = 8888
IBM = 6666
eBay = 4444
==> Size of Key list: 5
Paypal
Google
Yahoo
IBM
eBay
==> Size of Value list: 5
5555
7777
8888
6666
4444
==> Size of Entry list: 5
Paypal=5555
Google=7777
Yahoo=8888
IBM=6666
eBay=4444
Reverse Each Word Of A String :
public class ReverseEachWord {
	static void reverseEachWordOfString(String inputString) {
		String[] words = inputString.split(" ");
		String reverseString = "";
		for (int i = 0; i < words.length; i++) {
			String word = words[i];
			String reverseWord = "";
			for (int j = word.length() - 1; j >= 0; j--) {
				reverseWord = reverseWord + word.charAt(j);
			}
			reverseString = reverseString + reverseWord + " ";
		}
		System.out.println(reverseString);
	}
	public static void main(String[] args) {
		reverseEachWordOfString("Java Concept Of The Day");
	}
}
OUTPUT:
Java Concept Of The Day
avaJ tpecnoC fO ehT yaD 


Reverse either Odd or Even String 
publicclass EachSecondWordReverse {
	public static void main(String[] args) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter Your Original String");
		String str = reader.readLine();
		String s[] = str.split(" ");
		StringBuffer buffer = new StringBuffer();
		for (inti = 0; i<s.length; i++) {
			if (i % 2 == 0) {
				buffer.append(s[i]);
			} else {
				buffer.append(reverseString(s[i]));
			}
			buffer.append(" ");
		}
		System.out.println(buffer.toString());
	}	
	Private static Object reverseString(String name) {
		char[] ch = name.toCharArray();
		char reverseChar[] = newchar[ch.length];
		intlenght = ch.length - 1;
		for (inti = lenght; i>= 0; i--) {
			reverseChar[lenght - i] = ch[i];
		}
		return new String(reverseChar);
	}
}
output:
Enter Your Original String
hi siddu how are you
hi uddis how era you
How to Find Duplicate Words in String in Java
public class DuplicateWordSearcher {
	@SuppressWarnings("unchecked")
	public static void main(String[] args) {
String text = "a r b k c d se f g a d f s s f d s ft gh f ws w f v x s g h d h j j k f sd j e wed a d f";
		List<String> list = Arrays.asList(text.split(" "));
		Set<String> uniqueWords = new HashSet<String>(list);
		for (String word : uniqueWords) {
			System.out.println(word + ": " + Collections.frequency(list, word));
		}
	}
}
OUTPUT:
ft: 1
sd: 1
se: 1
wed: 1
ws: 1
a: 3
gh: 1
b: 1
c: 1
d: 5
e: 1
f: 7
g: 2
h: 2
j: 3
k: 2
r: 1
s: 4
v: 1
w: 1
x: 1
 Remove Duplicate charcters in String
publicclass RemoveDuplicatesDemo {
	publicstaticvoid main(String[] args) {
		System.out.println("result is:");
		String str = "java";
		removeDuplicates(str);
	}
	Private static void removeDuplicates(String str) {
		Map<Character, Integer>map = new HashMap<>();
		char[] ch = str.toCharArray();
		for (char c : ch) {
			if (!map.containsKey(c)) {
				map.put(c, 1);
			} else {
				map.put(c, map.get(c) + 1);
			}
			Set<Map.Entry<Character, Integer>>entrySet = map.entrySet();
			for (Map.Entry<Character, Integer>entry : entrySet) {
				if (entry.getValue() > 1) {
			System.out.printf("%s : %d %n", entry.getKey(), entry.getValue());
					// %s is key and %d is value and %n new line
				}
			}
		}
	}

}
Output:
result is:
a : 2 
Write a java program without using loop and System.out.println
publicclass DisplayOnetoTenNumberWothoutUsingloop {
publicstaticvoid main(String[] args) {
	System.out.println("enter numbers");
	displaynumbers(1);
}
privatestaticvoid displaynumbers(intn) {
	if (n<=10) {
		System.out.println(n);
		displaynumbers(n+1);
	}
}
}
OUTPUT:
enter numbers
1
2
3
4
5
6
7
8
9
10
Check Whether Two Strings Are Anagram Or Not?
public class AnagramProgram {
	static void isAnagram(String s1, String s2) {
		// Removing all white spaces from s1 and s2
		String copyOfs1 = s1.replaceAll("\\s", "");
		String copyOfs2 = s2.replaceAll("\\s", "");
		// Initially setting status as true
		boolean status = true;
		if (copyOfs1.length() != copyOfs2.length()) {
			// Setting status as false if copyOfs1 and copyOfs2 doesn't have
			// same length
			status = false;
		} else {
			// Changing the case of characters of both copyOfs1 and copyOfs2 and
			// converting them to char array
			char[] s1Array = copyOfs1.toLowerCase().toCharArray();
			char[] s2Array = copyOfs2.toLowerCase().toCharArray();
			// Sorting both s1Array and s2Array
			Arrays.sort(s1Array);
			Arrays.sort(s2Array);
			// Checking whether s1Array and s2Array are equal
			status = Arrays.equals(s1Array, s2Array);
		}
		// Output
		if (status) {
			System.out.println(s1 + " and " + s2 + " are anagrams");
		} else {
			System.out.println(s1 + " and " + s2 + " are not anagrams");
		}
	}

	public static void main(String[] args) {
		isAnagram("kolle","ollek");
	}
}
OUTPUT:
kolle and ollek are anagrams
Printing the initials of a Name or First letters of each word of a Sentence
public class AcronymOfString
{
public static void main(String[] args) {
		String str=" "+"Kolle Sidda Ramu";
		for (int i = 0; i <str.length(); i++) {
			if (str.charAt(i)==' ') {
				System.out.print(str.charAt(i+1)+" ");
			}
		}
		}	
		}
OUTPUT:
K.S.R.
How to print 3,6,9,12 given array{1,2,3,4,5,67,8,9,10,11,12}
publicclass EachSecondWordReverse {
publicstaticvoid main(String[] args){
	System.out.println("-----------------");
	intn[]={1,2,3,4,5,6,7,8,9,10,11,13};
	inti=1;
	while (i++<=n.length) {
			if(i%3==0)
				System.out.println(i);
		}
    }
}
OUTPUT:
3
6
9
12
JSP Auto Refresh
<%@ page import="java.io.*,java.util.*" %>
<html>
<head>
<title>Auto Refresh Header Example</title>
</head>
<body>
<center>
<h2>Auto Refresh Header Example</h2>
<%
   // Set refresh, autoload time as 5 seconds
   response.setIntHeader("Refresh",5);
   // Get current time
   Calendar calendar =newGregorianCalendar();
   String am_pm;
   int hour = calendar.get(Calendar.HOUR);
   int minute = calendar.get(Calendar.MINUTE);
   int second = calendar.get(Calendar.SECOND);
   if(calendar.get(Calendar.AM_PM)==0)
      am_pm ="AM";
   else
      am_pm ="PM";
   String CT = hour+":"+ minute +":"+ second +" "+ am_pm;
   out.println("Crrent Time: "+ CT +"\n");
%>
</center>
</body>
</html>

 
Convert Java Object to XML
Student.java
@XmlRootElement
public class Student {
int id;
String name;
public int getId() {
	return id;
}
@XmlElement
public void setId(int id) {
	this.id = id;
}
public String getName() {
	return name;
}
@XmlElement
public void setName(String name) {
	this.name = name;
}
}
Convert JavaObject to XML
public class MarshallingExample {
public static void main(String[] args) throws JAXBException {
Student student=new Student();
student.setId(11);
student.setName("kolle");
	JAXBContext context=JAXBContext.newInstance(Student.class);
	Marshaller marshaller=context.createMarshaller();
	marshaller.setProperty(marshaller.JAXB_FORMATTED_OUTPUT, true);
	marshaller.marshal(student, new File("student.xml"));
	marshaller.marshal(student, System.out);
}
}
OUTPUT:
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<student>
    <id>11</id>
    <name>kolle</name>
</student>
Convert Xml to JavaObject
public class UnMarshalling {
public static void main(String[] args) throws JAXBException {
	File f=new File("student.xml");
	JAXBContext context=JAXBContext.newInstance(Student.class);
	UnMarshalling marshalling=(UnMarshalling) context.createUnmarshaller();
	Student student=(Student)marshalling.unmarshal(f);
	System.out.println(student);
}
}
OUTPUT:
11
Kolle
Convert JavaObject to JSON
Employee.java

public class Employee {
private int id=11;
private String name="Kolle";
public int getId() {
	return id;
}
public void setId(int id) {
	this.id = id;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
@Override
	public String toString() {
StringBuilder builder=new StringBuilder();
builder.append("Emp_ID:").append(id);
builder.append("Emp_NamE:").append(name);
	return builder.toString();
	}
}
public class JavaObjectToJson {
public static void main(String[] args) {
	Employee employee=new Employee();
	try {
		ObjectMapper mapper=new ObjectMapper();
		String json=mapper.writeValueAsString(employee);
		System.out.println(json);
	} catch (Exception e) {
	}	
}
}
OUTPUT:
{
“id”:11,
“name”:”kolle”
}

Convert JSON To Java Object
import java.io.File;

public class JSONtoJava {
public static void main(String[] args) {
	Employee employee=new Employee();
	try {
		ObjectMapper mapper=new ObjectMapper();
		File f=new File("employee.txt");
		Employee employee2=mapper.readValue(f,Employee.class);
	} catch (Exception e) {
	}	
}
}
OUTPUT:
Id:11
Name:kolle
Display QRCODE generatorImage
public class QrCodeTest {
public static void main(String[] args) throws IOException {
String string="Name:Siddaramu Kolle";
ByteArrayOutputStream stream=QRCode.from(string).to(ImageType.JPG).stream();
File file=new File("F:\\siddu.jpg");
FileOutputStream stream2=new FileOutputStream(file);
stream2.write(stream.toByteArray());
stream2.flush();
}	
}
OUTPUT:
 
Java 8 lamda ,filter and stream:
class Product{  
    int id;  
    String name;  
    float price;  
    public Product(int id, String name, float price) {  
        this.id = id;  
        this.name = name;  
        this.price = price;  
    }  
}  
public class JavaStreamExample {  
    public static void main(String[] args) {  
        List<Product> productsList = new ArrayList<Product>();  
        //Adding Products  
        productsList.add(new Product(1,"HP Laptop",25000f));  
        productsList.add(new Product(2,"Dell Laptop",30000f));  
        productsList.add(new Product(3,"Lenevo Laptop",28000f));  
        productsList.add(new Product(4,"Sony Laptop",28000f));  
        productsList.add(new Product(5,"Apple Laptop",90000f));  
        List<Float> productPriceList2 =productsList.stream()  
                                     .filter(p -> p.price > 30000)// filtering data  
                                     .map(p->p.price)        // fetching price  
                                     .collect(Collectors.toList()); // collecting as list  
        System.out.println(productPriceList2);  
    }  
}  

Access privatemethod outside the class:
class MethodTest
{
	private void show()
	{
		System.out.println("private method access outside the class");
	}
	}
public class Privatemethod {
public static void main(String[] args) throws Exception{
	Class c=Class.forName("MethodTest");
	MethodTest mm=(MethodTest)c.newInstance();
	Method method=c.getDeclaredMethod("show", null);
	method.setAccessible(true);
	method.invoke(mm, null);
}
}
OUTPUT:
private method access outside the class
How to identify a given positive decimal number as even/odd without using % or / operator 
	public class TestEvenOdd {
	public static void main(String arg[]) {
		int num = 6;
		int result = num;
		while (result >= 2) {
			result = result - 2;
		}
		if (result == 1) {
			System.out.println("The number is odd");
		} else {
			System.out.print("The number is even");
		}
	}
}
OUTPUT:
The number is even

Convert a given string as "11/12/2010" to a Date object. 
public class DateFormat
{
	public static void main(String[] args) throws ParseException {
		SimpleDateFormat dateFormat=new SimpleDateFormat("DD/MM/YYYY");
		String str="23/06/1991";
		 Date d=dateFormat.parse(str);
		 System.out.println(d);
		System.out.println(dateFormat.format(d));
		
	}
}
OUTPUT:
Sun Dec 30 00:00:00 PST 1990
364/12/1991
Double Brace Initialization in Java for List Collection Example
public class DoublebracesList {
	public static void main(String[] args) {
		List<Integer> values = new ArrayList<Integer>() {
			{
				add(34);
				add(35);
			}
		};	

		/* List<Integer> values = Arrays.asList(23, 45); */

		/*
		 * List<Integer> values=new ArrayList<>(); 
		 * values.add(56);
		 * values.add(23);
		 */
		for (Integer integer : values) {
			System.out.println(integer);
		}
	}

}
OUTPUT:
34
35
 Print Hello World without using Semicolon
public class WithoutSemicolon {
public static void main(String[] args) {
	if (System.out.printf("hello world")==null) {
	}
}
}
OUTPUT:
Hello world

Java code for finding the longest palindrome
 public class PalDemo {

    public static void main(String[] args) {
        PalDemo pd = new PalDemo();
        
        String pal = pd.findLongestPalindrome("bananas");
        System.out.println("" + pal);
        
        pal = pd.findLongestPalindrome("abaradar121");
        System.out.println("" + pal);

    }
    
    public String findLongestPalindrome(String s) {
        // Validations
        if (s.isEmpty()) {
            return "Please enter a String";
        }
    
        if (s.length() == 1) {
            return s;
        }
        // Validations end
        // Start with one char (starting) as a longest palindrome
        String longest = s.substring(0, 1);
        for (int i = 0; i < s.length(); i = i+1) {
            
            // get longest palindrome for odd length (center is i)
            String tmp = checkForEquality(s, i, i);
            if (tmp.length() > longest.length()) {
                longest = tmp;
            }
    
            // get longest palindrome for even length (center is i, i+1)
            tmp = checkForEquality(s, i, i + 1);
            if (tmp.length() > longest.length()) {
                longest = tmp;
            }
        }
    
        return longest;
    }
    
    
    /**
     * In this method equality is checked starting from
     * the center moving one character left and one character
     * right from the center. If both chars are equal then the
     * next set of chars are checked.  
     *     
     */
    public String checkForEquality(String s, int begin, int end) {
        while (begin >= 0 && end <= s.length() - 1 && s.charAt(begin) == s.charAt(end)) {
            begin--;
            end++;
        }
        return s.substring(begin + 1, end);    
    }
}
Output
anana
radar
https://netjs.blogspot.in/2016/05/how-to-find-longest-palindrome-in-given-string-java-program.html
Java code to find first non-repeated character in a given String
public class FirstOccurence {

 public static void main(String[] args) {
  String str = "zanzibar";
  
  boolean found = false;
  for(int i = 0; i < str.length(); i++){
   found = true;
   char c = str.charAt(i);
   //System.out.println("char " + c);
   for(int j = 0; j < str.length(); j++){
    //System.out.println("n-char " + str.charAt(j));
    // if found then set the boolean field as false
    // Also skip the char which is compared 
    if(c == str.charAt(j) && j != i){
     found = false;
     break;
    }
   }
   if(found){
    System.out.println("Character is "  + c);
    break;
   }
  }
  if(!found){
   System.out.println("No single character found");
  }
  
 }
}
Output
Character is n

Java program to remove duplicate words in given string
public class JavaToXML {

	public static void main(String[] args)
	{
		String input="Welcome to Java Session Java Session Session Java"; 		//Input String	
		String[] words=input.split(" ");	//Split the word from String
		for(int i=0;i<words.length;i++)		//Outer loop for Comparison		
		{
			if(words[i]!=null)
			{
			
			for(int j=i+1;j<words.length;j++)	//Inner loop for Comparison
			{
				
			if(words[i].equals(words[j]))	//Checking for both strings are equal
				{
					words[j]=null;		
				}
			}
			}
		}
		for(int k=0;k<words.length;k++)		//Displaying the String without duplicate words	
		{
			if(words[k]!=null)
			{
				System.out.println(words[k]);
			}
			
	     }  
	}
}
Output
Welcome
to
Java
Session
Java program to count number of words in given string
1.	public class WordCount
{ 
	public static void main(String args[])
	{ 
		String s = "welcome to candid java tutorial";
		int count = 1;
		for (int i = 0; i < s.length() - 1; i++)
		{
			if ((s.charAt(i) == ' ') && (s.charAt(i + 1) != ' '))
			{
				count++;
			}
		}
 		System.out.println("Number of words in a string = " + count);
	}
}

Output
Number of words in a string = 5
Java program to count number of duplicate words in given string
//Program to count repeated words in string
public class CountWords 
{
	public static void main(String[] args)
	{
		String input="Welcome to Java Session Session Session"; 		//Input String	
		String[] words=input.split(" ");	//Split the word from String
		int wrc=1;							//Variable for getting Repeated word count
		for(int i=0;i<words.length;i++)//Outer loop for Comparison		
		{
			for(int j=i+1;j<words.length;j++)//Inner loop for Comparison
			{
				
			if(words[i].equals(words[j]))//Checking for both strings are equal
				{
					wrc=wrc+1;//if equal increment the count
					words[j]="0";//Replace repeated words by zero
				}
			}
			if(words[i]!="0")
		System.out.println(words[i]+"--"+wrc);//Printing the word along with count
			wrc=1;	
	     }  		
	}

}

Output
Welcome--1
to--1
Java--1
Session--3
Print Even and Odd without using thread metods
package com.multithreading.evenOrOdd;

class OddCount implements Runnable {

	@Override
	public void run() {
		System.out.println("ODD COUNT:");
		for (int i = 1; i < 10; i++) {
			if (i % 2 == 0) {
				System.out.println(i);
			}
		}
	}

}

class EvenCount implements Runnable {

	@Override
	public void run() {
		System.out.println("ODD COUNT:");
		for (int i = 1; i < 10; i++) {
			if (i % 2 != 0) {
				System.out.println(i);
			}
		}
	}

}

public class PrintEvenOrOdd {
	public static void main(String[] args) throws InterruptedException {
		OddCount oddCount = new OddCount();
		EvenCount evenCount = new EvenCount();
		Thread thread1 = new Thread(evenCount);

		thread1.start();
		Thread thread2 = new Thread(oddCount);
		thread2.start();
	}
}
Print 1 to 10 even and odd using Using Thread methods(wait,notify,join)
package com.multithreading.evenOrOdd;

public class OddEvenPrintMain {
	 
	boolean odd = false;
	int count = 1;
	int MAX = 10;
 
	public void printOdd() {
		synchronized (this) {
			while (count < MAX) {
				System.out.println("Checking odd loop");
 
				while (!odd) {
					try {
						System.out.println("Odd waiting : " + count);
						wait();
						System.out.println("Notified odd :" + count);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				System.out.println("Odd Thread :" + count);
				count++;
				odd = false;
				notify();
			}
		}
	}
 
	public void printEven() {
 
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}
		synchronized (this) {
			while (count < MAX) {
				System.out.println("Checking even loop");
 
				while (odd) {
					try {
						System.out.println("Even waiting: " + count);
						wait();
						System.out.println("Notified even:" + count);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				System.out.println("Even thread :" + count);
				count++;
				odd = true;
				notify();
 
			}
		}
	}
 
	public static void main(String[] args) {
 
		OddEvenPrintMain oep = new OddEvenPrintMain();
		oep.odd = true;
		Thread t1 = new Thread(new Runnable() {
 
			@Override
			public void run() {
				oep.printEven();
 
			}
		});
		Thread t2 = new Thread(new Runnable() {
 
			@Override
			public void run() {
				oep.printOdd();
 
			}
		});
 
		t1.start();
		t2.start();
 
		try {
			t1.join();
			t2.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
 
	}
}
Another way:
package com.multithreading.evenOrOdd;

public class EvenPrintMain {
	 static volatile int counter = 1;
	 static Object object = new Object();// Monitor

	 public static void main(String[] args) {
	  Thread tEven = new Thread(new EvenProducer(), "Even thread");
	  Thread tOdd = new Thread(new OddProducer(), "Odd thread");
	  tEven.start();
	  tOdd.start();
	 }

	 static class EvenProducer implements Runnable {
	  public void run() {
	   synchronized (object) {
	    while (true) {
	     if (counter % 2 == 0) {
	      System.out.println(Thread.currentThread().getName()
	        + " produced " + counter);
	      try {
	       Thread.sleep(1000);
	      } catch (InterruptedException e) {
	       // TODO Auto-generated catch block
	       e.printStackTrace();
	      }
	      counter++;
	      object.notify();
	     } else {
	      try {
	       object.wait();
	      } catch (InterruptedException e) {
	       e.printStackTrace();
	      }
	     }
	    }
	   }
	  }
	 }

	 static class OddProducer implements Runnable {
	  public void run() {
	   synchronized (object) {
	    while (true) {
	     if (counter % 2 != 0) {
	      System.out.println(Thread.currentThread().getName()
	        + " produced " + counter);
	      counter++;
	      object.notify();
	     } else {
	      try {
	       object.wait();
	      } catch (InterruptedException e) {
	       e.printStackTrace();
	      }
	     }
	    }
	   }
	  }
	 }
}



Custom sorting Without Using Collections.sort()

public class Employee implements Comparable<Employee> {
	private int age;
	private String name;

	public Employee() {
	}

	public Employee(int age, String name) {
		this.age = age;
		this.name = name;
	}

	public static void sort(List<Employee> employees) {
		for (int i = 0; i < employees.size(); i++) {
			for (int j = i + 1; j < employees.size(); j++) {
				if (employees.get(i).compareTo(employees.get(j)) > 0) {
					Employee temp = employees.get(i);
					employees.set(i, employees.get(j));
					employees.set(j, temp);
				}
			}
		}
	}

	@Override
	public String toString() {
		return "\nEmployee{" + "\nAge:" + age + "\nName:" + name + "}\n";
	}

	@Override
	public int compareTo(Employee o) {
		if (age < o.age) {
			return -1;
		}
		if (age > o.age) {
			return 1;
		} else {
			return 0;
		}
	}

}


public class EmployeeTest{ 
public static void main(String[] args) {
	Employee  employee = new Employee(11, "kolle");
	Employee  employee1 = new Employee(6, "sari");
	Employee  employee2 = new Employee(10, "pavan");
	List<Employee> employees =new ArrayList<>();
	
	employees.add(employee);
	employees.add(employee1);
	employees.add(employee2);
	Employee.sort(employees);
	System.out.println(employees);
}
}
Password Encrypt and Decrypt
Encrypt and decrypt with Java
http://www.logikdev.com/2013/08/16/encrypt-and-decrypt-with-java/
Generate Secure Password Hash : MD5, SHA, PBKDF2, BCrypt Examples
https://howtodoinjava.com/security/how-to-generate-secure-password-hash-md5-sha-pbkdf2-bcrypt-examples/
Java MD5 Hashing Example
https://www.mkyong.com/java/java-md5-hashing-example/



 
 
 
Check number is Mobile Number or Not?

package com.core;

import java.util.Scanner;

class Utility {
	static boolean mobileOrNot(String str) {
		try {
			Integer.parseInt(str);
		} catch (NumberFormatException ex) {
			return false;
		}
		return true;
	}
}

public class CheckMobileNumberOrNot {
	public static void main(String[] args) {
		System.out.println("::Enter the input::");
		Scanner scanner = new Scanner(System.in);
		String str = scanner.next();
		if (Utility.mobileOrNot(str) && str.length() == 10) {
			System.out.println("::this is mobile number::");
		} else {
			System.out.println("::this is not mobile number::");
		}

	}
}

Constructor Naming?
public class ConstructorNaming {
public ConstructorNaming(){
	System.out.println("Constructor as a class name");
}
public void ConstructorNaming(){
	System.out.println("Constructor as a class name");
}
public static void main(String[] args) {
	ConstructorNaming constructorNaming = new ConstructorNaming();
	constructorNaming.ConstructorNaming();
}
}


public class ConvertCelsiustoFahrenheit {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("::Enter the value::");
		int Celsius, Fahrenheit;
		Celsius = sc.nextInt();
		Fahrenheit = Celsius * 9 / 5 + 32;
		System.out.println("::Fahrenheit::"+Fahrenheit);
	}
}

public class ConvertDecimaltoBinary {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("::Entr the decimal value::");
		int num = sc.nextInt();
		Stack<Integer> stack = new Stack<Integer>();
		while (num != 0) {
			int d = num % 2;
			stack.push(d);
			num = num / 2;
		}
		while (!stack.isEmpty()) {
			System.out.print(stack.pop());
		}
		System.out.println();
	}
}
import java.util.Scanner;
import java.util.Stack;

public class ConvertDecimaltoOctal {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("::Entr the decimal value::");
		int num = sc.nextInt();
		Stack<Integer> stack = new Stack<Integer>();
		while (num != 0) {
			int d = num % 8;
			stack.push(d);
			num = num / 8;
		}
		while (!stack.isEmpty()) {
			System.out.print(stack.pop());
		}
		System.out.println();
	}
}
public class ConvertFahrenhettoCelsius {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("::Enter the value::");
		int Celsius, Fahrenheit;
		Fahrenheit = sc.nextInt();
		Celsius = (Fahrenheit-32) * 5 / 9 ;
		System.out.println("::Celsius::"+Celsius);
	}
}
public class CountNoOfDigits {
public static void main(String[] args) {
	Scanner scanner = new Scanner(System.in);
	System.out.println("::Entr the value::");
	int num = scanner.nextInt();
	int count=0;
	while(num>0){
		num = num/10;
		count++;
	}
	System.out.println("::Count::"+count);
}
}
package com.core;

import java.util.Scanner;

public class BinaryToDecimal {

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		System.out.println("Enter a Binary Number: ");

		int binarynum = in.nextInt();
		int binary = binarynum;

		int decimal = 0;
		int power = 0;

		while (true) {
			if (binary == 0) {
				break;
			} else {
				int tmp = binary % 10;
				decimal += tmp * Math.pow(2, power);
				binary = binary / 10;
				power++;
			}
		}
		System.out.println("Binary=" + binary + " Decimal=" + decimal);
		;
	}
}
package com.core;

import java.util.Scanner;

public class BinaryToHexaDecimal {

	public static void main(String args[]) {
		int binnum, rem;
		String hexdecnum = "";

		// digits in hexadecimal number system

		char hex[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
		Scanner scan = new Scanner(System.in);

		System.out.print("Enter Binary Number : ");
		binnum = scan.nextInt();

		// converting the number in hexadecimal format
		while (binnum > 0) {
			rem = binnum % 16;
			hexdecnum = hex[rem] + hexdecnum;
			binnum = binnum / 16;
		}

		System.out.print("Equivalent Hexadecimal Value of " + binnum + " is :\n");
		System.out.print(hexdecnum);
	}
}
package com.core;

public class DataTypes {

	byte bb;
	short ss;

	int ii;
	long ll;
	float ff;
	double dd;
	char cc;
	String sss;

	Object oo;

	public static void main(String[] args) {
		System.out.println(Byte.MIN_VALUE);
		System.out.println(Byte.MAX_VALUE);
		System.out.println(Short.MIN_VALUE);
		System.out.println(Short.MAX_VALUE);
		System.out.println(Integer.MIN_VALUE);
		System.out.println(Integer.MAX_VALUE);
		System.out.println(Double.MIN_VALUE);
		System.out.println((int) Double.MAX_VALUE);
		System.out.println(Double.MAX_VALUE);
		System.out.println(Float.MIN_VALUE);
		System.out.println(Float.MAX_VALUE);
		System.out.println(Long.MIN_VALUE);
		System.out.println(Long.MAX_VALUE);
		System.out.println(Character.MAX_VALUE);
		System.out.println(Character.MIN_VALUE);

	}
}
public class FibonacciNumber {
	public static void main(String[] args) {
		System.out.println("Enter the value for Fibonacci");
		int f1 = 0, f2 = 1, sum = 0;
		Scanner sc = new Scanner(System.in);
		int num = 10;
		for (int i = 0; i <= num; i++) {
			System.out.println("::::---->" + f1);
			sum = f1 + f2;
			f1 = f2;
			f2 = sum;
		}

	}
}
public class FizzBuzz {
public static void main(String[] args) {
	Scanner scanner = new Scanner(System.in);
	System.out.println("::Enter the values::");
	int num = scanner.nextInt();
	for (int i = 0; i < num; i++) {
		if (i%(5*3)==0) {
			System.out.println("::FIZZBUZZ::");
		}
		else if(i%3==0){
			System.out.println("::BUZZ::");
		}
		else if(i%5==0){
			System.out.println("::FIZZ::");
		}
		else{
			System.out.println(i);
		}
	}
}
}
public class GreatestNumber {
public static void main(String[] args) {
	Scanner scanner = new Scanner(System.in);
	System.out.println("::Enter num1 value::");
	int num1= scanner.nextInt();
	System.out.println("::Enter num2 value::");
	int num2= scanner.nextInt();
	if(num1>num2)
	{
		System.out.println(num1+" is gratest value than num2");
	}else{
		System.out.println(num2+" is gratest value than num1");
	}
}
}
public class IPAddres {
public static void main(String[] args) {
	try {
		System.out.println("LocalHost::::"+InetAddress.getLocalHost());
		System.out.println(InetAddress.getByName("127.0.0.1"));
		System.out.println(InetAddress.getLoopbackAddress());

	} catch (UnknownHostException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
}
}
package com.core;

public class LabelForLoop {
	public static void main(String[] args) {

		aa: for (int i = 1; i <= 3; i++) {
			bb: for (int j = 1; j <= 3; j++) {
				if (i == 2 && j == 2) {

					break aa;

				}
				System.out.println(i + " " + j);
			}
		}

	}
}

package com.core;

import java.io.IOException;

public class LaunchExternalApp {

	public static void main(String[] args) throws IOException, InterruptedException {
		Runtime run = Runtime.getRuntime();
		// run.exec("notepad.exe");
		// Process p = run.exec("notepad");
		// run.exec("notepad E:\\sample.txt");
		/*
		 * String[] s = new String[] {
		 * "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
		 * "https://javaconceptoftheday.com/"}; try { run.exec(s); //opens
		 * "https://javaconceptoftheday.com/" in chrome browser } catch
		 * (IOException e) { e.printStackTrace(); }
		 */

		/*
		 * String[] s = new String[] {
		 * "C:\\Program Files\\Notepad++\\notepad++.exe",
		 * "C:\\Program Files\\Notepad++\\stylers.model.xml"};
		 * 
		 * Process process = run.exec(s);
		 */
		Process process = run.exec("notepad"); // opens "sample.txt" in notepad
		Thread.sleep(5000);
		process.destroy();

		System.out.println(run.freeMemory());
		System.out.println(run.maxMemory());
		System.out.println(run.totalMemory());

	}

}
package com.core;

import java.util.Scanner;

public class NumberOrNot {
public static void main(String[] args) {
	System.out.println("::Enter a number::");
	Scanner sc = new Scanner(System.in);
	String str = sc.nextLine();
	//System.out.println(NumberOrNot.checkNumberOrNot(str));
	
}

private static boolean checkNumberOrNot(String str) {
	
	try{
		Integer.parseInt(str);
	}
	catch(NumberFormatException e){
		return false;
	}
	return true;

}
}
package com.core;

import java.util.Scanner;

public class PerfectNumberOrNot {
	public static void main(String[] args) {
		System.out.println("Entr the the value::::");
		Scanner sc = new Scanner(System.in);
		int num = sc.nextInt();
		int result = 0;
		for (int i = 1; i <= num / 2; i++) {
			if (num % i == 0) {
				result = result + i;
			}
		}
		if (result==num) {
			System.out.println(num + "::::Perfect number");
		} else {
			System.out.println(num + "::::Not Perfect number");
		}
	}
}

public class PolydromeOrNot {
public static void main(String[] args) {
	Scanner scanner = new Scanner(System.in);
	System.out.println("::Enter the value::");
	int num = scanner.nextInt();
	int temp = num;
	int remainder,reverse=0;
	while(num>0){
		remainder = num%10;
		reverse = reverse*10+remainder;
		num= num/10;
	}
	num= temp;
	if(reverse==num){
		System.out.println(num+" is polindrome");
	}
	else{
		System.out.println(num+" is not polindrome");
	}
}
}
package com.core;

public class PostIncreOper {

	public static void main(String[] args) {
		int i = 0;
		System.out.println(i);//0
		i++;
		System.out.println(i);//1
		System.out.println(i);//1
		i++;
		System.out.println(i);//2
		System.out.println(i);//2
		i = 0;
		System.out.println(i);//0
		System.out.println(i++);//0
		System.out.println(i++);//1
		System.out.println(i);//2
	}

}

package com.core;

public class PreIncreOper {

	public static void main(String[] args) {
		
		/*int i;
		 * System.out.println(i); 
		 * compiletome error-need to initialize before using local variables.
		 */
		int i = 0;
		System.out.println(i);//0
		++i;
		System.out.println(i);//1
		++i;
		System.out.println(i);//2
		i=0;
		System.out.println(i);//0
		System.out.println(++i);//1
		System.out.println(++i);//2
		System.out.println(i);//2
		System.out.println(i);//2
		System.out.println(++i);//3
		System.out.println(i);//3
		System.out.println();//////////////////----it's working fine.
	}

}
public class PrimeNumberOrNot {
	public static void main(String[] args) {
		System.out.println("::Entr the value::");
		boolean flag = true;
		int num, sum = 0;
		Scanner scanner = new Scanner(System.in);
		num = scanner.nextInt();
		for (int i = 2; i < num/2; i++) {
			if (num % i == 0) {
				flag = false;
				break;
			}
		}
		if (flag) {
			System.out.println("::is prime number::");
		} else {
			System.out.println("::is not prime number::");
		}
	}
}
class PrivateClass {
	private PrivateClass() {
		System.out.println("::Private Constructor::");
	}

	public static void display() {
		PrivateClass class1 = new PrivateClass();
	}
}

public class PrivateConstructor {
	public static void main(String[] args) {
		System.out.println("::Outside the class::");
		PrivateConstructor PrivateConstructor = new PrivateConstructor();
		// PrivateClass class2 = new PrivateClass();
		PrivateClass.display();
	}
}
public class SumOFDigits {
	public static void main(String[] args) {
		int num = 1234, sum = 0, a,b;

		while(num>0){
		a = num % 10;
		sum = sum + a;
		num = num / 10;
		}

		System.out.println("::Sum of Digits::" + sum);
		
	}
}
public class Table {
public static void main(String[] args) {
	System.out.println("::Enter the value::");
	Scanner sc = new Scanner(System.in);
	int num = sc.nextInt();
	System.out.println("::Table of:: "+num);
	for (int i = 1; i <=10; i++) {
		System.out.println(num+"X"+i+"="+num*i);
	}
}
}
public class Trigonometric {
	public static void main(String[] args) {
		double angle = 90;
		double angleRadian = Math.toRadians(angle);
		double sin = Math.sin(angleRadian);
		double cos = Math.cos(angleRadian);
		double tan = sin / cos;
		double cosec = 1 / tan;
		double sec = 1 / cos;

		System.out.println("sin(90)::" + sin);
		System.out.println("cos(90)::" + cos);
		System.out.println("tan(90)::" + tan);
		System.out.println("cosec(90)::" + cosec);
		System.out.println("sec(90)::" + sec);
	}
}

package com.algorithm.sorting;


// Java implementation of iterative Binary Search
public class BinarySearch {
	// Returns index of x if it is present in arr[],
	// else return -1
	int binarySearch(int arr[], int x) {
		int l = 0, r = arr.length - 1;
		while (l <= r) {
			int m = l + (r - l) / 2;

			// Check if x is present at mid
			if (arr[m] == x)
				return m;

			// If x greater, ignore left half
			if (arr[m] < x)
				l = m + 1;

			// If x is smaller, ignore right half
			else
				r = m - 1;
		}

		// if we reach here, then element was
		// not present
		return -1;
	}

	// Driver method to test above
	public static void main(String args[]) {
		BinarySearch ob = new BinarySearch();
		int arr[] = { 2, 3, 4, 10, 40 };
		int n = arr.length;
		int x = 10;
		int result = ob.binarySearch(arr, x);
		if (result == -1)
			System.out.println("Element not present");
		else
			System.out.println("Element found at " + "index " + result);
	}
}







/*
class BinarySearchExample{  
	 public static void binarySearch(int arr[], int first, int last, int key){  
	   int mid = (first + last)/2;  
	   while( first <= last ){  
	      if ( arr[mid] < key ){  
	        first = mid + 1;     
	      }else if ( arr[mid] == key ){  
	        System.out.println("Element is found at index: " + mid);  
	        break;  
	      }else{  
	         last = mid - 1;  
	      }  
	      mid = (first + last)/2;  
	   }  
	   if ( first > last ){  
	      System.out.println("Element is not found!");  
	   }  
	 }  
	 public static void main(String args[]){  
	        int arr[] = {10,20,30,40,50};  
	        int key = 30;  
	        int last=arr.length-1;  
	        binarySearch(arr,0,last,key);     
	 }  
	}  */
package com.algorithm.sorting;

//Java implementation of recursive Binary Search 
public class BinarySearchUsingRecursion {
	// Returns index of x if it is present in arr[l..
	// r], else return -1
	int binarySearch(int arr[], int l, int r, int x) {
		if (r >= l) {
			int mid = l + (r - l) / 2;

			// If the element is present at the
			// middle itself
			if (arr[mid] == x)
				return mid;

			// If element is smaller than mid, then
			// it can only be present in left subarray
			if (arr[mid] > x)
				return binarySearch(arr, l, mid - 1, x);

			// Else the element can only be present
			// in right subarray
			return binarySearch(arr, mid + 1, r, x);
		}

		// We reach here when element is not present
		// in array
		return -1;
	}

	// Driver method to test above
	public static void main(String args[]) {
		BinarySearchUsingRecursion ob = new BinarySearchUsingRecursion();
		int arr[] = { 2, 3, 4, 10, 40 };
		int n = arr.length;
		int x = 10;
		int result = ob.binarySearch(arr, 0, n - 1, x);
		if (result == -1)
			System.out.println("Element not present");
		else
			System.out.println("Element found at index " + result);
	}
}
package com.algorithm.sorting;

public class BubbleSort1 {

	// Java program for implementation of Bubble Sort
	    void bubbleSort(int arr[]) 
	    { 
	        int n = arr.length; 
	        for (int i = 0; i < n-1; i++) 
	            for (int j = 0; j < n-i-1; j++) 
	                if (arr[j] > arr[j+1]) 
	                { 
	                    // swap temp and arr[i] 
	                    int temp = arr[j]; 
	                    arr[j] = arr[j+1]; 
	                    arr[j+1] = temp; 
	                } 
	    } 
	  
	    /* Prints the array */
	    void printArray(int arr[]) 
	    { 
	        int n = arr.length; 
	        for (int i=0; i<n; ++i) 
	            System.out.print(arr[i] + " "); 
	        System.out.println(); 
	    } 
	  
	    // Driver method to test above 
	    public static void main(String args[]) 
	    { 
	    	BubbleSort1 ob = new BubbleSort1(); 
	        int arr[] = {64, 34, 25, 12, 22, 11, 90}; 
	        ob.bubbleSort(arr); 
	        System.out.println("Sorted array"); 
	        ob.printArray(arr); 
	    } 
	}



/*public class BubbleSortExample {  
    static void bubbleSort(int[] arr) {  
        int n = arr.length;  
        int temp = 0;  
         for(int i=0; i < n; i++){  
                 for(int j=1; j < (n-i); j++){  
                          if(arr[j-1] > arr[j]){  
                                 //swap elements  
                                 temp = arr[j-1];  
                                 arr[j-1] = arr[j];  
                                 arr[j] = temp;  
                         }  
                          
                 }  
         }  
  
    }  
    public static void main(String[] args) {  
                int arr[] ={3,60,35,2,45,320,5};  
                 
                System.out.println("Array Before Bubble Sort");  
                for(int i=0; i < arr.length; i++){  
                        System.out.print(arr[i] + " ");  
                }  
                System.out.println();  
                  
                bubbleSort(arr);//sorting array elements using bubble sort  
                 
                System.out.println("Array After Bubble Sort");  
                for(int i=0; i < arr.length; i++){  
                        System.out.print(arr[i] + " ");  
                }  
   
        }  
} */
package com.algorithm.sorting;

public class BubbleSort2 {

	    // An optimized version of Bubble Sort 
	    static void bubbleSort(int arr[], int n) 
	    { 
	        int i, j, temp; 
	        boolean swapped; 
	        for (i = 0; i < n - 1; i++)  
	        { 
	            swapped = false; 
	            for (j = 0; j < n - i - 1; j++)  
	            { 
	                if (arr[j] > arr[j + 1])  
	                { 
	                    // swap arr[j] and arr[j+1] 
	                    temp = arr[j]; 
	                    arr[j] = arr[j + 1]; 
	                    arr[j + 1] = temp; 
	                    swapped = true; 
	                } 
	            } 
	  
	            // IF no two elements were  
	            // swapped by inner loop, then break 
	            if (swapped == false) 
	                break; 
	        } 
	    } 
	  
	    // Function to print an array  
	    static void printArray(int arr[], int size) 
	    { 
	        int i; 
	        for (i = 0; i < size; i++) 
	            System.out.print(arr[i] + " "); 
	        System.out.println(); 
	    } 
	  
	    // Driver program 
	    public static void main(String args[]) 
	    { 
	        int arr[] = { 64, 34, 25, 12, 22, 11, 90 }; 
	        int n = arr.length; 
	        bubbleSort(arr, n); 
	        System.out.println("Sorted array: "); 
	        printArray(arr, n); 
	    } 
	}
package com.algorithm.sorting;

public class InsertionSortExample {
	 public static void insertionSort(int array[]) {  
	        int n = array.length;  
	        for (int j = 1; j < n; j++) {  
	            int key = array[j];  
	            int i = j-1;  
	            while ( (i > -1) && ( array [i] > key ) ) {  
	                array [i+1] = array [i];  
	                i--;  
	            }  
	            array[i+1] = key;  
	        }  
	    }  
	       
	    public static void main(String a[]){    
	        int[] arr1 = {9,14,3,2,43,11,58,22};    
	        System.out.println("Before Insertion Sort");    
	        for(int i:arr1){    
	            System.out.print(i+" ");    
	        }    
	        System.out.println();    
	            
	        insertionSort(arr1);//sorting array using insertion sort    
	           
	        System.out.println("After Insertion Sort");    
	        for(int i:arr1){    
	            System.out.print(i+" ");    
	        }    
	    }    
}
package com.algorithm.sorting;

public class LinearSearchExample {
	public static int linearSearch(int[] arr, int key) {
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == key) {
				return i;
			}
		}
		return -1;
	}

	public static void main(String a[]) {
		int[] a1 = { 10, 20, 30, 50, 70, 90 };
		int key = 50;
		System.out.println(key + " is found at index: " + linearSearch(a1, key));
	}
}




/*
class LinearSearchExample2   
{  
  public static void main(String args[])  
  {  
    int c, n, search, array[];  
   
    Scanner in = new Scanner(System.in);  
    System.out.println("Enter number of elements");  
    n = in.nextInt();   
    array = new int[n];  
   
    System.out.println("Enter those " + n + " elements");  
   
    for (c = 0; c < n; c++)  
      array[c] = in.nextInt();  
   
    System.out.println("Enter value to find");  
    search = in.nextInt();  
   
    for (c = 0; c < n; c++)  
    {  
      if (array[c] == search)      Searching element is present   
      {  
         System.out.println(search + " is present at location " + (c + 1) + ".");  
          break;  
      }  
   }  
   if (c == n)   Element to search isn't present   
      System.out.println(search + " isn't present in array.");  
  }  
} */
package com.algorithm.sorting;

import java.util.Scanner;

public class SelectionSortExample2 {
	public static void main(String args[]) {
		int size, i, j, temp;
		int arr[] = new int[50];
		Scanner scan = new Scanner(System.in);

		System.out.print("Enter Array Size : ");
		size = scan.nextInt();

		System.out.print("Enter Array Elements : ");
		for (i = 0; i < size; i++) {
			arr[i] = scan.nextInt();
		}

		System.out.print("Sorting Array using Selection Sort Technique..\n");
		for (i = 0; i < size; i++) {
			for (j = i + 1; j < size; j++) {
				if (arr[i] > arr[j]) {
					temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}

		System.out.print("Now the Array after Sorting is :\n");
		for (i = 0; i < size; i++) {
			System.out.print(arr[i] + "  ");
		}
	}
}


/*public class SelectionSortExample {  
    public static void selectionSort(int[] arr){  
        for (int i = 0; i < arr.length - 1; i++)  
        {  
            int index = i;  
            for (int j = i + 1; j < arr.length; j++){  
                if (arr[j] < arr[index]){  
                    index = j;//searching for lowest index  
                }  
            }  
            int smallerNumber = arr[index];   
            arr[index] = arr[i];  
            arr[i] = smallerNumber;  
        }  
    }  
       
    public static void main(String a[]){  
        int[] arr1 = {9,14,3,2,43,11,58,22};  
        System.out.println("Before Selection Sort");  
        for(int i:arr1){  
            System.out.print(i+" ");  
        }  
        System.out.println();  
          
        selectionSort(arr1);//sorting array using selection sort  
         
        System.out.println("After Selection Sort");  
        for(int i:arr1){  
            System.out.print(i+" ");  
        }  
    }  
}  */



public class SortArray {
public static void main(String[] args) {
	int num[] ={12,2,42,65,8};
	int temp;
	for (int i = 0; i < num.length; i++) {
		for (int j = i+1; j < num.length; j++) {
			if(num[i]>num[j]){
				temp = num[i];
				num[i]=num[j];
				num[j]=temp;
			}
		}
		System.out.println(num[i]);
	}
	
}
}

public class Print1To10ValueWithoutLoop {
	public static void main(String[] args) {
		withoutLoop();
	}

	private static void withoutLoop() {
		int[] arr = new int[21];
		try {
			printLn(arr, 1);
		} catch (ArrayIndexOutOfBoundsException e) {
		}

	}

	private static void printLn(int[] arr, int i) {
		arr[i] = arr[i - 1] + 1;
		System.out.print(" "+arr[i]);
		printLn(arr, i + 1);
	}
}
public class MissingNumber {
	public static void main(String[] args) {
		int[] num = { 2, 1, 3, 5, 6, 7 };
		int n = num.length + 1;// 7
		int sumOftotal = sumOfTotal(n);
		int sumOfElements = sumOfElements(num);
		int missing = sumOftotal - sumOfElements;
		System.out.println("Missing:::" + missing);
	}

	private static int sumOfElements(int[] num) {
		int sum = 0;
		for (int i = 0; i < num.length; i++) {
			sum = sum + num[i];
		}
		return sum;

	}

	private static int sumOfTotal(int n) {
		int total = (n * (n + 1)) / 2;
		return total;
	}
}
package com.arrays;

public class Frequency {
	public static void main(String[] args) {
		// Initialize array
		int[] arr = new int[] { 1, 2, 8, 3, 2, 2, 2, 5, 1 };
		// Array fr will store frequencies of element
		int[] fr = new int[arr.length];
		int visited = -1;
		for (int i = 0; i < arr.length; i++) {
			int count = 1;
			for (int j = i + 1; j < arr.length; j++) {
				if (arr[i] == arr[j]) {
					count++;
					// To avoid counting same element again
					fr[j] = visited;
				}
			}
			if (fr[i] != visited)
				fr[i] = count;
		}

		// Displays the frequency of each element present in array
		System.out.println("---------------------------------------");
		System.out.println(" Element | Frequency");
		System.out.println("---------------------------------------");
		for (int i = 0; i < fr.length; i++) {
			if (fr[i] != visited)
				System.out.println("    " + arr[i] + "    |    " + fr[i]);
		}
		System.out.println("----------------------------------------");
	}
}

public class DuplicateElementInTwoAttrays {
	public static void main(String[] args) {
		int num1[] = new int[] { 2, 3, 4, 4, 5, 6,24};
		int num2[] = new int[] { 3, 6, 4, 8, 5, 6 };
		for (int i = 0; i < num1.length; i++) {
			for (int j = 0; j < num2.length; j++) {
				if (num1[i] == num2[j]) {
					System.out.println(num1[i]);
				}
			}
		}
	}
}
package com.arrays;

public class CopyArray {
	public static void main(String[] args) {        
        //Initialize array     
   int [] arr1 = new int [] {1, 2, 3, 4, 5};     
    //Create another array arr2 with size of arr1    
   int arr2[] = new int[arr1.length];    
   //Copying all elements of one array into another    
   for (int i = 0; i < arr1.length; i++) {     
       arr2[i] = arr1[i];     
   }      
    //Displaying elements of array arr1     
   System.out.println("Elements of original array: ");    
   for (int i = 0; i < arr1.length; i++) {     
      System.out.print(arr1[i] + " ");    
   }     
       
   System.out.println();    
       
   //Displaying elements of array arr2     
   System.out.println("Elements of new array: ");    
   for (int i = 0; i < arr2.length; i++) {     
      System.out.print(arr2[i] + " ");    
   }     
}    
}
public class SerilizableTest {
	public static void main(String[] args) throws IOException, FileNotFoundException, ClassNotFoundException {
		Employee employee = new Employee(1, "ramu", "ramu@gmail.com");
		File f = new File("employee.pdf");
		FileOutputStream fout = new FileOutputStream(f);
		ObjectOutputStream out = new ObjectOutputStream(fout);
		out.writeObject(employee);
		out.flush();
		System.out.println("success");

		FileInputStream fileInputStream = new FileInputStream("employee.pdf");
		ObjectInputStream inputStream = new ObjectInputStream(fileInputStream);

		Employee employee2 = (Employee) inputStream.readObject();
		System.out.println(employee2.getId());
		System.out.println(employee2.getName());
		System.out.println(employee2.getEmail());

	}
}
public class UsageClass
{
    public static void main(String[] args)
    {
        //Thread as an anonymous inner class
        new Thread()
        {
            @Override
            public void run()
            {
                System.out.println("Keep some task here.....");
            }
        }.start();
        //Thread as an anonymous inner class
        new Thread(new Runnable() {
            @Override
            public void run()
            {
                System.out.println("Keep some task here.....");
            }
        }).start();
    }
}
package com.multithreding;

class Thread_1 extends Thread {
	public void run() {
		for (int i = 1; i <= 10; i++) {
			System.out.println(Thread.currentThread().getName() + "=" + i);
			System.out.println();
		}
	}
}

class Thread_2 extends Thread {
	public void run() {
		for (int j = 11; j <= 20; j++) {
			System.out.println(Thread.currentThread().getName() + "=" + j);
		}
	}
}

public class Simulataneously_tread {

	public static void main(String[] args) {
		Thread_1 thread_1 = new Thread_1();
		Thread_2 thread_2 = new Thread_2();
		thread_1.setName("Thrad 1 ");
		thread_2.setName("Thrad 2 ");
		thread_1.start();
		thread_2.start();
		System.out.println("Priority of Thread_1=" + thread_1.getPriority());
		System.out.println("Priority of Thread_2=" + thread_2.getPriority());
		if ((thread_1.getPriority()) == thread_2.getPriority()) {
			System.out.println("Both treads are same priority");
		} else {
			System.out.println("Both treads are different priority");
		}

	}

}
public class AlphaPattern1 {
public static void main(String[] args) {
	for (int i = 'a'; i < 'f'; i++) {
		
		for (int j = 'a'; j <=i; j++) {
			System.out.print("("+(char)i+ ")");
		}
		System.out.println();
	}
}
}

public class AlphaPAttern2 {
public static void main(String[] args) {
	int alpha =97;
	 char ch =(char)alpha;
	for (int i = 0; i < 7; i++) {
		for (int j = 0; j <= i; j++) {
			System.out.print(" "+ch++);
		}
		
		System.out.println();
	}
}
}
package com.starandnumpattern;

public class AlphaPattern3 {
	public static void main(String abc[]) {
		for (int i = 0; i < 5; i++) // increase count 10 to 27 to print till
										// "z"
		{
			String strChars = "";
			int alphabet = 97; // ASCII value of A = 65 and a=97
			for (int j = 0; j <= i; j++) {
				strChars = strChars + (char) alphabet + " + ";
				alphabet++;
			}
			System.out.println("(" + strChars.substring(0, strChars.length() - 3) + ")");
		}
	}
}
package com.starandnumpattern;

public class NumPattern1 {
	public static void main(String[] args) {
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < 5; j++) {
				System.out.print(" " + i);
			}
			System.out.println();
		}
	}
}
package com.starandnumpattern;

public class NumPattern2 {
	public static void main(String[] args) {
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < 5; j++) {
				System.out.print(" " + j);
			}
			System.out.println();
		}
	}
}
package com.starandnumpattern;

public class NumPattern3 {
	public static void main(String[] args) {
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j <= i; j++) {
				System.out.print(" " + i);
			}
			System.out.println();
		}
	}
}
package com.starandnumpattern;

public class NumPattern4 {
	public static void main(String[] args) {
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j <= i; j++) {
				System.out.print(" " + j);
			}
			System.out.println();
		}
	}
}
package com.starandnumpattern;

public class NumPattern3 {
	public static void main(String[] args) {
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j <= i; j++) {
				System.out.print(" " + i);
			}
			System.out.println();
		}
	}
}

public class NumPattern6 {
	public static void main(String[] args) {
		for (int i = 0; i < 5; i++) {
			for (int j = i; j >= 0; j--) {
				System.out.print(" "+j);
			}
			System.out.println();
		}
	}
}
package com.starandnumpattern;

public class NumPattern7 {
	public static void main(String[] args) {
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j <=i; j++) {
				System.out.print(" "+j);
			}
			for (int j = i-1; j >0; j--) {
				System.out.print(" "+j);
			}
			System.out.println();
		}
	}
}
public class Star {
public static void main(String[] args) {
	System.out.println("Print star pattern");
	for (int i = 0; i < 5; i++) {
		System.out.println("*");
	}
}
}
package com.starandnumpattern;

public class Star2 {
	public static void main(String[] args) {
		System.out.println("4 X 4 star pattern");
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				System.out.print("* ");
			}
			System.out.println();
		}

	}
}
package com.starandnumpattern;

public class Star3 {
	public static void main(String[] args) {
		for (int i = 5; i > 0; i--) {
			for (int j = 5; j > i; j--) {
				System.out.print(" ");
			}
			for (int j = 1; j < 2 * i; j++) {
				System.out.print("*");
			}
			System.out.println();
		}
	}
}
package com.starandnumpattern;

public class Star4 {
	public static void main(String[] args) {
		for (int i = 0; i <= 5; i++) {
			for (int j = 0; j <= i; j++) {
				System.out.print("*");
			}
			System.out.println();
		}
	}
}
package com.starandnumpattern;

public class Star5 {
	public static void main(String[] args) {
		int k = 1;
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < k; j++) {
				System.out.print(" *");
			}
			k = k + 2;
			System.out.println();
		}
	}
}
package com.starandnumpattern;

public class Star6 {
	public static void main(String[] args) {
		for (int i = 5; i > 0; i--) {
			for (int j = 0; j < i; j++) {
				System.out.print(" *");
			}
			System.out.println();
		}
	}
}
package com.starandnumpattern;

public class Star7 {
public static void main(String[] args) {
	for (int i = 5; i >0; i--) {
		for (int j = 0; j < i; j++) {
			System.out.print(" ");
		}
		for (int j = 5; j >= i; j--) {
			System.out.print("*");
		}
		System.out.println();
	}
}
}
package com.starandnumpattern;

public class Star8 {
public static void main(String[] args) {
	for (int i = 0; i < 5; i++) {
		for (int j = 0; j <= i; j++) {
			System.out.print(" ");
		}
		for (int j = 5; j >i; j--) {
			System.out.print("*");
		}
		System.out.println();
	}
}
}
package com.starandnumpattern;

public class Star9 {
	public static void main(String[] args) {
		for (int i = 5; i > 0; i--) {
			for (int j = 0; j < i; j++) {
				System.out.print(" ");
			}
			for (int j = i; j <= 5; j++) {
				System.out.print(" *");
			}
			System.out.println();
		}
		for (int i = 0; i < 5; i++) {
			for (int j = i; j >=0; j--) {
				System.out.print(" ");
			}
			for (int j = 5; j >i; j--) {
				System.out.print(" *");
			}
			System.out.println();
		}
	}
}
package com.starandnumpattern;

public class TriangleStar {
	public static void main(String[] args) {
		for (int i = 0; i < 5; i++) {
			for (int j = 5; j > i; j--) {
				System.out.print(" ");
			}
			for (int j = 0; j < (2 * i - 1); j++) {
				System.out.print("*");
			}
			System.out.println();
		}

	}
}
public class CharacterReplace {
	public static void main(String[] args) {
		String str = "Java";
		char from = 'J';
		char to = 'k';
		char ch[] = str.toCharArray();
		StringBuilder builder = new StringBuilder();
		for (int i = 0; i < ch.length; i++) {
			if (ch[i] == from) {
				builder.append(to);
			} else {
				builder.append(str.charAt(i));
			}
		}
		System.out.println("::::" + builder.toString());
	}
}
public class LowToHigh {
	public static void main(String[] input) {
		lowToUp();
	}

	private static void lowToUp() {
		// TODO Auto-generated method stub
		char ch;
		int temp;
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter a Character in Uppercase : ");
		ch = scan.next().charAt(0);
		temp = (int) ch;
		temp = temp + 32;//UPPere to Lower
		//temp = temp - 32;//lower to upper
		ch = (char) temp;
		System.out.print("Equivalent Character in Lowercase = " + ch);
	}
}
public class Permutation {
	public static void main(String[] args) {
		String str = "kolle";
		permutation("", str);
	}

	private static void permutation(String start, String end) {

		if (end.length() <= 1) {
			System.out.println(start + end);
		} else {
			for (int i = 0; i < end.length(); i++) {
				String newStr = end.substring(0, i) + end.substring(i + 1);
				permutation(start + end.charAt(i), newStr);
			}
		}

	}
}
public class PrintNuminString {
	public static void main(String[] args) {
		isDigits();
		isCharacter();
	}

	private static void isCharacter() {
		System.out.println("\n**********");
		String str = "kolle1991@gmail.com";
		boolean flag = true;
		for (int i = 0; i < str.length(); i++) {
			flag = Character.isLetter(str.charAt(i));
			if (flag) {
				System.out.print(str.charAt(i));
			}
		}

		
	}

	private static void isDigits() {

		String str = "kolle1991@gmail.com";
		boolean flag = true;
		for (int i = 0; i < str.length(); i++) {
			flag = Character.isDigit(str.charAt(i));
			if (flag) {
				System.out.print(str.charAt(i));
			}
		}
	}
}
package com.string;

public class RevereEachWord {
	static void reverseEachWordOfString(String inputString) {
		String[] words = inputString.split(" ");
		int j;
		String reverseString = "";
		for (int i = 0; i < words.length; i++) {
			String word = words[i];
			String reverseWord = "";
			for (j = word.length() - 1; j >= 0; j--) {
				reverseWord = reverseWord + word.charAt(j);

			}
			reverseString = reverseString + reverseWord + " ";

		}
		System.out.println(reverseString);
	}

	public static void main(String[] args) {
		reverseEachWordOfString("I am Kolle siddu");
	}
}
package com.string;

public class ReverseAndSortString {
	public static void main(String[] args) {
		String str = "I Love India";
		String reverse = "";
		String sortOrder = "";
		String[] splitStr = str.split(" ");
		for (int i = splitStr.length - 1; i >= 0; i--) {
			reverse = reverse + splitStr[i];
		}
		System.out.println("Reverse::" + reverse);
		char[] ch = reverse.toCharArray();
		for (int i = 0; i < ch.length; i++) {
			for (int j = i + 1; j < ch.length; j++) {
				if (ch[i] > ch[j]) {
					char temp = ch[i];
					ch[i] = ch[j];
					ch[j] = temp;
				}
			}
		}
		for (int i = 0; i < ch.length; i++) {
			sortOrder = new String(ch);
		}
		System.out.println("SortOrder::::" + sortOrder.trim());
	}
}
package com.string;

public class ReverseString {
	public static void main(String[] args) {
		ReverseString re = new ReverseString();
		String reverseRecursion = re.recursionReverseString("siddaramu");
		System.out.println("::recursionReverseString::" + reverseRecursion);
		ReverseString.reverseStringUsingSB();
		ReverseString.reverseStringUsingForLoop("Siddu");
		System.out.println("\n::reverse string using recursion::");
		String recursion = ReverseString.reverseStringUsingRecursion("ramukolle");
		System.out.println(recursion);
	}

	private String recursionReverseString(String str) {
		String reverse = "";
		if (str.length() == 1) {
			return str;
		} else {
			reverse = reverse+str.charAt(str.length()-1)+recursionReverseString(str.substring(0,str.length()-1));
			return reverse;
		}

	}

	private static String reverseStringUsingRecursion(String st) {
		if ((null == st) || st.length() <= 1) {
			return st;
		} else {
			return reverseStringUsingRecursion(st.substring(1)) + st.charAt(0);

		}

	}

	private static void reverseStringUsingForLoop(String str) {
		System.out.println("::reverse string using for loop::");
		char[] ch = str.toCharArray();
		for (int i = ch.length - 1; i >= 0; i--) {
			System.out.print(ch[i]);
		}
	}

	private static void reverseStringUsingSB() {
		System.out.println("::reverse String using StringBuffere::");
		StringBuffer buffer = new StringBuffer("Kolle");
		System.out.println(buffer.reverse());
	}
}
package com.string;

public class SortString {

	public static void main(String[] args) {
		String str[] = { "kolle", "saritha", "pavan", "siddu", "thimmaiah", "alivellu", "siddu" };
		for (int i = 0; i < str.length; i++) {
			for (int j = i + 1; j < str.length; j++) {
				if (str[i].compareTo(str[j]) > 0) {
					String temp = str[i];
					str[i] = str[j];
					str[j] = temp;
				}
			}
		}
		System.out.println("Ascending Order::::");
		for (int i = 0; i < str.length; i++) {
			System.out.println(str[i]);
		}
		System.out.println("descending Order::::");
		for (int i = str.length - 1; i >= 0; i--) {
			System.out.println(str[i]);
		}
		int count = 1;
		System.out.println("Filter by name::::");
		for (int i = str.length - 1; i >= 0; i--) {
			if (str[i] == "siddu") {

				System.out.println(str[i] + "::" + count);
				count++;
			}

		}
	}

}
package com.string;

public class StringFormatter {
	public static void main(String[] args) {
		String name = "kolle";
		String formater1 = String.format("My name %s", name);
		System.out.println(formater1);

		String formater2 = String.format("My name %f", 20.00);
		System.out.println(formater2);

		String sf3 = String.format("value is %32.12f", 32.33434);// returns 12
																	// char
																	// fractional
																	// part
																	// filling
																	// with 0

		System.out.println(sf3);
	}
}

Swap Two string without using 3 variable:
public class SwpTwoStrings{
	public static void main(String[] args) {
		String str1 = "Hello";
		String str2 = "world";
		str1= str1+str2;
		str2 =str1.substring(0, str1.length()-str2.length());
		str1= str1.substring(str2.length());
		System.out.println(str1);
		System.out.println(str2);
	}
}
Reverse and sortiing words
public class StringRevesreAndSort {
	public static void main(String[] args) {
		String str= "i love india";
		int i;
		String s11="";
		String[] words= str.split(" ");
		String reverse="";
		for (i = words.length-1; i >=0; i--) {
			reverse = reverse+words[i]+" ";
		}
		System.out.println("reverse="+reverse);
		char[] ch=reverse.toCharArray();
		System.out.print("sort=");
		for (i = 0; i < ch.length; i++) {
			for (int j = i+1; j < ch.length; j++) {
				if (ch[i]>ch[j]) {
					char temp = ch[i];
					ch[i]=ch[j];
					ch[j]=temp;
				}
				
			}
		
		}
		
		for (i = 0; i <ch.length; i++) {
			s11 = new String(ch);
		}
		System.out.print(s11.trim());
	}
	}

Convert String to byte array and vice versa 
public class Test {
	public static void main(String a[]) {
		String msg = "Hi! Hello World";
		byte[] b = msg.getBytes();
		System.out.println("Converting String to byte array:" + b);
		//String str = b.toString();//[B@1db9742 
		String str = new String(b);
		System.out.println("Converting byte to string:"+str);//Hi! Hello World
	}
}

program to swap first and last character of each word in a string
class ExchangeFirstAndLast
{
	// create object.
	static BufferedReader br=new BufferedReader (new InputStreamReader (System.in));
	String sentence, reverse;
	int size;
 
	// default constructor
	ExchangeFirstAndLast() 
	{
		sentence="";
		reverse="";
		size=0;
	}
 
	// create function to read sentence.
	void ReadSentence()throws IOException
	{
		// enter the sentence here.
		System.out.print("Enter the sentence : ");
		
		sentence=br.readLine();
		size=sentence.length();
		
		// check the ending of sentence with full stop.
		if(sentence.charAt(size-1)!='.') 
		{ 
			// if it is not finished with '.' then add it in last.
			sentence=sentence+".";
			size=size+1;
		}
	}
 
	void exfirstlast()
	{
		// create string variable.
		String s1=""; 
		char ch;
		for(int i=0;i<size;i++)
		{
			ch=sentence.charAt(i);
			if(ch!=' ' && ch!='.')
			{
				s1=s1+ch;
			}
			else
			{
				// find length of the word.
				int l=s1.length(); 
				
				for(int j=0;j<l;j++)
				{
					// exchange the first alphabet with the last
					if(j==0) 
						ch=s1.charAt(l-1);
					// exchange the last alphabet with the first
					else if(j==(l-1)) 
						ch=s1.charAt(0);
					else
						ch=s1.charAt(j);
					reverse=reverse+ch;
				}
				reverse=reverse+" ";
				s1=""; 
			}
		}
	}
 
	// create display function.
	void display()
	{
		System.out.println("The Original Sentence is : "+sentence);
		System.out.println("The Changed Sentence is : "+reverse);
	}
 
	public static void main(String args[])throws IOException
	{
		ExchangeFirstAndLast ob=new ExchangeFirstAndLast();
		ob.ReadSentence();
		ob.exfirstlast();
		ob.display();
	}
}
Output

First run:
Enter the sentence : We are Inclusehelp providing knoeledge to everyone.
The Original Sentence is : We are Inclusehelp providing knoeledge to everyone.
The Changed Sentence is : eW era pnclusehelI grovidinp enoeledgk ot everyone 

Second run:
Enter the sentence : We are programmers
The Original Sentence is : We are programmers.
The Changed Sentence is : eW era srogrammerp
er of Notes	= 58
program to find occurrences of palindrome words in a string
class CheckPalindromeWords
{
	// create object of buffer class.
	static BufferedReader br=new BufferedReader (new InputStreamReader (System.in));
 
	// function to check palindrome
	boolean IsPalindrome(String s)
	{
		int l=s.length();
		String rev="";
		for(int i=l-1; i>=0; i--)
		{
			rev=rev+s.charAt(i);
		}
		if(rev.equals(s))
			return true;
		else
			return false;
	}
 
	public static void main(String args[])throws IOException
    {
		// create function of palindromewords.
		CheckPalindromeWords ob=new CheckPalindromeWords();
        
		// enter the sentence.
		System.out.print("Enter the sentence : ");
        String s=br.readLine();
        
        // to convert into upper case.
        s=s.toUpperCase();
 
        StringTokenizer str = new StringTokenizer(s,".?! ");
        int w=str.countTokens(); 
 
        String word[]=new String[w];
        for(int i=0;i<w;i++)
        {
            word[i]=str.nextToken();
        }
 
        int count=0;
        System.out.print("OUTPUT : ");
        for(int i=0; i<w; i++)
        {
            if(ob.IsPalindrome(word[i])==true)
            {
                count++;
                System.out.print(word[i]+" ");
            }
        }
 
        // To show the palindrome or not.
        if(count==0)
        System.out.println("No Palindrome Words");
        else
        System.out.println("\nNumber of Palindromic Words : "+count);
    }
}
Output

Enter the sentence : MOM AND DAD ARE MY BEST FRIENDS.
OUTPUT : MOM DAD 
Number of Palindromic Words : 2
public class RegexExample1{  
public static void main(String args[]){  
//1st way  
Pattern p = Pattern.compile(".s");//. represents single character  
Matcher m = p.matcher("as");  
boolean b = m.matches();  
  
//2nd way  
boolean b2=Pattern.compile(".s").matcher("as").matches();  
  
//3rd way  
boolean b3 = Pattern.matches(".s", "as");  
  
System.out.println(b+" "+b2+" "+b3);  
}}  
Output
true true true
class RegexExample2{  
public static void main(String args[]){  
System.out.println(Pattern.matches(".s", "as"));//true (2nd char is s)  
System.out.println(Pattern.matches(".s", "mk"));//false (2nd char is not s)  
System.out.println(Pattern.matches(".s", "mst"));//false (has more than 2 char)  
System.out.println(Pattern.matches(".s", "amms"));//false (has more than 2 char)  
System.out.println(Pattern.matches("..s", "mas"));//true (3rd char is s)  
}}  
class RegexExample3{  
public static void main(String args[]){  
System.out.println(Pattern.matches("[amn]", "abcd"));//false (not a or m or n)  
System.out.println(Pattern.matches("[amn]", "a"));//true (among a or m or n)  
System.out.println(Pattern.matches("[amn]", "ammmna"));//false (m and a comes more than once)  
}}  
class RegexExample4{  
public static void main(String args[]){  
System.out.println("? quantifier ....");  
System.out.println(Pattern.matches("[amn]?", "a"));//true (a or m or n comes one time)  
System.out.println(Pattern.matches("[amn]?", "aaa"));//false (a comes more than one time)  
System.out.println(Pattern.matches("[amn]?", "aammmnn"));//false (a m and n comes more than one time)  
System.out.println(Pattern.matches("[amn]?", "aazzta"));//false (a comes more than one time)  
System.out.println(Pattern.matches("[amn]?", "am"));//false (a or m or n must come one time)  
  
System.out.println("+ quantifier ....");  
System.out.println(Pattern.matches("[amn]+", "a"));//true (a or m or n once or more times)  
System.out.println(Pattern.matches("[amn]+", "aaa"));//true (a comes more than one time)  
System.out.println(Pattern.matches("[amn]+", "aammmnn"));//true (a or m or n comes more than once)  
System.out.println(Pattern.matches("[amn]+", "aazzta"));//false (z and t are not matching pattern)  
  
System.out.println("* quantifier ....");  
System.out.println(Pattern.matches("[amn]*", "ammmna"));//true (a or m or n may come zero or more times)  
  
}}  
class RegexExample5{  
public static void main(String args[]){  
System.out.println("metacharacters d....");\\d means digit  
  
System.out.println(Pattern.matches("\\d", "abc"));//false (non-digit)  
System.out.println(Pattern.matches("\\d", "1"));//true (digit and comes once)  
System.out.println(Pattern.matches("\\d", "4443"));//false (digit but comes more than once)  
System.out.println(Pattern.matches("\\d", "323abc"));//false (digit and char)  
  
System.out.println("metacharacters D....");\\D means non-digit  
  
System.out.println(Pattern.matches("\\D", "abc"));//false (non-digit but comes more than once)  
System.out.println(Pattern.matches("\\D", "1"));//false (digit)  
System.out.println(Pattern.matches("\\D", "4443"));//false (digit)  
System.out.println(Pattern.matches("\\D", "323abc"));//false (digit and char)  
System.out.println(Pattern.matches("\\D", "m"));//true (non-digit and comes once)  
  
System.out.println("metacharacters D with quantifier....");  
System.out.println(Pattern.matches("\\D*", "mak"));//true (non-digit and may come 0 or more times)  
  
}}  

class RegexExample6{  
public static void main(String args[]){  
System.out.println(Pattern.matches("[a-zA-Z0-9]{6}", "arun32"));//true  
System.out.println(Pattern.matches("[a-zA-Z0-9]{6}", "kkvarun32"));//false (more than 6 char)  
System.out.println(Pattern.matches("[a-zA-Z0-9]{6}", "JA2Uk2"));//true  
System.out.println(Pattern.matches("[a-zA-Z0-9]{6}", "arun$2"));//false ($ is not matched)  
}}  
class RegexExample7{  
public static void main(String args[]){  
System.out.println("by character classes and quantifiers ...");  
System.out.println(Pattern.matches("[789]{1}[0-9]{9}", "9953038949"));//true  
System.out.println(Pattern.matches("[789][0-9]{9}", "9953038949"));//true  
  
System.out.println(Pattern.matches("[789][0-9]{9}", "99530389490"));//false (11 characters)  
System.out.println(Pattern.matches("[789][0-9]{9}", "6953038949"));//false (starts from 6)  
System.out.println(Pattern.matches("[789][0-9]{9}", "8853038949"));//true  
  
System.out.println("by metacharacters ...");  
System.out.println(Pattern.matches("[789]{1}\\d{9}", "8853038949"));//true  
System.out.println(Pattern.matches("[789]{1}\\d{9}", "3853038949"));//false (starts from 3)  
  
}}  

public class RegexExample8{    
    public static void main(String[] args){    
        Scanner sc=new Scanner(System.in);  
        while (true) {    
            System.out.println("Enter regex pattern:");  
            Pattern pattern = Pattern.compile(sc.nextLine());    
            System.out.println("Enter text:");  
            Matcher matcher = pattern.matcher(sc.nextLine());    
            boolean found = false;    
            while (matcher.find()) {    
                System.out.println("I found the text "+matcher.group()+" starting at index "+    
                 matcher.start()+" and ending at index "+matcher.end());    
                found = true;    
            }    
            if(!found){    
                System.out.println("No match found.");    
            }    
        }    
    }    
}    
Output:

Enter regex pattern: java
Enter text: this is java, do you know java
I found the text java starting at index 8 and ending at index 12
I found the text java starting at index 26 and ending at index 30

How to Access private method other class?
class Test{
private void show(int a){
System.out.println(" private method called");
}
}
public class ModuloTest
{

public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
Test t = new Test();
Class c =t.getClass();
int a = 10;
Method method =c.getDeclaredMethod("show", null);
method.setAccessible(true);
System.out.println(method.invoke(t, args));
}
}
OUTPUT:
private method called
null

Different ways of defining Treads:
1) Thread As A Separate Concrete Class

class MyThread extends Thread{
	@Override
	public void run() {
		System.out.println("Thrad is running....");
	}
}

class Thread1{
	void thrad_1(){
		MyThread myThread = new MyThread();
		myThread.start();
	}
}


class Thread2{
	void thrad_2(){
		MyThread myThread = new MyThread();
		myThread.start();
	}
}

public class ConcretWayofThread {
	public static void main(String[] args) {
		Thread1 thread1 = new Thread1();
		thread1.thrad_1();
		
		Thread2 thread2 = new Thread2();
		thread2.thrad_2();
		
	}
}

2) Thread As A Nested Class or Static Inner Class
public class UsageClass
{
    //Thread class as a nested class or Static Inner Class of the usage class
    static class MyThread1 extends Thread
    {
        @Override
        public void run()
        {
            System.out.println("Keep some task here.....");
        }
    }
    //Another thread class as a nested class or Static Inner Class of the usage class
    static class MyThread2 implements Runnable
    {
        @Override
        public void run()
        {
            System.out.println("Keep some task here......");
        }
    }
    public static void main(String[] args)
    {
        //Using the MyThread1 and it's task
        MyThread1 thread1 = new MyThread1();
        thread1.start();
        //Using MyThread2 and it's task
        MyThread2 thread2 = new MyThread2();
        Thread t = new Thread(thread2);
        t.start();
    }
}

3) Thread As A Member Inner Class or Non-static Inner Class
public class UsageClass
{
    //Thread class as a member inner class or Non-static Inner Class of the usage class
    class MyThread1 extends Thread
    {
        @Override
        public void run()
        {
            System.out.println("Keep Some task here.....");
        }
    }
    //Another thread class as a member inner class or Non-Static Inner Class of the usage class
    class MyThread2 implements Runnable
    {
        @Override
        public void run()
        {
            System.out.println("Keep some task here.....");
        }
    }
    public static void main(String[] args)
    {
        //Using MyThread1 and it's task
        MyThread1 thread1 = new UsageClass().new MyThread1();
        thread1.start();
        //Using MyThread2 and it's task
        MyThread2 thread2 = new UsageClass().new MyThread2();
        Thread t = new Thread(thread2);
        t.start();
    }
}

4) Thread As A Local Inner Class
public class UsageClass
{
    public static void main(String[] args)
    {
        //Thread as a Local Inner Class
        class MyThread1 extends Thread
        {
            @Override
            public void run()
            {
                System.out.println("Keep some task here.....");
            }
        }
        //Another thread as a Local Inner Class
        class MyThread2 implements Runnable
        {
            @Override
            public void run()
            {
                System.out.println("Keep some task here.....");
            }
        }
        //Using MyThread1 and it's task
        MyThread1 thread1 = new MyThread1();
        thread1.start();
        //Using MyThread2 and it's task
        MyThread2 thread2 = new MyThread2();
        Thread t = new Thread(thread2);
        t.start();
    }
}
5) Thread As An Anonymous Inner Class
public class UsageClass
{
    public static void main(String[] args)
    {
        //Thread as an anonymous inner class
        new Thread()
        {
            @Override
            public void run()
            {
                System.out.println("Keep some task here.....");
            }
        }.start();
        //Thread as an anonymous inner class
        new Thread(new Runnable() {
            @Override
            public void run()
            {
                System.out.println("Keep some task here.....");
            }
        }).start();
    }
}
public class ThreadsInJava
{
    public static void main(String[] args)
    {
        Thread.State[] states = Thread.State.values();
        for (Thread.State state : states)
        {
            System.out.println(state);
        }
    }
}

Can we start a thread twice
No. After starting a thread, it can never be started again. If you does so, an IllegalThreadStateException is thrown. In such case, thread will run once but for second time, it will throw exception.
public class TestThreadTwice1 extends Thread{  
 public void run(){  
   System.out.println("running...");  
 }  
 public static void main(String args[]){  
  TestThreadTwice1 t1=new TestThreadTwice1();  
  t1.start();  
  t1.start();  
 }  
}
OUTPUT:
Exception in thread "main" running...
java.lang.IllegalThreadStateException

//without lambda, Drawable implementation using anonymous class 
interface Display {
	void show();
}
public class WithoutLamda {
	public static void main(String[] args) {
		Display display = new Display() {
			@Override
			public void show() {
				System.out.println("Displaying.....");
			}
		};
		display.show();
	}
}

//Now, we are implementing the above example with the help of lambda expression.
interface Display {
	void show();
}
public class WithoutLamda {
	public static void main(String[] args) {
		String mag = "displaying";
		Display display = ()->{
			System.out.println(mag);
		};
		display.show();
	}
}
//A lambda expression can have zero or any number of arguments.
interface Sayable {
	String say();
}
public class WithoutLamda {
	public static void main(String[] args) {
		Sayable say = () -> {
			return "displaying...";
		};
		System.out.println(say.say());
	}
}

//single parameter

interface Sayable {
	public String say(String msg);
}

public class WithoutLamda {
	public static void main(String[] args) {
		// Lambda expression with single parameter
		Sayable sayable = (msg) -> {
			return msg;
		};
		System.out.println(sayable.say("displaying..."));
		// omit functional paranthesis
		Sayable sayable2 = msg -> {
			return msg;
		};
		System.out.println(sayable2.say("displaying 2"));
	}
}


//multiple parameters
interface Addable {
	public int add(int a, int b);

}

public class WithoutLamda {
	public static void main(String[] args) {
		Addable addable = (int a, int b) -> {
			return a + b;
		};
		System.out.println(addable.add(10, 40));
		Addable addable1 = (a, b) -> {
			return a - b;
		};
		System.out.println(addable1.add(23, 2));
		addable1.add(20, 30);
		Addable mlt = (int c, int d) -> (c * d);
		System.out.println(mlt.add(10, 10));
	}
}

//forEach 

class WithoutLamda {
	public static void main(String[] args) {
		ArrayList<String> al = new ArrayList<>();
		al.add("string 1");
		al.add("string 2");
		al.add("string 3");
		al.add("string 1");
		al.add(null);
		al.forEach((n)->
		System.out.println(n)
				);
	}
}

//creating thread
program to write and read a JSON File
Step 1: To write JSON File
public class Test {
	public static void main(String[] args) {

		JSONObject obj = new JSONObject();
		
		//JSONObject class creates a json object,
		//provides a put function to insert the details into json object
		obj.put("name", "Abhishek Sharma");
		obj.put("department","B.E");
		obj.put("branch", "C.S.E");
		obj.put("year", 3);

		JSONArray list = new JSONArray();
		
		//This is a JSON Array List , 
		//It creates an array and then add the values in it  
		list.add("remark 1");
		list.add("remark 2");
		list.add("remark 3");

		obj.put("remarks", list);//adding the list to our JSON Object

		try (FileWriter file = new FileWriter("g:\\newfile.json")) {
			//File Writer creates a file in write mode at the given location 
			file.write(obj.toJSONString());

			//write function is use to write in file,
			//here we write the Json object in the file
			file.flush();

		}
		catch (IOException e) {
			e.printStackTrace();
		}

		System.out.println(obj);
		//to print our JSon object 
	}

}
Output:  

To read JSON File
public class Test {
public static void main(String[] args) {
		
		JSONParser parser = new JSONParser();
		//JsonParser to convert JSON string into Json Object

		try {
			Object obj = parser.parse(new FileReader("g:\\newfile.json"));
			//parsing the JSON string inside the file that we created earlier.

			JSONObject jsonObject = (JSONObject) obj;
			System.out.println(jsonObject);
			//Json string has been converted into JSONObject

			String name = (String) jsonObject.get("name");
			System.out.println(name);

			String department = (String) jsonObject.get("department");
			System.out.println(department);

			String branch = (String) jsonObject.get("branch");
			System.out.println(branch);

			long year = (long) jsonObject.get("year");
			System.out.println(year);
			//Displaying values from JSON OBject by using Keys

			JSONArray remarks = (JSONArray) jsonObject.get("remarks");
			//converting the JSONObject into JSONArray as remark was an array.
			Iterator<String> iterator = remarks.iterator();
			//Iterator is used to access the each element in the list 
			//loop will continue as long as there are elements in the array.
			while (iterator.hasNext()) {
				System.out.println(iterator.next());
				//accessing each elemnt by using next function.
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ParseException e) {
			e.printStackTrace();
		}
	}

}
Output
 
program to read a CSV File
CSV is a Comma separated Value file where each value in the file is separated by a comma.
public class Test {
	public static void main(String[] args) {
		
		//this holds the Csv file location
		String csvFile = "H:/CSVFiles/csvfile.csv";
		String line = "";
		//as we have to split the file from commas
		String splitBy = ","; 
		
		//Buffered reader class is a java.io class which reads 
		//a character input file ,it reads lines and arrays 
		//File reader opens the given file in read mode 
		try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {
			//readline function is use to read a line form the file
			while ((line = br.readLine()) != null) {
			//loop will continue until the line ends 
			String[] name = line.split(splitBy);
			//split function use to split the words in the line by commas
			System.out.println("FirstName: "+ name[0]+ " , LastName:" + name[1]+ " , Mobile:" + name[2]+ " , Email:" + name[3]);
			//this is to print the each csv line 
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
}
Output
 
Searching in the List
Iterator<String> it = stringsToSearch.iterator();
Set<String> matchingStrings = new HashSet<>(Arrays.asList("a", "c", "9"));
 
List<String> result = new ArrayList<>();
while (it.hasNext()) {
    String s = it.next();
    if (matchingStrings.contains(s)) {
        result.add(s);
    }
}
Removing Elements
Set<String> matchingStrings
 = HashSet<>(Arrays.asList("a", "b", "c", "d", "e", "f"));
 
Iterator<String> it = stringsToSearch.iterator();
while (it.hasNext()) {
    if (matchingStrings.contains(it.next())) {
        it.remove();
    }
}

Immutable ArrayList
@Test(expected = UnsupportedOperationException.class)
public void givenUsingTheJdk_whenUnmodifiableListIsCreated_thenNotModifiable() {
    List<String> list = new ArrayList<String>(Arrays.asList("one", "two", "three"));
    List<String> unmodifiableList = Collections.unmodifiableList(list);
    unmodifiableList.add("four");
}

class ArrayListDemo
{
public static void main(String[] args)
{
ArrayList<String> list1 = new ArrayList<String>();

list1.add("ONE");

list1.add("TWO");

list1.add("THREE");

list1.add("FOUR");

System.out.println(list1);     //Output : [ONE, TWO, THREE, FOUR]

ArrayList<String> list2 = new ArrayList<String>();

list2.add("THREE");

list2.add("FOUR");

list2.add("FIVE");

list2.add("SIX");

System.out.println(list2);     //Output : [THREE, FOUR, FIVE, SIX]

list1.addAll(list2);   //Appends list2 at the end of list1

System.out.println(list1);    //Output : [ONE, TWO, THREE, FOUR, THREE, FOUR, FIVE, SIX]

list1.removeAll(list2);    //Removes the elements of list1 which are also elements of list2

System.out.println(list1);    //Output : [ONE, TWO]

list1.addAll(2, list2);    //Inserts all elements of list2 into list1 at position 2

System.out.println(list1);    //Output : [ONE, TWO, THREE, FOUR, FIVE, SIX]

list1.retainAll(list2);    //Retains all elements of list1 which are also elements of list2

System.out.println(list1);    //Output : [THREE, FOUR, FIVE, SIX]

list1.clear();      //Removes all elements of list1

System.out.println(list1);   //Output : []
}
}
How to convert an array to ArrayList in java
ArrayList<T> arraylist= new ArrayList<T>(Arrays.asList(arrayname));
public class ArrayToArrayList {
     public static void main(String[] args) {

	  /* Array Declaration and initialization*/
	  String citynames[]={"Agra", "Mysore", "Chandigarh", "Bhopal"};

	  /*Array to ArrayList conversion*/
	  ArrayList<String> citylist= new ArrayList<String>(Arrays.asList(citynames));

	  /*Adding new elements to the converted List*/
	  citylist.add("New City2");
	  citylist.add("New City3");

	  /*Final ArrayList content display using for*/
	  for (String str: citylist)
	  {
		System.out.println(str);
       	  }
      }
}
Collections.addAll method
public class Example2 {
	public static void main(String[] args) {

	    /* Array Declaration and initialization*/
	    String array[]={"Hi", "Hello", "Howdy", "Bye"};

	    /*ArrayList declaration*/
	    ArrayList<String> arraylist= new ArrayList<String>();

	    /*Conversion*/
	    Collections.addAll(arraylist, array);

	    /*Adding new elements to the converted List*/
	    arraylist.add("String1");
	    arraylist.add("String2");

	    /*Display array list*/
	    for (String str: arraylist)
	    {
	 	System.out.println(str);
	    }
	}
}
Manual way of doing things
public class Details {
	public static void main(String[] args) {

	    /*ArrayList declaration*/
	    ArrayList<String> arraylist= new ArrayList<String>();

	    /*Initialized Array*/
	    String array[] = {"Text1","Text2","Text3","Text4"};   

	    /*array.length returns the current number of 
	     * elements present in array*/
	    for(int i =0;i<array.length;i++)
            {

	         /* We are adding each array's element to the ArrayList*/
		 arraylist.add(array[i]);
	    }

	    /*ArrayList content*/
	    for(String str: arraylist)
	    {
	         System.out.println(str);
	    }
      }
}
EX
public class RemoveNonNumeric {
 
    public static void main(String[] args) {
 
          String[] str = {"Java4s","Siva"}; 
 
          List<String> list = Arrays.asList(str);
 
          System.out.println(list);
 
     }
}
EX2;
public class StringArrayTest
{
   public static void main(String[] args)
   {
      String[] words = {"ace", "boom", "crew", "dog", "eon"};
  
      List<String> wordList = Arrays.asList(words);
  
      for (String e : wordList)
      {
         System.out.println(e);
      }
   }
}
EX3
class GFG {
	public static void main(String[] args) {
		String[] geeks = { "Rahul", "Utkarsh", "Shubham", "Neelam" };

		List<String> al = new ArrayList<String>();
		Collections.addAll(al, null);

		System.out.println(al);
	}
}
RunTime Error
Exception in thread "main" java.lang.NullPointerException
    at java.util.Collections.addAll(Collections.java:5401)
    at GFG.main(File.java:11)
Performance. Does the addAll method have a performance advantage over a for-loop that calls add? I tested this in a benchmark. I measured both constructs.
Result:I found that using addAll on a short String array was consistently faster.

public class Program {
    public static void main(String[] args) {

        String[] elements = { "cat", "dog", "fish" };

        long t1 = System.currentTimeMillis();

        // Version 1: use addAll method.
        for (int i = 0; i < 10000000; i++) {
            ArrayList<String> list = new ArrayList<>();
            Collections.addAll(list, elements);
            if (list.size() != 3) {
                return;
            }
        }

        long t2 = System.currentTimeMillis();

        // Version 2: use for-loop and add.
        for (int i = 0; i < 10000000; i++) {
            ArrayList<String> list = new ArrayList<>();
            for (String element : elements) {
                list.add(element);
            }
            if (list.size() != 3) {
                return;
            }
        }

        long t3 = System.currentTimeMillis();

        // ... Result.
        System.out.println(t2 - t1);
        System.out.println(t3 - t2);
    }
}

Results

423 ms,    Collections.addAll
463 ms,    ArrayList add
EX
public class AddAllTest {
	public static void main(String[] args) {
		String[] str1 = { "kolle", "sari" };
		String[] str2 = { "amma", "nanna" };
		List<String> ll = new ArrayList<>();
		Collections.addAll(ll, str1);
		Collections.addAll(ll, str2);
		System.out.println(ll); [kolle, sari, amma, nanna]
		for (String string : ll) {
			int i = string.length();
			if (i%2 !=0) {
				System.out.println(string+”,”);// kolle,nanna
			}
		}	
	}
}
ArrayList to Array Conversion in Java
EX:1
class GFG
{
    public static void main (String[] args)
    {
        List<Integer> al = new ArrayList<Integer>();
        al.add(10);
        al.add(20);
        al.add(30);
        al.add(40);
        Object[] objects = al.toArray();
        // Printing array of objects
        for (Object obj : objects)
            System.out.print(obj + " ");
    }
}
EX2:
class GFG
{
    public static void main (String[] args)
    {
        List<Integer> al = new ArrayList<Integer>();
        al.add(10);
        al.add(20);
        al.add(30);
        al.add(40);
 
        // Error: incompatible types: Object[]
        // cannot be converted to Integer[]
        Integer[] objects = al.toArray();
 
        for (Integer obj : objects)
            System.out.println(obj);
    }
}
Ex3
class GFG
{
    public static void main(String[] args)
    {
        List<Integer> al = new ArrayList<Integer>();
        al.add(10);
        al.add(20);
        al.add(30);
        al.add(40);
 
        Integer[] arr = new Integer[al.size()];
        arr = al.toArray(arr);
 
        for (Integer x : arr)
            System.out.print(x + " ");
    }
}
EX:
class GFG
{
    public static void main(String[] args)
    {
        List<Integer> al = new ArrayList<Integer>();
        al.add(10);
        al.add(20);
        al.add(30);
        al.add(40);
 
        Integer[] arr = new Integer[al.size()];
        arr = al.toArray(arr);
 
        for (Integer x : arr)
            System.out.print(x + " ");
    }
}
EX;
public class GFG {
	public static void main(String[] args) {
		System.out.println("=====================");
		List<String> al = new ArrayList<String>();
		al.add("Apple");
		al.add("Banana");
		al.add("Orange");
		System.out.println(al.toString());

	}
}
EX:
public class GFG {
	public static void main(String[] args) {
        ArrayList<String> myList = new ArrayList<String>();
        myList.add("Boke");
        myList.add("Bus");
        myList.add("Car");
        String[] myArray =(String[]) myList.toArray();
       for (String string : myArray) {
		System.out.println(string);
	}
    }
}
Output:
Exception in thread "main" java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.String;
	at GFG.main(GFG.java:10) import java.util.ArrayList;
import java.util.List;

public class GFG {
	public static void main(String[] args) {
        ArrayList<String> myList = new ArrayList<String>();
        myList.add("Boke");
        myList.add("Bus");
        myList.add("Car");
       Object[] myArray =myList.toArray();
       for ( Object string : myArray) {
		System.out.println(string);
	}
    }
}
Output:
Boke
Bus
Car
EX;
public class GFG {
	public static void main(String[] args) {
        ArrayList<Integer> myList = new ArrayList<Integer>();
        myList.add(Integer.valueOf(5));
        myList.add(Integer.valueOf(7));
        myList.add(Integer.valueOf(15));
        Integer[] myArray = myList.toArray(new Integer[0]);
        for (Integer myInt: myArray) {
           System.out.println(myInt);
        }
    }
}
OUTPUT:
5
7
15
Convert ArrayList to Array Using Streams in Java 8
public class GFG {
	public static void main(String[] args) {
        ArrayList<Integer> myList = new ArrayList<Integer>();
        myList.add(Integer.valueOf(5));
        myList.add(Integer.valueOf(7));
        myList.add(Integer.valueOf(15));
        Integer[] myArray = myList.stream().toArray(Integer[]::new);
        for (Integer myInt : myArray) {
           System.out.println(myInt);
        }
    }
}
OUTPUT:
5
7
15
How to count duplicated items in Java List
EX:
public class GFG {
	public static void main(String[] args) {

		List<String> list = new ArrayList<String>();
		list.add("a");
		list.add("b");
		list.add("c");
		list.add("d");
		list.add("b");
		list.add("c");
		list.add("a");
		list.add("a");
		list.add("a");

		System.out.println("\nExample 1 - Count 'a' with frequency");
		System.out.println("a : " + Collections.frequency(list, "a"));

		System.out.println("\nExample 2 - Count all with frequency");
		Set<String> uniqueSet = new HashSet<String>(list);
		for (String temp : uniqueSet) {
			System.out.println(temp + ": " + Collections.frequency(list, temp));
		}

}
}
OUTPUT:
Example 1 - Count 'a' with frequency
a : 4


Example 2 - Count all with frequency
a: 4
b: 2
c: 2
d: 1

EX:
public class GFG {
	public static void main(String[] args) {

		List<String> list = new ArrayList<String>();
		list.add("a");
		list.add("b");
		list.add("c");
		list.add("d");
		list.add("b");
		list.add("c");
		list.add("a");
		list.add("a");
		list.add("a");

		Map<String, Integer> map = new HashMap<String, Integer>();
		for (String temp : list) {
		Integer count = map.get(temp);
		map.put(temp, (count == null) ? 1 : count + 1);
		}
		for (Map.Entry<String,Integer> entry : map.entrySet()) {
			if (entry.getValue()>1) {
				System.out.println("Key:"+entry.getKey()+" "+"value:"+entry.getValue());
			}
			
		}
}
}
OUTput:
Key:a value:4
Key:b value:2
Key:c value:2
Key:d value:1
Remove Duplicate from arraylist:
public class GFG {
	public static void main(String[] args) {
		List<String> list = new ArrayList<String>();
		list.add("a");
		list.add("b");
		list.add("c");
		list.add("d");
		list.add("b");
		list.add("c");
		list.add("a");
		list.add("a");
		list.add("a");

		List<String> list2 = new ArrayList<>();
		for (String string : list) {
			if (!list2.contains(string)) {
			list2.add(string);
			}
		}
		System.out.println(list2);
}
}
OUTPUT: [a, b, c, d]
EX:
public class GFG {
	public static void main(String[] args) {
		String[] arr ={"kolle","kolle","sari","tej"};
		List<String> list = new ArrayList<String>(Arrays.asList(arr));
		List<String> list2 = new ArrayList<>();
		for (String string : list) {
			if (!list2.contains(string)) {
			list2.add(string);
			}
		}
		System.out.println(list2);
}
}
OUTPUT:
[kolle, sari, tej]
EX:
public class GFG {
	public static void main(String[] args) {
		String[] arr ={"kolle","kolle","sari","tej"};
		String[] arr2 ={"kolle","sari","sari","tej"};
		List<String> list = new ArrayList<String>();
		list.addAll(Arrays.asList(arr));
		list.addAll(Arrays.asList(arr2));
		List<String> list2 = new ArrayList<>();
		for (String string : list) {
			if (!list2.contains(string)) {
			list2.add(string);
			}
		}
		System.out.println(list2);
}
}
OUTpUT:
[kolle, sari, tej]
EX;
Duplicate occurance in list
public class GFG {
	public static void main(String[] args) {

		List<String> list = new ArrayList<String>();
		list.add("a");
		list.add("b");
		list.add("c");
		list.add("d");
		list.add("b");
		list.add("c");
		list.add("a");
		list.add("a");
		list.add("a");

		Map<String, Integer> map = new HashMap<String, Integer>();
		for (String temp : list) {
			if (map.containsKey(temp)) {
				map.put(temp, map.get(temp) + 1);
			} else {
				map.put(temp, 1);
			}
		}
		for (Map.Entry<String, Integer> entry : map.entrySet()) {
			if (entry.getValue() > 1) {
				System.out.println("Key:" + entry.getKey() + " " + "value:" + entry.getValue());
			}

		}

	}
}
Output:
Key:a value:4
Key:b value:2
Key:c value:2
EX:
public class GFG {
	public static void main(String[] args) {
        String s ="kolle";
		List<String> list = new ArrayList<String>(Arrays.asList(s.split("")));
				Map<String, Integer> map = new HashMap<String, Integer>();
		for (String temp : list) {
			if (map.containsKey(temp)) {
				map.put(temp, map.get(temp) + 1);
			} else {
				map.put(temp, 1);
			}
		}
		for (Map.Entry<String, Integer> entry : map.entrySet()) {
			if (entry.getValue() > 1) {
				System.out.println("Key:" + entry.getKey() + " " + "value:" + entry.getValue());
			}

		}

	}
}
Count Space and letter in String
public class GFG {
	public static void main(String[] args) {
        String s ="i am siddaramu kolle";
		List<String> list = new ArrayList<String>(Arrays.asList(s.split("")));
				Map<String, Integer> map = new HashMap<String, Integer>();
		for (String temp : list) {
			if (map.containsKey(temp)) {
				map.put(temp, map.get(temp) + 1);
			} else {
				map.put(temp, 1);
			}
		}
		for (Map.Entry<String, Integer> entry : map.entrySet()) {
			if (entry.getValue() >1) {
				System.out.println("Key:" + entry.getKey() + " " + "value:" + entry.getValue());
			}

		}

	}
}
Key:  value:3
Key:a value:3
Key:d value:2
Key:i value:2
Key:l value:2
Key:m value:2
How to Convert List to Map in Java 
EX:
Account.java
public class Account {
 
 private int accNo;
 private String accType;
 private String accStatus;
 
 public Account(int accountNo, String accountType, String accountStatus){
 accNo = accountNo;
 accType = accountType;
 accStatus = accountStatus;
 }
 
 public int getAccNo() {
 return accNo;
 }
 public void setAccNo(int accNo) {
 this.accNo = accNo;
 }
 public String getAccType() {
 return accType;
 }
 public void setAccType(String accType) {
 this.accType = accType;
 }
 public String getAccStatus() {
 return accStatus;
 }
 public void setAccStatus(String accStatus) {
 this.accStatus = accStatus;
 } 
}
ListtoMap.java
public class ListtoMap {
 
 public static void main(String[] args) {
 
 List<Account> li = new ArrayList<Account>();
 
 Account ac1= new Account(100,"Savings","Open");
 Account ac2= new Account(101,"Checking","Closed");
 
 li.add(ac1);
 li.add(ac2);
 
 // Before Java 8
 Map<Integer, String> beforeJava8 = new HashMap<>(); 
 for (Account acc: li) {
 beforeJava8.put(acc.getAccNo(), acc.getAccStatus()); 
 } 
     System.out.println("Before Java 8 "+beforeJava8);     
     
     
     
 // Java 8 Using Lambda expression and Stream API
 Map<Integer, String> map = li.stream().collect(Collectors.toMap(x -> x.getAccNo()  , x -> x.getAccStatus()));
 System.out.println("Java 8 "+map);
 }
}
Output
Before Java 8 {100=Open, 101=Closed}
Java 8  {100=Open, 101=Closed}
EX;
public class ListtoMap {
	public static void main(String[] args) {
		List<String> list = new ArrayList<>();
		list.add("kolle");
		list.add("siddu");
		list.add("tej");
		System.out.println("Before Converting" + list);
		Map<String, Integer> map = new HashMap<>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i), i);
		}
		System.out.println("Aftre converting"+map);
	}
}
Output:
Before Converting[kolle, siddu, tej]
Aftre converting{kolle=0, tej=2, siddu=1}
EX;
class Color
{
	private String name;
	private String code;

	public Color(String name, String code) {
		this.name = name;
		this.code = code;
	}

	@Override
	public String toString() {
		return name + "=" + code;
	}

	public String getName() {
		return name;
	}

	public String getCode() {
		return code;
	}
}

class ListToMap
{
	// Program to convert list to map in Java
	public static void main(String[] args)
	{
		// input list of Color objects
		List<Color> colors = new ArrayList<Color>();

		colors.add(new Color("RED", "#FF0000"));
		colors.add(new Color("BLUE", "#0000FF"));
		colors.add(new Color("GREEN", "#008000"));

		// construct key-value pairs from name and code fields of Color
		Map<String, String> map = colors.stream()
									.collect(Collectors.toMap(Color::getName, 
															Color::getCode));

		System.out.println("List : " + colors);
		System.out.println("Map  : " + map);
	}
}
Same Without using java8
class Color
{
	public String name;
	public String code;

	public Color(String name, String code) {
		this.name = name;
		this.code = code;
	}

	@Override
	public String toString() {
		return name + "=" + code;
	}
	
	public String getName() {
		return name;
	}

	public String getCode() {
		return code;
	}
}

class ListToMap
{
	// program to convert list to map in Java
	public static void main(String[] args)
	{
		// input list of Objects
		List<Color> colors = new ArrayList<Color>();

		colors.add(new Color("RED", "#FF0000"));
		colors.add(new Color("BLUE", "#0000FF"));
		colors.add(new Color("GREEN", "#008000"));

		Map<String, String> map = new HashMap<>();
		
		// construct key-value pairs from name and code fields of Color
		for (Color ob : colors) {
			map.put(ob.getName(), ob.getCode());
		}

		System.out.println("List : " + colors);
		System.out.println("Map  : " + map);
	}
}

List : [RED=#FF0000, BLUE=#0000FF, GREEN=#008000]
Map  : {RED=#FF0000, BLUE=#0000FF, GREEN=#008000}
How Fail-Fast Iterators Work?
public class FailFastIteratorExample {
	public static void main(String[] args) {
		// Creating an ArrayList of integers

		ArrayList<Integer> list = new ArrayList<Integer>();

		// Adding elements to list

		list.add(1452);

		list.add(6854);

		list.add(8741);

		list.add(6542);

		list.add(3845);

		// Getting an Iterator from list

		Iterator<Integer> it = list.iterator();

		while (it.hasNext()) {
			Integer integer = (Integer) it.next();

			list.add(8457); // This will throw ConcurrentModificationException
		}
	}
}
Output :
Exception in thread "main" java.util.ConcurrentModificationException
	at java.util.ArrayList$Itr.checkForComodification(Unknown Source)
	at java.util.ArrayList$Itr.next(Unknown Source)
	at pack1.MainClass.main(MainClass.java:32)
Fail-Safe Iterators In Java :
public class FailSafeIteratorExample 
{   	
	public static void main(String[] args) 
	{
		//Creating a ConcurrentHashMap
		
		ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<String, Integer>();
		
		//Adding elements to map
		
		map.put("ONE", 1);
		
		map.put("TWO", 2);

		map.put("THREE", 3);
		
		map.put("FOUR", 4);
		
		//Getting an Iterator from map
		
		Iterator<String> it = map.keySet().iterator();
		
		while (it.hasNext())
		{
			String key = (String) it.next();
			
			System.out.println(key+" : "+map.get(key));
			
			map.put("FIVE", 5);     //This will not be reflected in the Iterator
		}
	}	
}
Output :

TWO : 2
FOUR : 4
ONE : 1
THREE : 3
How To Synchronize ArrayList, HashSet And HashMap In Java?
EX:
public class SynchronizedListExample 
{   
	public static void main(String[] args) 
	{
		//Creating non synchronized ArrayList object
		
		ArrayList<String> list = new ArrayList<String>();
		
		//Adding elements to list
		
		list.add("JAVA");
		
		list.add("STRUTS");
		
		list.add("JSP");
		
		list.add("SERVLETS");
		
		list.add("JSF");
		
		//Getting synchronized list
		
		List<String> synchronizedList = Collections.synchronizedList(list);
		
		//you must use synchronized block while iterating over synchronizedList
		
		synchronized (synchronizedList) 
		{
			Iterator<String> it = synchronizedList.iterator();
			
			while (it.hasNext()) 
			{
				System.out.println(it.next());
			}
		}
	}	
}
OUTPUT :

JAVA
STRUTS
JSP
SERVLETS
JSF

EX;2
public class SynchronizedHashSetExample 
{   
	public static void main(String[] args) 
	{
		//Creating non synchronized HashSet object
		
		HashSet<String> set = new HashSet<String>();
		
		//Adding elements to set
		
		set.add("JAVA");
		
		set.add("STRUTS");
		
		set.add("JSP");
		
		set.add("SERVLETS");
		
		set.add("JSF");
		
		//Getting synchronized set
		
		Set<String> synchronizedSet = Collections.synchronizedSet(set);
		
		//you must use synchronized block while iterating over synchronizedSet
		
		synchronized (synchronizedSet) 
		{
			Iterator<String> it = synchronizedSet.iterator();
			
			while (it.hasNext()) 
			{
				System.out.println(it.next());
			}
		}
	}	
}
Output :

SERVLETS
STRUTS
JSP
JAVA
JSF

EX3:
public class SynchronizedHashMapExample 
{   
	public static void main(String[] args) 
	{
		//Creating HashMap object which is not synchronized
		
		HashMap<String, Integer> map = new HashMap<String, Integer>();
		
		//Adding elements to map
		
		map.put("ONE", 1);
		
		map.put("TWO", 2);
		
		map.put("THREE", 3);
		
		map.put("FOUR", 4);
		
		map.put("FIVE", 5);
		
		//Getting synchronized map
		
		Map<String, Integer> synchronizedMap = Collections.synchronizedMap(map);
		
		Set<String> keySet = synchronizedMap.keySet();
		
		System.out.println("Keys.............");
		
		//While iterating over synchronizedMap, you must use synchronized block.
		
		synchronized (synchronizedMap) 
		{
			Iterator<String> it = keySet.iterator();
			
			while (it.hasNext()) 
			{
				System.out.println(it.next());
			}
		}
		
		Collection<Integer> values = synchronizedMap.values();
		
		System.out.println("Values.............");
		
		//While iterating over synchronizedMap, you must use synchronized block.
		
		synchronized (synchronizedMap) 
		{
			Iterator<Integer> it = values.iterator();
			
			while (it.hasNext()) 
			{
				System.out.println(it.next());
			}
		}
	}	
}
Output :

Keys………….
ONE
TWO
THREE
FOUR
FIVE
Values………….
1
2
3
4
5



App:1
Conversion of List to Map in Java
Employee.java
public class Employee {
 
    // member variables
    private int empId;
    private String empName;
    private int empAge;
    private String empDesignation;
 
    // 4-arg parameterized constructor
    public Employee(int empId, String empName, int empAge, String empDesignation) {
        super();
        this.empId = empId;
        this.empName = empName;
        this.empAge = empAge;
        this.empDesignation = empDesignation;
    }
 
    // getter &amp; setter
    public int getEmpId() {
        return empId;
    }
    public void setEmpId(int empId) {
        this.empId = empId;
    }
    public String getEmpName() {
        return empName;
    }
    public void setEmpName(String empName) {
        this.empName = empName;
    }
    public int getEmpAge() {
        return empAge;
    }
    public void setEmpAge(int empAge) {
        this.empAge = empAge;
    }
    public String getEmpDesignation() {
        return empDesignation;
    }
    public void setEmpDesignation(String empDesignation) {
        this.empDesignation = empDesignation;
    }
 
    // override toString()
    @Override
    public String toString() {
        return "Employee [empId=" + empId + ", empName=" + empName
                + ", empAge=" + empAge + ", empDesignation=" + empDesignation
                + "]";
    }
}
Convert List to Map with 2-attributes of POJO as Key-Value pair
public class ConvertListToMap {
 
    public static void main(String[] args) {
 
        // create ArrayList
        List<Employee> employees = new ArrayList<Employee>();
 
        // add employee objects to list
        employees.add(new Employee(1001, "SJ", 18, "Consultant"));
        employees.add(new Employee(1002, "AK", 20, "Enginner"));
        employees.add(new Employee(1003, "PJ", 23, "Developer"));
 
        // printing to console - List of Employee
        System.out.println("List of Employee : \n" + employees);
 
        // create Map<Integer, String> to store List of employees
        Map<Integer, String> mapOfEmployees = new HashMap<Integer, String>();
 
        // convert List<Employee> to Map<empId, empName>
        for(Employee employee : employees) {
            mapOfEmployees.put(employee.getEmpId(), employee.getEmpName());
        }
 
        // printing to console - Map of Employee
        System.out.println("\n\nMap of Employee : \n" + mapOfEmployees);
    }
}
Output2;
List of Employee : 
[
Employee [empId=1001, empName=SJ, empAge=18, empDesignation=Consultant], 
Employee [empId=1002, empName=AK, empAge=20, empDesignation=Enginner], 
Employee [empId=1003, empName=PJ, empAge=23, empDesignation=Developer]
]
 
 
Map of Employee : 
{1001=SJ, 1002=AK, 1003=PJ}
Convert List to Map with primary Id as Key and complete object as value

public class ConvertListToMapOfEmployee {
 
    public static void main(String[] args) {
 
        // create ArrayList
        List<Employee> employees = new ArrayList<Employee>();
 
        // add employee objects to list
        employees.add(new Employee(1001, "SJ", 18, "Consultant"));
        employees.add(new Employee(1002, "AK", 20, "Enginner"));
        employees.add(new Employee(1003, "PJ", 23, "Developer"));
 
        // printing to console - List of Employee
        System.out.println("List of Employee : \n" + employees);
 
        // create Map<Integer, Employee> to store List of employees
        Map<Integer, Employee> mapOfEmployees = new HashMap<Integer, Employee>();
 
        // convert List<Employee> to Map<empId, empName>
        for(Employee employee : employees) {
            mapOfEmployees.put(employee.getEmpId(), employee);
        }
 
        // printing to console - Map of Employee
        System.out.println("\n\nMap of Employee : \n" + mapOfEmployees);
    }
}
Output:

List of Employee : 
[
Employee [empId=1001, empName=SJ, empAge=18, empDesignation=Consultant], 
Employee [empId=1002, empName=AK, empAge=20, empDesignation=Enginner], 
Employee [empId=1003, empName=PJ, empAge=23, empDesignation=Developer]
]
 
 
Map of Employee : 
{
1001=Employee [empId=1001, empName=SJ, empAge=18, empDesignation=Consultant], 
1002=Employee [empId=1002, empName=AK, empAge=20, empDesignation=Enginner], 
1003=Employee [empId=1003, empName=PJ, empAge=23, empDesignation=Developer]
}
Sort map Values:
public class SortMapValues {
public static void main(String[] args) {
	Map<String, Integer> map = new HashMap<>();
	map.put("kolle", 2);
	map.put("tej", 5);
	map.put("sari", 6);
	map.put("siddu", 8);
	map.put("pavan", 2);
	System.out.println(map.size());
	Set<Map.Entry<String, Integer>> set = map.entrySet();
	List<Map.Entry<String, Integer>> list = new ArrayList<>(set);
	Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
	public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
			return o1.getValue() - o2.getValue();
		}
	});
	for (Entry<String, Integer> entry : list) {
System.out.println(entry.getKey() + "======" + entry.getValue());
	}

}
}
Output:
5
kolle======2
pavan======2
tej======5
sari======6
siddu======8
Sorting values Without using Colletions.sort();
public class  Employee implements Comparable<Employee>{
  private int age;
  private String name;
  public Employee(){}
public Employee(int age, String name) {
	this.age = age;
	this.name = name;
}

public static void sort(List<Employee> employees){
	for (int i = 0; i < employees.size(); i++) {
		for (int j = i+1; j < employees.size(); j++) {
			if (employees.get(i).compareTo(employees.get(j)) > 0) {
				Employee temp = employees.get(i);
				employees.set(i, employees.get(j));
				employees.set(j, temp);
			}
		}
	}
}

  @Override
	public String toString() {
		return "\nEmployee{"+"\nAge:"+age+"\nName:"+name+"}\n";
	}
@Override
public int compareTo(Employee o) {
   if(age < o.age) {return -1; }
   if(age >o. age){  return 1; }
   else{ return 0; }
}

}
public class EmployeeTest{ 
public static void main(String[] args) {
	Employee  employee = new Employee(11, "kolle");
	Employee  employee1 = new Employee(6, "sari");
	Employee  employee2 = new Employee(10, "pavan");
	List<Employee> employees =new ArrayList<>();
	
	employees.add(employee);
	employees.add(employee1);
	employees.add(employee2);
	Employee.sort(employees);
	System.out.println(employees);
}
}
OUTPUT:
How to convert HashMap to ArrayList in Java?
public class CrunchifyHashmapToArrayList {
 
	public static void main(String... args) {
		HashMap<String, Integer> companyDetails = new HashMap<String, Integer>();
 
		// create hashmap with keys and values (CompanyName, #Employees)
		companyDetails.put("eBay", 4444);
		companyDetails.put("Paypal", 5555);
		companyDetails.put("IBM", 6666);
		companyDetails.put("Google", 7777);
		companyDetails.put("Yahoo", 8888);
 
		System.out.println("==> Size of companyDetails Map: " + companyDetails.size());
		Iterator it = companyDetails.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry pairs = (Map.Entry) it.next();
			System.out.println(pairs.getKey() + " = " + pairs.getValue());
		}
 
		// Converting HashMap keys into ArrayList
		List<String> keyList = new ArrayList<String>(companyDetails.keySet());
		System.out.println("\n==> Size of Key list: " + keyList.size());
 
		for (String temp : keyList) {
			System.out.println(temp);
		}
 
		// Converting HashMap Values into ArrayList
		List<Integer> valueList = new ArrayList<Integer>(companyDetails.values());
		System.out.println("\n==> Size of Value list: " + valueList.size());
		for (Integer temp : valueList) {
			System.out.println(temp);
		}
 
		List<Entry> entryList = new ArrayList<Entry>(companyDetails.entrySet());
		System.out.println("\n==> Size of Entry list: " + entryList.size());
		for (Entry temp : entryList) {
			System.out.println(temp);
		}
	}
}
Output:

==> Size of companyDetails Map: 5
IBM = 6666
Yahoo = 8888
Google = 7777
Paypal = 5555
eBay = 4444
 
==> Size of Key list: 5
IBM
Yahoo
Google
Paypal
eBay
 
==> Size of Value list: 5
6666
8888
7777
5555
4444
 
==> Size of Entry list: 5
IBM=6666
Yahoo=8888
Google=7777
Paypal=5555
eBay=4444
How to get different object from list
public class Test {
	public static void main(String[] args) {
		List al = new ArrayList();
		al.add(10);
		al.add(20);
		al.add("kolle");
		al.add("siddu");
		al.add('c');
		al.add('s');
		al.add(null);
		System.out.println("All Elements:");
		for (Object object : al) {
			System.out.println(object);
		}
		System.out.println("Integer Elements");
		for (Object i : al) {
			if (i instanceof Integer) {
				System.out.println(i);
			}
		}
		System.out.println("String Elements");
		for (Object str : al) {
			if (str instanceof String) {
				System.out.println(str);
			}
		}
		System.out.println("Character Elements");
		for (Object c : al) {
			if (c instanceof Character) {
				System.out.println(c);
			}
		}
		System.out.println("Null values");
		for (Object c : al) {
			if (c == null) {
				System.out.println(c);
			}
		}
		System.out.println("Not Null values");
		for (Object c : al) {
			if (c != null) {
				System.out.println(c);
			}
		}
	}
}
How many ways to iterate the List
public class Test {
	public static void main(String[] args) {
		List<String> al = new ArrayList<>();
		al.add("sari");
		al.add("kolle");
		al.add("siddu");
		al.add("tej");
		al.add("nani");
		System.out.println("Normal for loop:");
		for (int i = 0; i < al.size(); i++) {
			String s = (String) al.get(i);
			System.out.println(s);
		}
		System.out.println("Enhanced/foreach loop:");
		for (String str : al) {
			System.out.println(str);
		}
		System.out.println("While loop:");
		int count = 0;
		while (al.size() > count) {
			System.out.println(al.get(count));
			count++;
		}
		System.out.println("Iterator loop:");
		Iterator<String> it = al.iterator();
		while (it.hasNext()) {
			System.out.println(it.next());

		}
		System.out.println("Specified object");
		System.out.println(al.get(0));
		System.out.println(al.get(2));
		System.out.println(""+al.get(7));//Exception in thread "main" java.lang.IndexOutOfBoundsException: Index: 7, Size: 5
	}
}
How many ways to sort collection:
Way1 : Using Collections.sort() and Collections.reverse()
public class Test {
	public static void main(String[] args) {
		List<String> al = new ArrayList<>();
		al.add("sari");
		al.add("kolle");
		al.add("siddu");
		al.add("tej");
		al.add("nani");
		System.out.println("Normal way to sort Ascending order");
		Collections.sort(al);	
		for (String asce : al) {
			System.out.println(asce);
		}
		System.out.println("Normal way to sort Descnding order");
		Collections.reverse(al);	
		for (String desc : al) {
			System.out.println(desc);
		}
		System.out.println("Normal way to sort ascnding and descending order");
		Collections.sort(al,Collections.reverseOrder());	
		for (String AsceAndDesc : al) {
			System.out.println(AsceAndDesc);
		}
		}
}
Way 2 Using Comparable(Natural or single sort)
Comparator way 1:
public class Student implements Comparable<Student> {
	private int sid;
	private String name;
	private int age;

	public Student() {
	}

	public Student(int sid, String name, int age) {
		super();
		this.sid = sid;
		this.name = name;
		this.age = age;
	}

	public int getSid() {
		return sid;
	}

	public void setSid(int sid) {
		this.sid = sid;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	@Override
	public int compareTo(Student o) {
		if (age > o.age) {
			return 1;
		} else if (age < o.age) {
			return -1;
		} else {
			return 0;
		}
	}

	@Override
	public String toString() {
		return "Student [sid=" + sid + ", name=" + name + ", age=" + age + "]";
	}

}

public class Test {
	public static void main(String[] args) {
		Student st1 = new Student(102, "kolle", 23);
		Student st2 = new Student(104, "sari", 20);
		Student st3 = new Student(103, "tej", 2);
		Student st4 = new Student(106, "nani", 1);
		Student st5 = new Student(105, "ramu", 27);
		List<Student> list = new ArrayList<>();
		list.add(st1);
		list.add(st2);
		list.add(st3);
		list.add(st4);
		list.add(st5);
		Collections.sort(list);
		for (Student student : list) {
			System.out.println(student);
		}
		}
}
Way 3 Using Comparator(multiple sort)
public class Student {
	private int sid;
	private String name;
	private int age;

	public Student() {
	}

	public Student(int sid, String name, int age) {
		super();
		this.sid = sid;
		this.name = name;
		this.age = age;
	}

	public int getSid() {
		return sid;
	}

	public void setSid(int sid) {
		this.sid = sid;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public static Comparator<Student> SORT_BY_ID = new Comparator<Student>() {
		@Override
		public int compare(Student o1, Student o2) {
			int sid1 = o1.getSid();
			int sid2 = o2.getSid();
			return sid1 - sid2;
		}
	};
	public static Comparator<Student> SORT_BY_NAME = new Comparator<Student>() {
		@Override
		public int compare(Student o1, Student o2) {
			return o1.getName().compareTo(o2.getName());
		}
	};
	public static Comparator<Student> SORT_BY_AGE = new Comparator<Student>() {
		@Override
		public int compare(Student o1, Student o2) {
			int sid1 = o1.getAge();
			int sid2 = o2.getAge();
			return sid1 - sid2;
		}
	};
	public static Comparator<Student> SORT_BY_DESC_ID = new Comparator<Student>() {
		@Override
		public int compare(Student o1, Student o2) {
			int sid1 = o1.getSid();
			int sid2 = o2.getSid();
			return sid2 - sid1;
		}
	};
	public static Comparator<Student> SORT_BY_DESC_NAME = new Comparator<Student>() {
		@Override
		public int compare(Student o1, Student o2) {
			return o2.getName().compareTo(o1.getName());
		}
	};
	public static Comparator<Student> SORT_BY_DESC_AGE = new Comparator<Student>() {
		@Override
		public int compare(Student o1, Student o2) {
			int sid1 = o1.getAge();
			int sid2 = o2.getAge();
			return sid2 - sid1;
		}
	};

	@Override
	public String toString() {
		return "Student [sid=" + sid + ", name=" + name + ", age=" + age + "]";
	}

}


public class Test {
	public static void main(String[] args) {
		Student st1 = new Student(102, "kolle", 23);
		Student st2 = new Student(104, "sari", 20);
		Student st3 = new Student(103, "tej", 2);
		Student st4 = new Student(106, "nani", 1);
		Student st5 = new Student(105, "ramu", 27);
		List<Student> list = new ArrayList<>();
		list.add(st1);
		list.add(st2);
		list.add(st3);
		list.add(st4);
		list.add(st5);
		System.out.println("Ascending order:");
		Collections.sort(list,Student.SORT_BY_ID);
		Collections.sort(list,Student.SORT_BY_NAME);
		Collections.sort(list,Student.SORT_BY_AGE);
		for (Student student : list) {
			System.out.println(student);
		}
		System.out.println("descending order:");
		Collections.sort(list,Student.SORT_BY_DESC_ID);
		Collections.sort(list,Student.SORT_BY_DESC_NAME);
		Collections.sort(list,Student.SORT_BY_DESC_AGE);
		for (Student student : list) {
			System.out.println(student);
		}
		}
}

Way 4:Custom sorting Order using sorting algorithem(Without Collections.sort()):
public class Employee implements Comparable<Employee> {
	private int age;
	private String name;

	public Employee() {
	}

	public Employee(int age, String name) {
		this.age = age;
		this.name = name;
	}

	public static void sort(List<Employee> employees) {
		for (int i = 0; i < employees.size(); i++) {
			for (int j = i + 1; j < employees.size(); j++) {
				if (employees.get(i).compareTo(employees.get(j)) > 0) {
					Employee temp = employees.get(i);
					employees.set(i, employees.get(j));
					employees.set(j, temp);
				}
			}
		}
	}

	@Override
	public String toString() {
		return "\nEmployee{" + "\nAge:" + age + "\nName:" + name + "}\n";
	}

	@Override
	public int compareTo(Employee o) {
		if (age < o.age) {
			return -1;
		}
		if (age > o.age) {
			return 1;
		} else {
			return 0;
		}
	}

}

public class EmployeeTest{ 
public static void main(String[] args) {
	Employee  employee = new Employee(11, "kolle");
	Employee  employee1 = new Employee(6, "sari");
	Employee  employee2 = new Employee(10, "pavan");
	List<Employee> employees =new ArrayList<>();
	
	employees.add(employee);
	employees.add(employee1);
	employees.add(employee2);
	Employee.sort(employees);
	for (Employee emp : employees) {
		System.out.println(emp);
	}
}
}

Comparator using java 8
package Lambda;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

class Student {
	int id;
	String name;
	float salary;

	public Student(int id, String name, float salary) {
		super();
		this.id = id;
		this.name = name;
		this.salary = salary;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public float getSalary() {
		return salary;
	}

	public void setSalary(float salary) {
		this.salary = salary;
	}

}

class WithoutLamda {
	public static void main(String[] args) {
		ArrayList<Student> al = new ArrayList<>();
		al.add(new Student(1, "kolle", 2000.09f));
		al.add(new Student(3, "tej", 66000.09f));
		al.add(new Student(2, "sari", 5000.09f));
		al.add(new Student(4, "siddu", 2000.09f));
		Collections.sort(al, new Comparator<Student>() {
			@Override
			public int compare(Student o1, Student o2) {
				return o1.name.compareTo(o2.name);
			}
		});
		
		
		Collections.sort(al, new Comparator<Student>() {
			@Override
			public int compare(Student o1, Student o2) {
				return o1.id - o2.id;
			}
		});
		
		
		Collections.sort(al, new Comparator<Student>() {
			@Override
			public int compare(Student o1, Student o2) {
				return (int) (o1.salary - o2.salary);
			}
		});
		//using java8 
		al.forEach((list) -> System.out.println(list.name));
		al.forEach((list) -> System.out.println(list.id));
		al.forEach((list) -> System.out.println(list.salary));
	}
}




Collections.Checkedset():
public class Test {
	public static void main(String a[]){
        
        Set mySet = new HashSet();
        mySet.add("one");
        mySet.add("two");
        mySet.add("three");
        mySet.add("four");
        Set chkSet = Collections.checkedSet(mySet, Integer.class);
        System.out.println("Checked set content: "+chkSet);
        //you can add any type of elements to mySet object
        mySet.add(10);
        //you cannot add any type of elements to chkSet object, doing so
        //throws ClassCastException
        chkSet.add(10); //throws ClassCastException
        System.out.println(chkSet);
    }
}
Output:
Checked set content: [four, one, two, three]
[four, one, 10, two, three]
Same just I change integer inst tead String what happen?
public class Test {
	public static void main(String a[]){
        
        Set mySet = new HashSet();
        mySet.add("one");
        mySet.add("two");
        mySet.add("three");
        mySet.add("four");
        Set chkSet = Collections.checkedSet(mySet, String.class);
        System.out.println("Checked set content: "+chkSet);
        //you can add any type of elements to mySet object
        mySet.add(10);
        //you cannot add any type of elements to chkSet object, doing so
        //throws ClassCastException
        chkSet.add(10); //throws ClassCastException
        System.out.println(chkSet);
    }
}
OUTPUT:
Checked set content: [four, one, two, three]
Exception in thread "main" java.lang.ClassCastException: Attempt to insert class java.lang.Integer element into collection with element type class java.lang.String

public class Test {
	public static void main(String a[]){
        
        List myList = new ArrayList();
        myList.add("one");
        myList.add("two");
        myList.add("three");
        myList.add("four");
        List chkList = Collections.checkedList(myList, String.class);
        System.out.println("Checked list content: "+chkList);
        //you can add any type of elements to myList object
        myList.add(10);
        //you cannot add any type of elements to chkList object, doing so
        //throws ClassCastException
        chkList.add(10); //throws ClassCastException
    }
}
Checked list content: [one, two, three, four]
Exception in thread "main" java.lang.ClassCastException: Attempt to insert class java.lang.Integer element into collection with element type class java.lang.String
public class Test {
	public static void main(String a[]){
        
        Map myMap = new HashMap();
        myMap.put("one", 1);
        myMap.put("two", 2);
        myMap.put("three", 3);
        myMap.put("four", 4);
        Map chkMap = Collections.checkedMap(myMap, String.class, Integer.class);
        System.out.println("Checked map content: "+chkMap);
        //you can add any type of elements to myMap object
        myMap.put(10, "ten");
        //you cannot add any type of elements to chkMap object, doing so
        //throws ClassCastException
        chkMap.put(10, "ten"); //throws ClassCastException
    }
}
Checked map content: {four=4, one=1, two=2, three=3}
Exception in thread "main" java.lang.ClassCastException: Attempt to insert class java.lang.Integer key into map with key type class java.lang.String
Collections.asLifoQueue() method
public class Test {
	public static void main(String args[]) {
        
        Deque<String> dq = new ArrayDeque<String>(5);
        dq.add("java");
        dq.add("c");
        dq.add("c++");
        dq.add("unix");
        dq.add("perl");        
        Queue<String> q = Collections.asLifoQueue(dq);   
        System.out.println("returned queue is: "+q); returned queue is: [java, c, c++, unix, perl]
     } 
}
MAX,MIN,SWAPPING,BINARY SEARCH,NCOPIES Element :
public class Test {
	public static void main(String a[]){
        List<Integer> li = new ArrayList<Integer>();
        li.add(23);
        li.add(44);
        li.add(12);
        li.add(45);
        li.add(2);
        li.add(16);
        li.add(2);
        li.add(16);
        System.out.println("Maximum element from the list: "+Collections.max(li));
        System.out.println("Minimum element from the list: "+Collections.min(li));
        System.out.println("Element Position at"+Collections.binarySearch(li, 12));
        System.out.println("N number of copies "+Collections.nCopies(2, li));
        System.out.println("Swapping list");
        Collections.swap(li, 0, 4);
        System.out.println(li);
        
    }
}
OUTPUT:
Maximum element from the list: 45
Minimum element from the list: 2
Element Position at-1
N number of copies [[23, 44, 12, 45, 2, 16, 2, 16], [23, 44, 12, 45, 2, 16, 2, 16]]
Swapping list
[2, 44, 12, 45, 23, 16, 2, 16]
Average of list
public class Test {
	public static void main(String a[]) {
		List<Integer> li = new ArrayList<Integer>();
		li.add(23);
		li.add(44);
		li.add(12);
		li.add(45);
		li.add(2);
		li.add(16);
		li.add(2);
		li.add(16);
		int sum = 0;
		int avg;
		int i;
		for (i = 0; i < li.size(); i++) {
			sum = sum + li.get(i);
		}
		System.out.println("AVERAGE:"+sum/li.size());//20
		
	}
}
Normal and Custom MAX and MIN SALARY 
public class Test {
	public static void main(String a[]) {

		List<Empy> emps = new ArrayList<Empy>();
		emps.add(new Empy(10, "Raghu", 25000));
		emps.add(new Empy(120, "Krish", 45000));
		emps.add(new Empy(210, "John", 14000));
		emps.add(new Empy(150, "Kishore", 24000));
		Empy maxSal = Collections.max(emps, new EmpyComp());
		System.out.println("Employee with max salary: " + maxSal);
		Empy minSal = Collections.min(emps, new EmpyComp());
		System.out.println("Employee with  salary: " + minSal);
		Empy avg = Collections.min(emps, new EmpyComp());
		Iterator<Empy> i = emps.iterator();
		/*System.out.println("Avarage logic start");
		int sum = 0,average = 0;
		while (i.hasNext()) {
			Empy e = i.next();
			int sal = e.salary;
				sum = sum + sal;
				average = sum/emps.size();
		}
		System.out.println("SALARY:" + average);
		System.out.println("Avarage logic end");*/
		/*System.out.println("MAX logic start");
		int max = 0,sal=0;
		while (i.hasNext()) {
			Empy e = i.next();
			sal = e.salary;
			if(sal>max)
	         max=sal;
		}
		System.out.println("Max SALARY:" + max);
		System.out.println("MAX logic end");*/
			System.out.println("min logic start");
		int min = 0,sal=0;
		while (i.hasNext()) {
			Empy e = i.next();
			sal = e.salary;
			if(sal<min)
	         min=sal;
		}
		System.out.println("min SALARY:" + min);
		System.out.println("min logic end");
		
	}
}

class EmpyComp implements Comparator<Empy> {

	@Override
	public int compare(Empy e1, Empy e2) {
		return e1.getSalary().compareTo(e2.getSalary());
	}
}

class Empy {

	private int id;
	private String name;
	public int salary;

	public Empy(int id, String name, Integer sal) {
		this.id = id;
		this.name = name;
		this.salary = sal;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Integer getSalary() {
		return salary;
	}

	public void setSalary(Integer salary) {
		this.salary = salary;
	}

	public String toString() {
		return id + "  " + name + "   " + salary;
	}
}
Output:
Employee with max salary: 120  Krish   45000
Employee with min salary: 210  John   14000
How to get index of a sub list from another list?
public class Test {
	public static void main(String a[]){
	        List<String> list = new ArrayList<String>();
	        list.add("java");
	        list.add("c");
	        list.add("c++");
	        list.add("unix");
	        list.add("perl");
	        list.add("php");
	        list.add("javascript");
	        list.add("ruby");
	        list.add(".net");
	        list.add("jdbc");
	        list.add("servlets");
	        List<String> subList = new ArrayList<String>();
	        subList.add("php");
	        subList.add("javascript");
	        subList.add("ruby");
	        System.out.println("Index of sublist: "+Collections.indexOfSubList(list, subList));
	    }
	}
OUTPUT: Index of sublist: 5
How to get last index of a sub list from another list?

public class Test {
	public static void main(String a[]){
        List<String> list = new ArrayList<String>();
        list.add("java");
        list.add("c");
        list.add("c++");
        list.add("unix");
        list.add("perl");
        list.add("php");
        list.add("javascript");
        list.add("ruby");
        list.add(".net");
        list.add("jdbc");
        list.add("php");
        list.add("javascript");
        list.add("ruby");
        list.add("servlets");
        List<String> subList = new ArrayList<String>();
        subList.add("php");
        subList.add("javascript");
        subList.add("ruby");
        System.out.println("Last index of sublist: "
                    +Collections.lastIndexOfSubList(list, subList));
    }
}
OUTPUT:
Last index of sublist: 10
How to get sublist of an ArrayList 
public class Test {
	public static void main(String a[]) {
		ArrayList<String> al = new ArrayList<String>();

		// Addition of elements in ArrayList
		al.add("Steve");
		al.add("Justin");
		al.add("Ajeet");
		al.add("John");
		al.add("Arnold");
		al.add("Chaitanya");

		System.out.println("Original ArrayList Content: " + al);

		// Sublist to ArrayList
		ArrayList<String> al2 = new ArrayList<String>(al.subList(1, 4));
		System.out.println("SubList stored in ArrayList: " + al2);

		// Sublist to List
		List<String> list = al.subList(1, 4);
		System.out.println("SubList stored in List: " + list);
	}
}
OUTPUT
Original ArrayList Content: [Steve, Justin, Ajeet, John, Arnold, Chaitanya]
SubList stored in ArrayList: [Justin, Ajeet, John]
SubList stored in List: [Justin, Ajeet, John]
ArrayList lastIndexOf(Object 0bj) Method
public class Test {
	public static void main(String args[]) {
	      //ArrayList of Integer Type
	      ArrayList<Integer> al = new ArrayList<Integer>();
	      al.add(1);
	      al.add(88);
	      al.add(9);
	      al.add(17);
	      al.add(17);
	      al.add(9);
	      al.add(17);
	      al.add(91);
	      al.add(27);
	      al.add(1);
	      al.add(17);

	      System.out.println("Last occurrence of element 1: "+al.lastIndexOf(1));
	      System.out.println("Last occurrence of element 9: "+al.lastIndexOf(9));
	      System.out.println("Last occurrence of element 17: "+al.lastIndexOf(17));
	      System.out.println("Last occurrence of element 91: "+al.lastIndexOf(91));
	      System.out.println("Last occurrence of element 88: "+al.lastIndexOf(88)); 
	   }
	}
OUTPUT:
Last occurrence of element 1: 9
Last occurrence of element 9: 5
Last occurrence of element 17: 10
Last occurrence of element 91: 7
Last occurrence of element 88: 1

ArrayList indexOf() Method
public class Test {
	public static void main(String[] args) {
	      ArrayList<String> al = new ArrayList<String>();
	      al.add("AB");
	      al.add("CD");
	      al.add("EF");
	      al.add("GH");
	      al.add("IJ");
	      al.add("KL");
	      al.add("MN");

	      System.out.println("Index of 'AB': "+al.indexOf("AB"));
	      System.out.println("Index of 'KL': "+al.indexOf("KL"));
	      System.out.println("Index of 'AA': "+al.indexOf("AA"));
	      System.out.println("Index of 'EF': "+al.indexOf("EF"));
	  }
	}
OUTPUT:
Index of 'AB': 0
Index of 'KL': 5
Index of 'AA': -1
Index of 'EF': 2
CUSTOM MAX SALARY:
Iterator<Emp> i = a.iterator();
int maxsalary=0;
int sal = 0;
while(i.hasNext()){
Emp e = i.next();
sal = e.salary;
if(sal > maxsalary){
maxsalary= sal;
}
}
System.out.println("maximum salary..."+maxsalary);
}
OUTPUT:
maximum salary...3200
How to compare two ArrayList in Java
public class Test {
		 public static void main(String [] args)
	     {
	          ArrayList<String> al1= new ArrayList<String>();
	          al1.add("hi");
	          al1.add("How are you");
	          al1.add("Good Morning");
	          al1.add("bye");
	          al1.add("Good night");

	          ArrayList<String> al2= new ArrayList<String>();
	          al2.add("Howdy");
	          al2.add("Good Evening");
	          al2.add("bye");
	          al2.add("Good night");

	          //Storing the comparison output in ArrayList<String>
	          ArrayList<String> al3= new ArrayList<String>();
	          for (String temp : al1)
	              al3.add(al2.contains(temp) ? "Yes" : "No");
	          System.out.println(al3);

	          //Storing the comparison output in ArrayList<Integer>
	          ArrayList<Integer> al4= new ArrayList<Integer>();
	          for (String temp2 : al1)
	               al4.add(al2.contains(temp2) ? 1 : 0);
	          System.out.println(al4);
	          
	          
	     }
	}
OUTPUT:
[No, No, No, Yes, Yes]
[0, 0, 0, 1, 1]
How to serialize ArrayList in java
public class Serilization{
	public static void main(String [] args)
	   {
	       ArrayList<String> al=new ArrayList<String>();
	       al.add("Hello");
	       al.add("Hi");
	       al.add("Howdy");

	       try{
	         FileOutputStream fos= new FileOutputStream("myfile");
	         ObjectOutputStream oos= new ObjectOutputStream(fos);
	         oos.writeObject(al);
	         oos.close();
	         fos.close();
	       }catch(IOException ioe){
	            ioe.printStackTrace();
	        }
	   }
	}
public class Deserilization{
	public static void main(String [] args)
    {
        ArrayList<String> arraylist= new ArrayList<String>();
        try
        {
            FileInputStream fis = new FileInputStream("myfile");
            ObjectInputStream ois = new ObjectInputStream(fis);
            arraylist = (ArrayList) ois.readObject();
            ois.close();
            fis.close();
         }catch(IOException ioe){
             ioe.printStackTrace();
             return;
          }catch(ClassNotFoundException c){
             System.out.println("Class not found");
             c.printStackTrace();
             return;
          }
        for(String tmp: arraylist){
            System.out.println(tmp);
        }
   }
}
How to get Values id,name,sal from arraylist:
public class Test {
	public static void main(String a[]) {

		List<Empy> emps = new ArrayList<Empy>();
		emps.add(new Empy(10, "Raghu", 25000));
		emps.add(new Empy(120, "Krish", 45000));
		emps.add(new Empy(210, "John", 14000));
		emps.add(new Empy(150, "Kishore", 24000));
		Iterator iterator =emps.iterator();
		while (iterator.hasNext()) {
		Empy e =  (Empy) iterator.next();
			System.out.println("Salary:"+e.getSalary());
			System.out.println("ID:"+e.getId());
			System.out.println("Name:"+e.getName());
		}
		
	}
}


class Empy {

	int id;
	String name;
	public int salary;

	public Empy(int id, String name, Integer sal) {
		this.id = id;
		this.name = name;
		this.salary = sal;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Integer getSalary() {
		return salary;
	}

	public void setSalary(Integer salary) {
		this.salary = salary;
	}

	public String toString() {
		return id + "  " + name + "   " + salary;
	}
}
Get Random Item/Element From a List
 Single Random Item
public void givenList_shouldReturnARandomElement() {
    List<Integer> givenList = Arrays.asList(1, 2, 3);
    Random rand = new Random();
    int randomElement = givenList.get(rand.nextInt(givenList.size()));
}
Select Random Items With Repetitions
public void givenList_whenNumberElementsChosen_shouldReturnRandomElementsRepeat() {
    Random rand = new Random();
    List<String> givenList = Arrays.asList("one", "two", "three", "four");
 
    int numberOfElements = 2;
 
    for (int i = 0; i < numberOfElements; i++) {
        int randomIndex = rand.nextInt(givenList.size());
        String randomElement = givenList.get(randomIndex);
    }
}
Select Random Items Without Repetitions
public void givenList_whenNumberElementsChosen_shouldReturnRandomElementsNoRepeat() {
    Random rand = new Random();
    List<String> givenList = Lists.newArrayList("one", "two", "three", "four");
 
    int numberOfElements = 2;
 
    for (int i = 0; i < numberOfElements; i++) {
        int randomIndex = rand.nextInt(givenList.size());
        String randomElement = givenList.get(randomIndex);
        givenList.remove(randomIndex);
    }
}

Select Random Series
public void givenList_whenSeriesLengthChosen_shouldReturnRandomSeries() {
    List<Integer> givenList = Lists.newArrayList(1, 2, 3, 4, 5, 6);
    Collections.shuffle(givenList);
 
    int randomSeriesLength = 3;
 
    List<Integer> randomSeries = givenList.subList(0, randomSeriesLength);
}

TreeSet subSet()
@Test
public void whenUsingSubSet_shouldReturnSubSetElements() {
    SortedSet<Integer> treeSet = new TreeSet<>();
    treeSet.add(1);
    treeSet.add(2);
    treeSet.add(3);
    treeSet.add(4);
    treeSet.add(5);
    treeSet.add(6);
     
    Set<Integer> expectedSet = new TreeSet<>();
    expectedSet.add(2);
    expectedSet.add(3);
    expectedSet.add(4);
    expectedSet.add(5);
 
    Set<Integer> subSet = treeSet.subSet(2, 6);
  
    assertEquals(expectedSet, subSet);
}
TreeSet headSet()
@Test
public void whenUsingHeadSet_shouldReturnHeadSetElements() {
    SortedSet<Integer> treeSet = new TreeSet<>();
    treeSet.add(1);
    treeSet.add(2);
    treeSet.add(3);
    treeSet.add(4);
    treeSet.add(5);
    treeSet.add(6);
 
    Set<Integer> subSet = treeSet.headSet(6);
  
    assertEquals(subSet, treeSet.subSet(1, 6));
}

TreeSet tailSet()
@Test
public void whenUsingTailSet_shouldReturnTailSetElements() {
    NavigableSet<Integer> treeSet = new TreeSet<>();
    treeSet.add(1);
    treeSet.add(2);
    treeSet.add(3);
    treeSet.add(4);
    treeSet.add(5);
    treeSet.add(6);
 
    Set<Integer> subSet = treeSet.tailSet(3);
  
    assertEquals(subSet, treeSet.subSet(3, true, 6, true));
}
If the set is modified at any time after the iterator is created in any way except through the iterator’s own remove method, the Iterator throws a ConcurrentModificationException.
@Test(expected = ConcurrentModificationException.class)
public void whenModifyingHashSetWhileIterating_shouldThrowException() {
  
    Set<String> hashset = new HashSet<>();
    hashset.add("First");
    hashset.add("Second");
    hashset.add("Third");
    Iterator<String> itr = hashset.iterator();
    while (itr.hasNext()) {
        itr.next();
        hashset.remove("Second");
    }
}
Alternative:
@Test
public void whenRemovingElementUsingIterator_shouldRemoveElement() {
  
    Set<String> hashset = new HashSet<>();
    hashset.add("First");
    hashset.add("Second");
    hashset.add("Third");
    Iterator<String> itr = hashset.iterator();
    while (itr.hasNext()) {
        String element = itr.next();
        if (element.equals("Second"))
            itr.remove();
    }
  
    assertEquals(2, hashset.size());
}


convert given number of seconds to hours, minutes and second
Test: Convert HH:MM:SS to seconds again,
    1*60*60 + 48*60 + 50 = 3660 + 2880 + 50 = 6530
public class Test {
	public static void main(String[] args)
	{
		int seconds =  6530;
		System.out.println(seconds);//6530
		int p1 = seconds % 60;
		System.out.println("P1="+p1);//50
		int p2 = seconds / 60;
		System.out.println("p2="+p2);//108
		int p3 = p2 % 60;
		System.out.println("P3="+p3);//48
		p2 = p2 / 60;
		System.out.println("P2="+p2);//1
		System.out.print("HH:MM:SS - " +p2 + ":" + p3 + ":" + p1);//1:48:50
		System.out.print("\n");
		int seconds1=1*60*60+48*60+50;
		System.out.println(seconds1);
	}  
}
find differences of two dates in days in java
public class ExCalculateDays 
{
	// create buffer class object.
	static BufferedReader BR=new BufferedReader(new InputStreamReader(System.in));
	int month[]={0,31,28,31,30,31,30,31,31,30,31,30,31};

	//create function for checking Leap Year or not. 
	int isLeap(int y)
	{
		if((y%400==0) || ((y%100!=0)&&(y%4==0)))
			return 29;
		else
			return 28;
	}

	// create function for checking date is valid or not.
	boolean dateValidate(int d, int m, int y)
	{
		month[2]=isLeap(y);
		if(m<0 || m>12 || d<0 || d>month[m] || y<0 || y>9999)
			return false;
		else
			return true;
	}

	// this function calculate days between given dates. 
	int dayno(int d, int m, int y)
	{
		int dn=0;
		month[2]=isLeap(y);
		for(int i=1;i<m;i++)
		{
			dn=dn+month[i];
		}
		dn=dn+d;
		for(int i=1;i<y;i++)
		{
			if(isLeap(i)==29)
				dn=dn+366;
			else
			dn=dn+365;
		}
		return dn;
	}

	public static void main(String args[])throws IOException
	{
		ExCalculateDays CD=new ExCalculateDays();

		// Enter the dates one by one.
		System.out.print("Enter the first date in (dd/mm/yyyy) format: ");
		String date1=BR.readLine().trim();
		int p,q;

		// calculate the days.
		p=date1.indexOf("/");
		int d1=Integer.parseInt(date1.substring(0,p));

		//calculating the month
		q=date1.lastIndexOf("/");
		int m1=Integer.parseInt(date1.substring(p+1,q));

		// calculating the year
		int y1=Integer.parseInt(date1.substring(q+1));

		System.out.print("Enter the second date in (dd/mm/yyyy) format: ");
		String date2=BR.readLine().trim();

		p=date2.indexOf("/");
		int d2=Integer.parseInt(date2.substring(0,p));

		q=date2.lastIndexOf("/");
		int m2=Integer.parseInt(date2.substring(p+1,q));
		int y2=Integer.parseInt(date2.substring(q+1));

		// check for valid input of dates.
		if(CD.dateValidate(d1,m1,y1)==true && CD.dateValidate(d2,m2,y2)==true)
		{
			int a=CD.dayno(d1,m1,y1);
			int b=CD.dayno(d2,m2,y2);

			// print the final result.
			System.out.print("Days between " +date1+" " + " and " +date2+ " "+" is : " +Math.abs(a-b)+" days.");
		}
		else
		// otherwise invalid input of dates.
		System.out.println("Invalid Dates...");
	}	
}
Output

First run:
Enter the first date in (dd/mm/yyyy) format: 12/12/2016
Enter the second date in (dd/mm/yyyy) format: 12/12/2017
Days between 12/12/2016  and 12/12/2017  is : 365 days.

Second run:
Enter the first date in (dd/mm/yyyy) format: 12/2017/12
Enter the second date in (dd/mm/yyyy) format: 22/2017/12
Invalid Dates...
Program to add given hours in current date and time 
public class ExAddHrsToCurrentDate
{
	public static void main(String[] args)
	{
		// create object of calendar class.
		Calendar now = Calendar.getInstance();

		// fetch the Current date and time of the system.
		System.out.println("Current Date : " + (now.get(Calendar.MONTH) + 1) +
		"-"+ now.get(Calendar.DATE) + "-" + now.get(Calendar.YEAR));
		System.out.println("Current time : " + now.get(Calendar.HOUR_OF_DAY) +
		":"+ now.get(Calendar.MINUTE) + ":" + now.get(Calendar.SECOND));

		// take default hours.
		now.add(Calendar.HOUR, 15);

		//printng date after adding 15 hours in time
		System.out.println("New Date : " + (now.get(Calendar.MONTH) + 1) + "-"+
		now.get(Calendar.DATE) + "-" + now.get(Calendar.YEAR));	
		// This will show new time and date after adding hours.
		System.out.println("New time after adding 15 hours : " + now.get(Calendar.HOUR_OF_DAY) + ":"+ now.get(Calendar.MINUTE) + ":" + now.get(Calendar.SECOND));
	}
}
Output

Current Date : 12-23-2017
Current time : 20:36:24
New Date : 12-24-2017
New time after adding 15 hours : 11:36:24


check whether the number is IMEI Number or not
public class CheckIMEINumber {
	// Function for finding and returning sum of digits of a number
		int sumDig(int n) 
		{
			// initialise here.
			int a = 0;
		    while(n>0)
		    {
		    	a = a + n%10;
		        n = n/10;
		    }
		    return a;
		}
		     
		public static void main(String args[])throws IOException
		{
			// create object here.
			CheckIMEINumber ob = new CheckIMEINumber();
		    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		         
		    // The 'Long' data type is used to store 15 digits.
		    System.out.print("Enter a 15 digit IMEI code : ");
		    long n = Long.parseLong(br.readLine()); 
		         
		    // Converting the number into String for finding length
		    String s = Long.toString(n); 
		    int l = s.length();
		    
		    // If length is not 15 then IMEI is Invalid
		    if(l!=15) 
		    System.out.println("Output : Invalid Input");
		    
		    else
		    {
		    	int d = 0, sum = 0;
		        for(int i=15; i>=1; i--)
		        {
		        	d = (int)(n%10);
		                 
		        	if(i%2 == 0)
		            {
		        		// Doubling every alternate digit
		        		d = 2*d; 
		            }
		 
		        	// Finding sum of the digits
		        	sum = sum + ob.sumDig(d); 
		        	n = n/10;
		        }
		             
		        System.out.println("Output : Sum = "+sum);
		        
		        if(sum%10==0)    
		        	System.out.println("Valid IMEI Code");
		        else
		            System.out.println("Invalid IMEI Code");
		    }
		}
	}

Output
F
program to check Pronic Number
public class CheckPronicNumber 
{
	public static void main(String args[])
    {
		// create object of scanner class
        Scanner sc = new Scanner(System.in);
         
        // enter the number here.
        System.out.print("Enter a number : ");
        int n = sc.nextInt();
        
        int flag = 0;
    
        for(int i=0; i<n; i++)
        {
            if(i*(i+1) == n)
            {
                flag = 1;
                break;
            }
        }
        
        // check here for Pronic number.
        if(flag == 1)
            System.out.println(n+" is a Pronic Number.");
        else
            System.out.println(n+" is not a Pronic Number.");      
    }
}
Output
First run:
Enter a number : 16542
16542 is not a Pronic Number.

Second run:
Enter a number : 462
462 is a Pronic Number.
program to check Harshad Number
Input: 18
    Sum = 1 + 8
    Now, 18 are dividing by 9 completely.
public class CheckHarshadNumber 
{
	public static void main(String args[])
    {
		// create object of the class.
        Scanner sc = new Scanner(System.in);
         
        // enter number here.
        System.out.print("Enter the number to check : ");
        int n = sc.nextInt();
        int c = n, d, sum = 0;
         
        //finding sum of digits
        while(c>0)
        {
            d = c%10;
            sum = sum + d;
            c = c/10;
        }
         
        // condition for harshadNumber
        if(n%sum == 0)
            System.out.println(n+" is a Harshad Number.");
        else
            System.out.println(n+" is not a Harshad Number.");      
    }
}
Output
First run:
Enter the number to check : 442
442 is not a Harshad Number.

Second run:
Enter the number to check : 18
18 is a Harshad Number.
program to check Evil number
Input: 3

Output:
3 – Is an Evil prime.
public class CheckEvilNumber 
{
	// Function to convert a number to Binary
	String toBinary(int n) 
    {
		// declare here.
        int r;
        String s=""; 
  
        // array to store digits.
        char dig[]={'0','1'}; 
  
        while(n>0)
        {
        	// find remainder, add it to digit and reverse the digits.
        	r=n%2; 
        	s=dig[r]+s; 
            n=n/2;
        }
        return s;
    }
     
	// Function to count no of 1's in binary number
    int countOne(String s) 
    {
        int c = 0, l = s.length();
        char ch;
        for(int i=0; i<l; i++)
        {
            ch=s.charAt(i);
            if(ch=='1')
            {
                c++;
            }
        }
        return c;
    }
     
    public static void main(String args[])
    {
    	// create object for number and scanner class.
        CheckEvilNumber ob = new CheckEvilNumber();
        Scanner sc = new Scanner(System.in);
         
        // enter the positive number here.
        System.out.print("Enter a positive number : ");
        int n = sc.nextInt();
         
        String bin = ob.toBinary(n);
        
        // here print the binary number of the number.
        System.out.println("Binary Equivalent = "+bin);
         
        int x = ob.countOne(bin);
        
        // print the number of 1,s
        System.out.println("Number of Ones = "+x);
         
        // check for evil or not.
        if(x%2==0)
            System.out.println(n+" is an Evil Number.");
        else
            System.out.println(n+" is Not an Evil Number.");
    }
}
Output

First run:
Enter a positive number : 4520
Binary Equivalent = 1000110101000
Number of Ones = 5
4520 is Not an Evil Number.

Second run:
Enter a positive number : 9
Binary Equivalent = 1001
Number of Ones = 2
9 is an Evil Number.

Java program to find occurrences of palindrome words in a string.
class CheckPalindromeWords
{
	// create object of buffer class.
	static BufferedReader br=new BufferedReader (new InputStreamReader (System.in));
 
	// function to check palindrome
	boolean IsPalindrome(String s)
	{
		int l=s.length();
		String rev="";
		for(int i=l-1; i>=0; i--)
		{
			rev=rev+s.charAt(i);
		}
		if(rev.equals(s))
			return true;
		else
			return false;
	}
 
	public static void main(String args[])throws IOException
    {
		// create function of palindromewords.
		CheckPalindromeWords ob=new CheckPalindromeWords();
        
		// enter the sentence.
		System.out.print("Enter the sentence : ");
        String s=br.readLine();
        
        // to convert into upper case.
        s=s.toUpperCase();
 
        StringTokenizer str = new StringTokenizer(s,".?! ");
        int w=str.countTokens(); 
 
        String word[]=new String[w];
        for(int i=0;i<w;i++)
        {
            word[i]=str.nextToken();
        }
 
        int count=0;
        System.out.print("OUTPUT : ");
        for(int i=0; i<w; i++)
        {
            if(ob.IsPalindrome(word[i])==true)
            {
                count++;
                System.out.print(word[i]+" ");
            }
        }
 
        // To show the palindrome or not.
        if(count==0)
        System.out.println("No Palindrome Words");
        else
        System.out.println("\nNumber of Palindromic Words : "+count);
    }
}
Output

Enter the sentence : MOM AND DAD ARE MY BEST FRIENDS.
OUTPUT : MOM DAD 
Number of Palindromic Words : 2
program to check Emrip number
Input: 13
    Output:
    13 is Emrip number
    Explanation:
    13 and its reverse is 31 both are primer numbers
class CheckEmirpNumber
{
	// create object and intialize here.
	static BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	int n, rev, f;

	// create parameterised constructor
	CheckEmirpNumber(int nn) 
	{
		n=nn;
		rev=0;
		f=2;
	}

	// function for checking the prime number.
	int isprime(int x) 
	{
		if(f<=x)
		{
			if(x%f!=0) 
			{
				f++;
				isprime(x);
			}
		}

		if(f==x)
			return 1;
		else
			return 0;
	}

	// function to check Emrip number.
	void isEmirp()
	{
		int copy=n, d;
		
		// reversing the number.
		while(copy>0) 
		{
			d=copy%10;
			rev=rev*10+d;
			copy=copy/10;
		}
		
		
		int a=isprime(n); 
		f=2; 
		int b=isprime(rev); 
		
		// if both a and b are equal then it is Emrip
		if(a==1 && b==1)
			System.out.println(n+" is an Emirp Number");
		else
			System.out.println(n+" is Not an Emirp Number");
	}

	public static void main(String args[])throws IOException
	{
		// Enter the number
		System.out.print("Enter the number : ");
		
		int n=Integer.parseInt(br.readLine());
		
		// call the function to check.
		CheckEmirpNumber ob=new CheckEmirpNumber(n);
		ob.isEmirp();
	}    
}
Output

First run:
Enter any number : 13
13 is an Emirp Number

Second run:
Enter the number : 250
250 is Not an Emirp Number
program to find the correct output of student quiz
class QuizCheckResult
{
	// creating array object.
    char A[][],K[];
    int S[],n;
     
    void input()
    {
    	// create object of scanner class.
        Scanner sc = new Scanner(System.in);
        
        // enter number of participants.
        System.out.print("Enter number of participants : ");
        n = sc.nextInt();
        
        // condition of least and heighest input
        if(n<4 || n>10)
        {
        	// input the range here.
            System.out.print("Input size out of range : ");
            System.exit(0);
        }
        
        A = new char[n][5]; 
        K = new char[5]; 
        S = new int[n]; 
        
        // enter the correct answer to check the answers of students.
        System.out.println("\n* Enter answer of each participant row-wise in a single line *\n");
        for(int i = 0; i<n; i++)
        {
            System.out.print("Participant "+(i+1)+" : ");
            for(int j=0; j<5; j++)
            {
                A[i][j] = sc.next().charAt(0);
            }
        }
        System.out.print("\nEnter Answer Key : ");
        for(int i = 0; i<5; i++)
        {
            K[i] = sc.next().charAt(0);
        }
    }
 
    // Function to calculate score of participant
    void Score() 
    {
 
        for(int i = 0; i<n; i++)
        {
            S[i] = 0;
            for(int j=0; j<5; j++)
            {
            	// Checking if Answer of the participants match with the key or not
                if(A[i][j] == K[j]) 
                {
                    S[i]++;
                }
            }
        }
    }
 
    // function to print score.
    void printScore()
    {
        int max = 0;
        System.out.println("\nSCORES : ");
        for(int i = 0; i<n; i++)
        {
            System.out.println("\tParticipant "+(i+1)+" = "+S[i]);
            if(S[i]>max)
            {
            	// Storing the Highest Score
                max = S[i]; 
            }
        }
        System.out.println();
         
        System.out.println("\tHighest Score : "+max);
         
        // Printing all those participant number who got highest score
        System.out.println("\tHighest Scorers : ");
        for(int i = 0; i<n; i++) 
        {
            if(S[i] == max)
            {
                System.out.println("\t\t\tParticipant "+(i+1));
            }
        }
    }
 
    public static void main(String args[])
    {
    	QuizCheckResult ob = new QuizCheckResult();
        ob.input();
        ob.Score();
        ob.printScore();
    }
}
Output

First run:
Enter number of participants : 4

* Enter answer of each participant row-wise in a single line *

Participant 1 : A B D C A
Participant 2 : B B C D A
Participant 3 : A A D C B
Participant 4 : D D C A B

Enter Answer Key : A C B D A

SCORES : 
	Participant 1 = 2
	Participant 2 = 2
	Participant 3 = 1
	Participant 4 = 0

	Highest Score : 2
	Highest Scorers : 
			Participant 1
			Participant 2


Second run:
Enter number of participants : 3
Input size out of range :

program to find sum of factorials from 1 to N
Input: 3
    Output: 9
    Explanation:
    1! + 2! + 3! = 1 + 2 + 6 = 9

    Input: 5
    Output: 152
    Explanation:
    1! + 2! + 3! + 4! + 5!
    = 1+2+6+24+120
    = 153
public class SumOfFactorial
{
	public static void main(String[] args)
	{
		// create scanner class object.
		Scanner sc = new Scanner(System.in);
		
		// enter the number.
		System.out.print("Enter number : ");
		int n = sc.nextInt();
 
		int total=0;
 
		int i=1;
		
		// calculate factorial here.
		while(i <= n) 
		{
			int factorial=1;
			int j=1;
			
			while(j <= i) 
			{
				factorial=factorial*j;
				j = j+1;
			}
			// calculate sum of factorial of the number.
			total = total + factorial;
			i=i+1;
		}
		// print the result here.
		System.out.println("Sum : " + total);
	}
}
Output

First run:
Enter number : 3
Sum : 9

Second run:
Enter number : 5
Sum : 153
program to find the Length of Longest Sequence of 0’s in binary form of a number
public class LengthOfLongestSequence
{
    public static void main(String[] args)
    {
    	// declare and initialize here
    	int Num, rem, quot, i=1, j;
    	
    	int bin_num[] = new int[100];  
    	Scanner SC = new Scanner(System.in);  
         
    	// enter number here.
    	System.out.print("Enter the number : ");  
    	Num = SC.nextInt();  
         
    	quot = Num;  
         
    	// conert into binary number.
    	while(quot != 0)  
    	{  
    		bin_num[i++] = quot%2;  
    		quot = quot/2;  
    	}  
		String Str="";
		System.out.print("Binary number is : ");  
		
		for(j=i-1; j>0; j--)  
		{  
			Str = Str + bin_num[j];	
		}  
		System.out.print(Str);
		i = Str.length()-1;
		
		while(Str.charAt(i)=='0') 
		{
           i--;
		}
		int length = 0;
		int ctr = 0;
		for(; i>=0; i--) 
		{
			if(Str.charAt(i)=='1')
			{
				length = Math.max(length, ctr);
				ctr = 0;
			} 
			else
			{
				ctr++;
			}
		}
		length = Math.max(length, ctr);
		System.out.println("\nLength of the longest sequence: "+length);
    }
}
Output

    First run:
    Enter the number : 26
    Binary number is : 11010
    Length of the longest sequence: 1

    Second run:
    Enter the number : 5269
    Binary number is : 1010010010101
    Length of the longest sequence: 2
program to find cube 1 to N
public class DisplayCubeUptoN
{
	public static void main(String[] args)
	{
		// declare here
		int n,i;

		// enter number upto which you have to find cube.
		System.out.print("Enter the last number for cube : ");
		Scanner Sc= new Scanner(System.in);
		
		// scan the number and store it variable.
		n = Sc.nextInt();

		// loop to find cube for all possile numbers. 
		for(i=1;i<=n;i++)
		{
			System.out.println("Cube of " +i+" is : "+(i*i*i));     
		}
	}
}
Output

Enter the last number for cube : 5
Cube of 1 is : 1
Cube of 2 is : 8
Cube of 3 is : 27
Cube of 4 is : 64
Cube of 5 is : 125

program to find perimeter of a rectangle
Formula to find perimeter of a rectangle: perimeter = 2 (Length + Width)
public class CalPerimeterOfRectangle 
{
	public static void main(String[] args)
	{     
		int width = 0;
		int length = 0;
		try
		{
			// create object of the buffer class.
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

			// enter length and width of the rectangle.
			System.out.print("Enter length of the rectangle : ");
			length = Integer.parseInt(br.readLine());

			System.out.print("Enter width of the rectangle : ");
			width = Integer.parseInt(br.readLine());       
		}
		// check for invalid value.
		catch(NumberFormatException ne)
		{
			System.out.print("Invalid value" + ne);
			System.exit(0);
		}
		catch(IOException ioe)
		{
			System.out.println("IO Error :" + ioe);
			System.exit(0);
		}
		
		// formula to calculate parimeter.
		int perimeter = 2 * (length + width);
		System.out.print("Perimeter of a rectangle is : " + perimeter);
	}
}
Output

Enter length of the rectangle : 25
Enter width of the rectangle : 22
Perimeter of a rectangle is : 94
Program to create a two dimensional array fill it with given few characters
public class ExArrayFillWithDIffCharacters 
{
	public static void main(String args[])
	{
		// create scanner class object.
		Scanner Sc = new Scanner(System.in);

		// enter the size here.
		System.out.print("Enter size of the Array : ");
		int n = Sc.nextInt();
		// enter size in given range.
		if(n<2 || n>10)		
			System.out.print("Size out of Range");
		else
		{
			// declare array object.
			char A[][]=new char[n][n];

			// enter different characters for filling the array
			System.out.print("Enter first character : ");
			char c1 = Sc.next().charAt(0);

			System.out.print("Enter second character : ");
			char c2 = Sc.next().charAt(0);

			System.out.print("Enter third character : ");
			char c3 = Sc.next().charAt(0);

			for(int i=0; i<n; i++)
			{
				for(int j=0; j<n; j++)
				{
					// Filling the diagonals with third character
					if(i==j || (i+j)==(n-1))					
						A[i][j] = c3; 					
					else // Filling all other positions with second character
						A[i][j] = c2; 
				}
			}

			for(int i=0; i<n/2; i++)
			{
				for(int j=i+1; j<n-1-i; j++)
				{
					// Filling the upper positions.
					A[i][j] = c1; 

					// Filling the lower positions.
					A[n-1-i][j] = c1; 
				}
			}

			// Printing the Matrix
			System.out.println("\nOutput : \n");
			for(int i=0; i<n; i++)
			{
				for(int j=0; j<n; j++)
				{
					System.out.print(A[i][j]+" ");
				}
				System.out.println();
			}
		}
	}
}
Output

Enter size of the Array : 5
Enter first character : @
Enter second character : *
Enter third character : #

Output : 

# @ @ @ # 
* # @ # * 
* * # * * 
* # @ # * 
# @ @ @ #
program to print patterns (2 Examples based on numbers pattern)
Pattern 1

    1 
    1 2 
    1 2 3 
    1 2 3 4 
    1 2 3 4 5 
    1 2 3 4 5 6 
    1 2 3 4 5 6 7 
    1 2 3 4 5 6 7 8 
    1 2 3 4 5 6 7 8 9 
    1 2 3 4 5 6 7 8 9 10
public class Pattern27 
{
	public static void main(String[] args) 
    {
		// create scanner class object.
        Scanner sc = new Scanner(System.in);
         
        // input row for printing pattern.
        System.out.print("Enter row for pattern : ");
         
        int rows = sc.nextInt();
        
        System.out.println("Here is your pattern....!!!");
         
        // loop for printing pattern.
        for (int i = 1; i <= rows; i++) 
        {
            for (int j = 1; j <= i; j++)
            {
                System.out.print(j+" ");
            }            
            System.out.println();
        }
        sc.close();
    }
}
Enter row for pattern : 5
Here is your pattern....!!!
1 2 3 4 5 
1 2 3 4 
1 2 3 
1 2 
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 

public class Pattern28 
{
	public static void main(String[] args) 
    {
		// create scanner class object.
        Scanner sc = new Scanner(System.in);
         
        // input row for printing pattern.
        System.out.print("Enter row for pattern : ");
         
        int rows = sc.nextInt();
         
        System.out.println("Here is your pattern....!!!");
        
        // this loop will print the pattern in two parts first half and second half.
        for (int i = rows; i >= 1; i--) 
        {
            for (int j = 1; j <= i; j++)
            {
                System.out.print(j+" ");
            }      
            System.out.println();
        }
        
        for (int i = 2; i <= rows; i++) 
        {
            for (int j = 1; j <= i; j++)
            {
                System.out.print(j+" ");
            }             
            System.out.println();
        }
        sc.close();
    }
}
print prime numbers between given range
public class LengthOfLongestSequence
{
	public static void main(String[] args) {
		System.out.println("Prime number are;");
		int i,j,count = 0;
		for (i = 1; i <=100; i++) {
			for (j = 2; j <i; j++) {
				if (i%j==0) {
					count = 0;
					break;
				}
				else
				{
					count =1;
				}
			}
			if (count==1) {
				System.out.println(i);
			}
		}
	}
}
OUTPUT:
3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97
Program to Compute Quotient and Remainder
public class QuotientRemainder {

    public static void main(String[] args) {

        int dividend = 25, divisor = 4;

        int quotient = dividend / divisor;
        int remainder = dividend % divisor;

        System.out.println("Quotient = " + quotient);
        System.out.println("Remainder = " + remainder);
    }
}
When you run the program, the output will be:  
4)25(6
  24
 --------
   1
 --------

Quotient = 6
Remainder = 1
Program to Find all Roots of a Quadratic Equation
The standard form of a quadratic equation is:

ax2 + bx + c = 0, where
a, b and c are real numbers and
a ≠ 0
The term b2-4ac is known as the determinant of a quadratic equation. The determinant tells the nature of the roots.

If determinant is greater than 0, the roots are real and different.
If determinant is equal to 0, the roots are real and equal.
If determinant is less than 0, the roots are complex and different.
public class Quadratic {

    public static void main(String[] args) {

        double a = 2.3, b = 4, c = 5.6;
        double root1, root2;

        double determinant = b * b - 4 * a * c;

        // condition for real and different roots
        if(determinant > 0) {
            root1 = (-b + Math.sqrt(determinant)) / (2 * a);
            root2 = (-b - Math.sqrt(determinant)) / (2 * a);

            System.out.format("root1 = %.2f and root2 = %.2f", root1 , root2);
        }
        // Condition for real and equal roots
        else if(determinant == 0) {
            root1 = root2 = -b / (2 * a);

            System.out.format("root1 = root2 = %.2f;", root1);
        }
        // If roots are not real
        else {
            double realPart = -b / (2 *a);
            double imaginaryPart = Math.sqrt(-determinant) / (2 * a);

            System.out.format("root1 = %.2f+%.2fi and root2 = %.2f-%.2fi", realPart, imaginaryPart, realPart, imaginaryPart);
        }
    }
}
When you run the program, the output will be:

root1 = -0.87+1.30i and root2 = -0.87-1.30i
Program to Find Factorial of a Number
factorial of n (n!) = 1 * 2 * 3 * 4 * ... * n
public class Factorial {

    public static void main(String[] args) {

        int num = 10;
        long factorial = 1;
        for(int i = 1; i <= num; ++i)
        {
            // factorial = factorial * i;
            factorial *= i;
        }
        System.out.printf("Factorial of %d = %d", num, factorial);
    }
}
Factorial of 10 = 3628800
public class Factorial {

    public static void main(String[] args) {

        int num = 5, i = 1;
        long factorial = 1;
        while(i <= num)
        {
            factorial *= i;
            i++;
        }
        System.out.printf("Factorial of %d = %d", num, factorial);
    }
}
When you run the program, the output will be:

Factorial of 5 = 120
 Program to Display Fibonacci Series
public class Fibonacci {

    public static void main(String[] args) {

        int n = 10, t1 = 0, t2 = 1;
        System.out.print("First " + n + " terms: ");

        for (int i = 1; i <= n; ++i)
        {
            System.out.print(t1 + " + ");

            int sum = t1 + t2;
            t1 = t2;
            t2 = sum;
        }
    }
}
When you run the program, the output will be:

0 + 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + 34 +
Find GCD of two numbers using for loop and if statement
public class GCD {

    public static void main(String[] args) {

        int n1 = 81, n2 = 153;

        while(n1 != n2)
        {
            if(n1 > n2)
                n1 -= n2;
            else
                n2 -= n1;
        }

        System.out.println("G.C.D = " + n1);
    }
}
When you run the program, the output will be:

G.C.D = 9
GCD for both positive and negative numbers
public class GCD {

    public static void main(String[] args) {

        int n1 = 81, n2 = -153;

        // Always set to positive
        n1 = ( n1 > 0) ? n1 : -n1;
        n2 = ( n2 > 0) ? n2 : -n2;

        while(n1 != n2)
        {
            if(n1 > n2)
                n1 -= n2;
            else
                n2 -= n1;
        }

        System.out.println("G.C.D = " + n1);
    }
}
When you run the program, the output will be:

G.C.D = 9
Program to Find LCM of two Numbers
public class GCD {

    public static void main(String[] args) {

        int n1 = 72, n2 = 120,lcm = 0;

        while(n1 != n2)
        {
            if(n1 > n2){
                n1 -= n2;
              lcm=(n1*n2)/n1;}
            else{
                n2 -= n1;
            }
        }
       
        System.out.println("G.C.D = " + n1);
        System.out.println("LCM:"+lcm);
    }
}
Program to Count Number of Digits in an Integer
package com.increment;
public class NumberDigits {

    public static void main(String[] args) {

        int count = 0, num = 3452;

        while(num != 0)
        {
            // num = num/10
            num /= 10;
            ++count;
        }

        System.out.println("Number of digits: " + count);
    }
}
When you run the program, the output will be:

Number of digits: 4
public class NumberDigits {

    public static void main(String[] args) {

        int count = 0, num = 123456;

        for(; num != 0; num/=10, ++count) {   
        }

        System.out.println("Number of digits: " + count);
    }
}
When you run the program, the output will be:

Number of digits: 6
Program to Reverse a Number
public class ReverseNumber {

    public static void main(String[] args) {

        int num = 1234, reversed = 0;

        while(num != 0) {
            int digit = num % 10;
            reversed = reversed * 10 + digit;
            num /= 10;
        }

        System.out.println("Reversed Number: " + reversed);
    }
}
When you run the program, the output will be:

Reversed Number: 4321
Program to Calculate the Power of a Number
public class Power {

    public static void main(String[] args) {

        int base = 3, exponent = 4;

        long result = 1;

        while (exponent != 0)
        {
            result *= base;
            --exponent;
        }

        System.out.println("Answer = " + result);
    }
}
When you run the program, the output will be:

Answer = 81

public class Power {

    public static void main(String[] args) {

        int base = 3, exponent = -4;
        double result = Math.pow(base, exponent);

        System.out.println("Answer = " + result);
    }
}
When you run the program, the output will be:

Answer = 0.012345679012345678
Program to Check Whether a Number is Palindrome or Not
public class Palindrome {

    public static void main(String[] args) {

        int num = 121, reversedInteger = 0, remainder, originalInteger;

        originalInteger = num;

        // reversed integer is stored in variable 
        while( num != 0 )
        {
            remainder = num % 10;
            reversedInteger = reversedInteger * 10 + remainder;
            num  /= 10;
        }

        // palindrome if orignalInteger and reversedInteger are equal
        if (originalInteger == reversedInteger)
            System.out.println(originalInteger + " is a palindrome.");
        else
            System.out.println(originalInteger + " is not a palindrome.");
    }
}
When you run the program, the output will be:

121 is a palindrome number.
Here are the execution steps that takes place:
Palindrome execution steps
num	num != 0	remainder	reversedInteger
121	true	1	0 * 10 + 1 = 1
12	true	2	1 * 10 + 2 = 12
1	true	1	12 * 10 + 1 = 121
0	false	-	121
Check Whether a Number is Prime or Not
public class Prime {

    public static void main(String[] args) {

        int num = 29;
        boolean flag = false;
        for(int i = 2; i <= num/2; ++i)
        {
            // condition for nonprime number
            if(num % i == 0)
            {
                flag = true;
                break;
            }
        }

        if (!flag)
            System.out.println(num + " is a prime number.");
        else
            System.out.println(num + " is not a prime number.");
    }
}
When you run the program, the output will be:

29 is a prime number.
Program to Check Armstrong Number
abcd... = an + bn + cn + dn + ...
153 = 1*1*1 + 5*5*5 + 3*3*3  // 153 is an Armstrong number.
public class Armstrong {

    public static void main(String[] args) {

        int number = 371, originalNumber, remainder, result = 0;

        originalNumber = number;

        while (originalNumber != 0)
        {
            remainder = originalNumber % 10;
            result += remainder*remainder*remainder;//result += Math.pow(remainder, 3);
            originalNumber /= 10;
        }

        if(result == number)
            System.out.println(number + " is an Armstrong number.");
        else
            System.out.println(number + " is not an Armstrong number.");
    }
}
When you run the program, the output will be:

371 is an Armstrong number.
Program to Display Armstrong Number Between Two Intervals
public class Armstrong {

    public static void main(String[] args) {

        int low = 999, high = 99999;

        for(int number = low + 1; number < high; ++number) {
            int digits = 0;
            int result = 0;
            int originalNumber = number;

            // number of digits calculation
            while (originalNumber != 0) {
                originalNumber /= 10;
                ++digits;
            }

            originalNumber = number;

            // result contains sum of nth power of its digits
            while (originalNumber != 0) {
                int remainder = originalNumber % 10;
                result += Math.pow(remainder, digits);
                originalNumber /= 10;
            }

            if (result == number)
                System.out.print(number + " ");
        }
    }
}
When you run the program, the output will be:

1634 8208 9474 54748 92727 93084
Find Factorial of a Number Using Recursion
public class Factorial {

    public static void main(String[] args) {
        int num = 6;
        long factorial = multiplyNumbers(num);
        System.out.println("Factorial of " + num + " = " + factorial);
    }
    public static long multiplyNumbers(int num)
    {
        if (num >= 1)
            return num * multiplyNumbers(num - 1);
        else
            return 1;
    }
}
When you run the program, the output will be:

Factorial of 6 = 720
Program to Convert Binary Number to Decimal and vice-versa
Program to convert binary number to decimal
public class BinaryDecimal {

    public static void main(String[] args) {
        long num = 110110111;
        int decimal = convertBinaryToDecimal(num);
        System.out.printf("%d in binary = %d in decimal", num, decimal);
    }

    public static int convertBinaryToDecimal(long num)
    {
        int decimalNumber = 0, i = 0;
        long remainder;
        while (num != 0)
        {
            remainder = num % 10;
            num /= 10;
            decimalNumber += remainder * Math.pow(2, i);
            ++i;
        }
        return decimalNumber;
    }
}
When you run the program, the output will be:

110110111 in binary = 439 in decimal
Program to convert decimal number to binary
public class DecimalBinary {

    public static void main(String[] args) {
        int num = 19;
        long binary = convertDecimalToBinary(num);
        System.out.printf("%d in decimal = %d in binary", num, binary);
    }

    public static long convertDecimalToBinary(int n)
    {
        long binaryNumber = 0;
        int remainder, i = 1, step = 1;

        while (n!=0)
        {
            remainder = n % 2;
            System.out.printf("Step %d: %d/2, Remainder = %d, Quotient = %d\n", step++, n, remainder, n/2);
            n /= 2;
            binaryNumber += remainder * i;
            i *= 10;
        }
        return binaryNumber;
    }
}
When you run the program, the output will be:

Step 1: 19/2, Remainder = 1, Quotient = 9
Step 2: 9/2, Remainder = 1, Quotient = 4
Step 3: 4/2, Remainder = 0, Quotient = 2
Step 4: 2/2, Remainder = 0, Quotient = 1
Step 5: 1/2, Remainder = 1, Quotient = 0
19 in decimal = 10011 in binary
rt run:
Enter a 15 digit IMEI code : 111111111111111
Output : Sum = 22
Invalid IMEI Code

Second run:
Enter a 15 digit IMEI code : 474154203237518
Output : Sum = 60
Valid IMEI Code
	


Can we run define Java Class without main() method?
No, We cannot define a class without main() method starting from Java 7. In the previous release of Java, we can have Static Initalizers as an alternative:
public class MainMethodDemo
{
    static
    {
        System.out.println("Static Initalizer");
        System.exit(0);
    }
}
Output: (From JDK 7)
Error: Main method not found in class Test, please define the main method as:
   public static void main(String[] args)
or a JavaFX application class must extend javafx.application.Application
Output: (JDK 6)
Static Initalizer
Example:
public class ModuloTest
{
public static void main(String[] args) {
	int arr[] ={1,2,3,4,5};
	for (int i = 0; i < arr.length; i++) {
		System.out.println(arr[i]+" "+i);
	}
	System.out.println("array lenght="+arr.length);
	}	
}
Output:
1 0
2 1
3 2
4 3
5 4
array lenght=5
EX:
Example
public class ArrayDemo {

    public static void main(String[] args) {
        int[][] numArr = new int[3][3];
        // providing values for array
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++){
                numArr[i][j] = i + j;
            }
        }
        // Displaying array elements
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++){
                System.out.print(" " + numArr[i][j]);
            }
            System.out.println();
        }
        
    }

}
Output
 0 1 2
 1 2 3
 2 3 4
Removing Numbers in array:
public class Test {
	public static void main(String args[]) {
		int array[] = { 10, 20, 30, 20, 40, 40, 50, 60, 70, 80 };// array of ten
		// elements
		int size = array.length;
		System.out.println("Size before deletion: " + size);
		for (int i = 0; i < size; i++) {
			for (int j = i + 1; j < size; j++) {
				if (array[i] == array[j]) // checking one element with all the
				// element
				{
					while (j < (size) - 1) {
						array[j] = array[j + 1];// shifting the values
						j++;
					}
					size--;
				}
			}
		}
		System.out.println("Size After deletion: " + size);
		for (int k = 0; k < size; k++) {
			System.out.println(array[k]); // printing the values
		}
	}

}

Output:
Size before deletion: 10
Size After deletion: 8
10
20
30
40
50
60
70
80

Missing Number given Array:
public class Test {
	static int sum = 0;
	public static void main(String[] args) {
		int[] i = { 1, 2, 4, 6,3, 7 };//6
		int n = i.length + 1;//7
		int totalCount= missingNumber(n);//28
		int sumOfArr= sumOfArr(i);//22
		int missingNumber = totalCount -sumOfArr ;//28-22=6
		System.out.println("Your Missing Number Is  :: " + missingNumber);//5
	}
	private static int sumOfArr(int[] i) {
		for (int j = 0; j < i.length; j++) {
			sum = sum + i[j];
		}
		return sum;
	}
	private static int missingNumber(int n) {
		int totalSum = (n * (n + 1)) / 2;
		return totalSum;
	}
}
1 to 10 or N also without using loops and if condition
public class Test {
	public void print1To10() {
		int[] arr = new int[11];
		try {
			printLn(arr, 1);
		} catch (ArrayIndexOutOfBoundsException e) {
		}
	}
	public void printLn(int[] arr, int i) {
		arr[i] = arr[i - 1] + 1;
		System.out.print(arr[i]+" ");//1 2 3 4 5 6 7 8 9 10 
		printLn(arr, i + 1);
	}
	public static void main(String[] args) {
		Test pwt = new Test();
		pwt.print1To10();
	}
}

EX:
public class Test {
	public static void main(String[] args) {
		Object[] al = new Object[]{"kolle","sari",12,23,null,'c','s',null};
		System.out.println("All Elements:");
		for (Object object : al) {
			System.out.println(object);
		}
		System.out.println("Integer Elements");
		for (Object i : al) {
			if (i instanceof Integer) {
				System.out.println(i);
			}
		}
		System.out.println("String Elements");
		for (Object str : al) {
			if (str instanceof String) {
				System.out.println(str);
			}
		}
		System.out.println("Character Elements");
		for (Object c : al) {
			if (c instanceof Character) {
				System.out.println(c);
			}
		}
		System.out.println("Null values");
		for (Object c : al) {
			if (c == null) {
				System.out.println(c);
			}
		}
		System.out.println("Not Null values");
		for (Object c : al) {
			if (c != null) {
				System.out.println(c);
			}
		}
	}
}
EX:
public class Test {
	   public static boolean contains(int[] arr, int item) {
	      int index = Arrays.binarySearch(arr, item);
	      return index >= 0;
	   }
	   public static void main(String[] args) {
	      int[] myArray = { 5, 2, 17, 13, 12, 19, 7, 3, 9, 15 };
	      Arrays.sort(myArray);
	      System.out.println(contains(myArray, 13));true
	      System.out.println(contains(myArray, 25));false
	   }
	}
EX:
public class Test {
	   public static int contains(int[] arr, int item) {
	      int index = Arrays.binarySearch(arr, item);
	      return index;
	   }
	   public static void main(String[] args) {
	      int[] myArray = { 5, 2, 17, 13, 12, 19, 7, 3, 9, 15 };
	      Arrays.sort(myArray);
	      System.out.println("At poition:"+contains(myArray, 13));//6
	      System.out.println("Not Found:"+contains(myArray, 25));Not found:-11
	   }
	}

find second largest element in an array
public class Test {
	public static void main(String[] args) 
    {
    	// intialise here.
        int a[] = new int[]{23,455,76,87};
        int length =a.length;
        for (int i = 0; i < length; i++) 
        {
            for (int j = i + 1; j <length; j++) 
            {
                if (a[i] > a[j]) 
                {
                   int  max = a[i];
                    a[i] = a[j];
                    a[j] = max;
                }
            }
        }
        System.out.println("The Second Largest Elements in the Array is :"+a[length-2]);//87—[length-n]
    }
}

find second smallest element in an array
public class Test {
	public static void main(String[] args) 
    {
    	// intialise here.
        int a[] = new int[]{23,455,76,87};
        int length =a.length;
        for (int i = 0; i < length; i++) 
        {
            for (int j = i + 1; j <length; j++) 
            {
                if (a[i] > a[j]) 
                {
                   int  max = a[i];
                    a[i] = a[j];
                    a[j] = max;
                }
            }
        }
        System.out.println("The Second Largest Elements in the Array is :"+a[1]);//a[0....n]
    }
}
program to count strings and integers from an array
Input:
    Array = {"Raj", "77", "101", "99", "Jio"}

    Output:
    Numeric:3
    Strings:2
public class Test{
	
	public static void main(String arg[])
	{
		// enter string u want here.
		String x[]={"Raj","77","101","99","Jio"};
		int cn=0,cs=0;

		//print array elements
		System.out.println("Array elements are: ");
		for(int i=0; i<x.length; i++){
			System.out.println(x[i]);
		}

		// scan the string.
		for(int i=0; i<x.length; i++)
		{
			try
			{
				int j=Integer.parseInt(x[i]);
				cn++;
			}
			catch(NumberFormatException e)
			{
				cs++;
			}
		}
		// show the numeric and string value after counting.
		System.out.println("Numeric:"+cn+"\nStrings:"+cs);
	}
}
Output:
Array elements are: 
Raj
77
101
99
Jio
Numeric:3
Strings:2
Java program to check whether a given matrix is Lower Triangular Matrix or not
public class ExArrayLowerMatrix 
{
	public static void main(String args[])throws Exception
	{
		// create object of scanner class
		Scanner sc=new Scanner(System.in);

		// enter the size.
		System.out.print("Enter the size of the matrix : ");

		int m=sc.nextInt();
		int A[][]=new int[m][m];

		// Input the matrix.
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<m;j++)
			{
				System.out.print("Enter the elements : ");
				A[i][j]=sc.nextInt();
			}
		}

		// printing the matrix.
		System.out.println("*************************");
		System.out.println("The Matrix is : ");
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<m;j++)
			{
				System.out.print(A[i][j]+"\t");
			}
			System.out.println();
		}
		
		System.out.println("*************************");

		int p=0;

		for(int i=0;i<m;i++)
		{
			for(int j=i+1;j<m;j++)
			{
				// check for lower matrix or not.
				if(A[i][j]!=0) 
				{
					p=1;
					break;
				}
			}
		}

		// print matrix is lower triangular or not.
		if(p==0)
			System.out.println("The matrix is Lower Triangular");
		else
			System.out.println("The matrix is not Lower Triangular");
	}
}
Output

First run:
Enter the size of the matrix : 5
Enter an element : 1
Enter an element : 2
Enter an element : 3
Enter an element : 4
Enter an element : 5
Enter an element : 6
Enter an element : 7
Enter an element : 8
Enter an element : 9
Enter an element : 1
Enter an element : 0
Enter an element : 12
Enter an element : 5
Enter an element : 9
Enter an element : 3
Enter an element : 6
Enter an element : 5
Enter an element : 8
Enter an element : 2
Enter an element : 5
Enter an element : 8
Enter an element : 2
Enter an element : 5
Enter an element : 2
Enter an element : 5
*************************
The Matrix is : 
1	2	3	4	5	
6	7	8	9	1	
0	12	5	9	3	
6	5	8	2	5	
8	2	5	2	5	
*************************
The matrix is not Lower Triangular

Second run:
Enter the size of the matrix : 3
Enter an element : 0
Enter an element : 0
Enter an element : 0
Enter an element : 1
Enter an element : 0
Enter an element : 0
Enter an element : 1
Enter an element : 1
Enter an element : 0
*************************
The Matrix is : 
0	0	0	
1	0	0	
1	1	0	
*************************
The matrix is Lower Triangular

program to check whether a matrix is symmetric or not
public class ExArrayFindSymmetric 
{
	public static void main(String args[])throws IOException
	{
		// create buffer class object.
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));

		// enter how many elements you have to enter.
		System.out.print("Enter the number of elements : ");
		int m=Integer.parseInt(br.readLine());
		int A[][]=new int[m][m];

		// Check for rows and column.
		if(m>2 && m<10) 
		{  
			// enter the elements here.
			System.out.println("\nInputting the elements of the Matrix : n");
			for(int i=0;i<m;i++)
			{
				for(int j=0;j<m;j++)
				{
					System.out.print("Enter the elements : ");
					A[i][j]=Integer.parseInt(br.readLine());
				}
			}

			// here the original matrix.
			System.out.println("\nThe Original Matrix is : ");
			for(int i=0;i<m;i++)
			{
				for(int j=0;j<m;j++)
				{
					System.out.print(A[i][j]+"\t");
				}
				System.out.println();
			}

			// check weather matrix is symmetric or not.
			int flag = 0;
			for(int i=0;i<m;i++)
			{
				for(int j=0;j<m;j++)
				{
					if(A[i][j] != A[j][i])
					{
						// When elements do not matched.
						flag = 1; 
						break;
					}
				}
			}
			// check for symmetric or not.
			if(flag == 1)
				System.out.println("\nThe given Matrix is Not Symmetric");
			else
				System.out.println("\nThe given Matrix is Symmetric");

			// calculate sum of diagonals.
			int ld = 0, rd = 0;
			for(int i=0;i<m;i++)
			{
				for(int j=0;j<m;j++)
				{
					// for the left diagonal
					if(i == j) 
					{
						ld = ld + A[i][j];
					}
					// for the right diagonal
					if((i+j) == (m-1)) 
					{
						rd = rd + A[i][j];
					}
				}
			}

			// print sum of left and right diagonals.
			System.out.println("The sum of the left diagonal = "+ld);
			System.out.println("The sum of the right diagonal = "+rd);
		}
		else
		System.out.println("The Matrix Size is Out Of Range....");
	}
}
Output

First run:
Enter the number of elements : 3

Inputting the elements of the Matrix : n
Enter the elements : 11
Enter the elements : 12
Enter the elements : 12
Enter the elements : 55
Enter the elements : 65
Enter the elements : 66
Enter the elements : 45
Enter the elements : 25
Enter the elements : 35

The Original Matrix is : 
11	12	12	
55	65	66	
45	25	35	

The given Matrix is Not Symmetric
The sum of the left diagonal = 111
The sum of the right diagonal = 122

Second run:
Enter the number of elements : 3

Inputting the elements of the Matrix : n
Enter the elements : 11
Enter the elements : 11
Enter the elements : 11
Enter the elements : 11
Enter the elements : 11
Enter the elements : 11
Enter the elements : 11
Enter the elements : 11
Enter the elements : 11

The Original Matrix is : 
11	11	11	
11	11	11	
11	11	11	

The given Matrix is Symmetric
The sum of the left diagonal = 33
The sum of the right diagonal = 33

Third run:
Enter the number of elements : 2
The Matrix Size is Out Of Range....
program to print boundary elements of the matrix

public class ExArrayPrintBoundrayElements
{
	public static void main(String args[])throws IOException
	{
		// declare the objects.
		int i,j,m,n;

		// create the object of buffer class.
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));

		// enter rows and columns.
		System.out.print("Enter the rows : "); 
		m=Integer.parseInt(br.readLine());
		System.out.print("Enter the columns : "); 

		n=Integer.parseInt(br.readLine());

		//Creating the array
		int A[][]=new int[m][n]; 

		// Input the elements.
		for(i=0;i<m;i++)
		{
			for(j=0;j<n;j++)
			{
				// enter elements.
				System.out.println("Enter the elements : ");
				A[i][j]=Integer.parseInt(br.readLine());
			}
		}

		// this will print the boundary elements.
		System.out.println("The Boundary Elements are:");
		for(i=0;i<m;i++)
		{
			for(j=0;j<n;j++)
			{
				// condition for obtaining the boundary elements
				if(i==0 || j==0 || i == m-1 || j == n-1) 
					System.out.print(A[i][j]+"\t");
				else
					System.out.print(" \t");
			}
			System.out.println();
		}
	}
}
Output
Enter the rows : 3
Enter the columns : 4

Enter the elements : 1
Enter the elements : 2
Enter the elements : 5
Enter the elements : 6
Enter the elements : 9
Enter the elements : 8
Enter the elements : 7
Enter the elements : 3
Enter the elements : 6
Enter the elements : 5
Enter the elements : 7
Enter the elements : 4

The Boundary Elements are:
1	2	5	6	
9	 	 	3	
6	5	7	4	
Java Operator Precedence
Operator Type	Category	Precedence
Unary	postfix	expr++ expr—
1.	int x=10;  
2.	System.out.println(x++);//10 (11)  
3.	System.out.println(++x);//12  
4.	System.out.println(x--);//12 (11)  
5.	System.out.println(--x);//10
	prefix	++expr --expr +expr -expr ~ !
1.	int a=10;  
2.	int b=10;  
3.	System.out.println(a++ + ++a);//10+12=22  
4.	System.out.println(b++ + b++);//10+11=21  
1.	int a=10;  
2.	int b=-10;  
3.	boolean c=true;  
4.	boolean d=false;  
5.	System.out.println(~a);//-11 (minus of total positive value which starts from 0)  
6.	System.out.println(~b);//9 (positive of total minus, positive starts from 0)  
7.	System.out.println(!c);//false (opposite of boolean value)  
8.	System.out.println(!d);//true  
9.	}}  
Arithmetic	multiplicative	* / %
1.	int a=10;  
2.	int b=5;  
3.	System.out.println(a+b);//15  
4.	System.out.println(a-b);//5  
5.	System.out.println(a*b);//50  
6.	System.out.println(a/b);//2  
7.	System.out.println(a%b);//0  
1.	System.out.println(10*10/5+3-1*4/2);//21
2.	Solution:10*2+3-1*2=20+3-2=21
	additive	+ -
Shift	shift	<<>>>>>
1.	System.out.println(10<<2);//10*2^2=10*4=40  
2.	System.out.println(10<<3);//10*2^3=10*8=80  
3.	System.out.println(20<<2);//20*2^2=20*4=80  
4.	System.out.println(15<<4);//15*2^4=15*16=240  
1.	System.out.println(10>>2);//10/2^2=10/4=2  
2.	System.out.println(20>>2);//20/2^2=20/4=5  
3.	System.out.println(20>>3);//20/2^3=20/8=2  
1.	//For positive number, >> and >>> works same  
2.	    System.out.println(20>>2);  //5
3.	    System.out.println(20>>>2);  //5
4.	    //For negative number, >>> changes parity bit (MSB) to 0  
5.	    System.out.println(-20>>2);  //-5
    System.out.println(-20>>>2);  //1073741819
Relational	comparison	<><= >= instanceof
	equality	== !=
Bitwise	bitwise AND	&
The logical && operator doesn't check second condition if first condition is false. It checks second condition only if first one is true.The bitwise & operator always checks both conditions whether first condition is true or false
1.	int a=10;  
2.	int b=5;  
3.	int c=20;  
4.	System.out.println(a<b&&a<c);//false && true = false  
5.	System.out.println(a<b&a<c);//false & true = false  
	bitwise exclusive OR	^
	bitwise inclusive OR	|
The logical || operator doesn't check second condition if first condition is true. It checks second condition only if first one is false.The bitwise | operator always checks both conditions whether first condition is true or false.
1.	int a=10;  
2.	int b=5;  
3.	int c=20;  
4.	System.out.println(a>b||a<c);//true || true = true  
5.	System.out.println(a>b|a<c);//true | true = true  
6.	//|| vs |  
7.	System.out.println(a>b||a++<c);//true || true = true  
8.	System.out.println(a);//10 because second condition is not checked  
9.	System.out.println(a>b|a++<c);//true | true = true  
System.out.println(a);//11 because second condition is checked 
Logical	logical AND	&&
	logical OR	||
Ternary	ternary	? :
1.	int a=2;  
2.	int b=5;  
3.	int min=(a<b)?a:b;  
4.	System.out.println(min);  
Assignment	assignment	= += -= *= /= %= &= ^= |= <<= >>= >>>=
1.	int a=10;  
2.	int b=20;  
3.	a+=4;//a=a+4 (a=10+4)  
4.	b-=4;//b=b-4 (b=20-4)  
5.	System.out.println(a);  
6.	System.out.println(b);  


Counting number of lines, words, characters and paragraphs in a text file using Java


public class ReverseString
{
    public static void main(String[] args) throws IOException
    {
        File file = new File("D:\\MB&IB\\Dialy activities\\16-08-2018.txt");
        FileInputStream fileStream = new FileInputStream(file);
        InputStreamReader input = new InputStreamReader(fileStream);
        BufferedReader reader = new BufferedReader(input);
          
        String line;
          
        // Initializing counters
        int countWord = 0;
        int sentenceCount = 0;
        int characterCount = 0;
        int paragraphCount = 1;
        int whitespaceCount = 0;
          
        // Reading line by line from the  
        // file until a null is returned
        while((line = reader.readLine()) != null)
        {
            if(line.equals(""))
            {
                paragraphCount++;
            }
            if(!(line.equals("")))
            {
                  
                characterCount += line.length();
                  
                // \\s+ is the space delimiter in java
                String[] wordList = line.split("\\s+");
                  
                countWord += wordList.length;
                whitespaceCount += countWord -1;
                  
                // [!?.:]+ is the sentence delimiter in java
                String[] sentenceList = line.split("[!?.:]+");
                  
                sentenceCount += sentenceList.length;
            }
        }
          
        System.out.println("Total word count = " + countWord);
        System.out.println("Total number of sentences = " + sentenceCount);
        System.out.println("Total number of characters = " + characterCount);
        System.out.println("Number of paragraphs = " + paragraphCount);
        System.out.println("Total number of whitespaces = " + whitespaceCount);
    }
}

Read and write image from source to destionation with formate?
package com.image
;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;

import javax.imageio.ImageIO;

public class DisplayImage {
	public static void main(String[] args) throws IOException {
		BufferedImage image = null;
        try {
          
            URL url = new URL("https://images.pexels.com/photos/35807/rose-red-rose-romantic-rose-bloom.jpg");
            image = ImageIO.read(url);
//        	File f = new File("D:\\approval.PNG");
//        	image = ImageIO.read(f);
            
            ImageIO.write(image, "jpg",new File("D:\\out.jpg"));
            ImageIO.write(image, "gif",new File("D:\\out.gif"));
            ImageIO.write(image, "png",new File("D:\\out.png"));
            
        } catch (IOException e) {
        	e.printStackTrace();
        }
		System.out.println();
	        
	}
}


Read image from source and display image?
package com.image;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
public class ShowImage extends Panel {
  /**
	 *
	 */
	private static final long serialVersionUID = 1L;
BufferedImage  image;
  public ShowImage() {
  try {
  System.out.println("Enter image name\n");
  BufferedReader bf=new BufferedReader(new
InputStreamReader(System.in));
 String imageName=bf.readLine();
  File input = new File(imageName);
  image = ImageIO.read(input);
  } catch (IOException ie) {
  System.out.println("Error:"+ie.getMessage());
  }
  }

  public void paint(Graphics g) {
  g.drawImage( image, 0, 0, null);
  }

  static public void main(String args[]) throws
Exception {
  JFrame frame = new JFrame("Display image");
  Panel panel = new ShowImage();
  frame.getContentPane().add(panel);
  frame.setSize(500, 500);
  frame.setVisible(true);
  }
}

Different ways to read a files?

BufferedReader provides buffering of data for fast reading, and Scanner provides parsing ability. Java SE 8 introduces another Stream class java.util.stream.Stream which provides a lazy and more efficient way to read a file
Here usual practices of writing good code like flushing/closing streams, Exception-Handling etc,

Using BufferedReader: Read file from source

public class ShowImage  {
private static BufferedReader bufferedReader;

public static void main(String[] args) throws IOException {
	File source = new File("D:\\scriptt.sql");
	bufferedReader = new BufferedReader(new FileReader(source));
	String st;
	while ((st=bufferedReader.readLine())!=null) {
		System.out.println(st);
	}
}
}

Using FileReader class: Convenience class for reading character files. The constructors of this class assume that the default character encoding and the default byte-buffer size are appropriate.

public class ShowImage {

	public static void main(String[] args) throws IOException {
		File source = new File("D:\\scriptt.sql");
		FileReader reader = new FileReader(source);
		int st;
		while ((st = reader.read()) != -1) {
			System.out.print((char)st);
		}
	}
}

Using Scanner class: A simple text scanner which can parse primitive types and strings using regular expressions.
A Scanner breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various next methods.

public class ShowImage {

	public static void main(String[] args) throws IOException {
		File source = new File("D:\\scriptt.sql");
		Scanner sc = new Scanner(source);
		sc.useDelimiter("\\Z");
		while (sc.hasNextLine())
			System.out.println(sc.nextLine());
	}
}

Write File using BufferedWritter
public static void usingBufferedWritter() throws IOException
{
    String fileContent = "Hello Learner !! Welcome to howtodoinjava.com.";
     
    BufferedWriter writer = new BufferedWriter(new FileWriter("c:/temp/samplefile1.txt"));
    writer.write(fileContent);
    writer.close();
}




Write File using FileWriter/PrintWriter

public static void usingFileWriter() throws IOException
{
    String fileContent = "Hello Learner !! Welcome to howtodoinjava.com.";
     
    FileWriter fileWriter = new FileWriter("c:/temp/samplefile2.txt");
    fileWriter.write(fileContent);
    fileWriter.close();
}

or

public static void usingPrintWriter() throws IOException
{
    String fileContent = "Hello Learner !! Welcome to howtodoinjava.com.";
     
    FileWriter fileWriter = new FileWriter("c:/temp/samplefile3.txt");
    PrintWriter printWriter = new PrintWriter(fileWriter);
    printWriter.print(fileContent);
    printWriter.printf("Blog name is %s", "howtodoinjava.com");
    printWriter.close();
}


Write File using FileOutputStream
public static void usingFileOutputStream() throws IOException
{
    String fileContent = "Hello Learner !! Welcome to howtodoinjava.com.";
     
    FileOutputStream outputStream = new FileOutputStream("c:/temp/samplefile4.txt");
    byte[] strToBytes = fileContent.getBytes();
    outputStream.write(strToBytes);
  
    outputStream.close();
}


Write File using DataOutputStream
public static void usingDataOutputStream() throws IOException
{
    String fileContent = "Hello Learner !! Welcome to howtodoinjava.com.";
     
    FileOutputStream outputStream = new FileOutputStream("c:/temp/samplefile5.txt");
    DataOutputStream dataOutStream = new DataOutputStream(new BufferedOutputStream(outputStream));
    dataOutStream.writeUTF(fileContent);
  
    dataOutStream.close();
}
Write File using FileChannel
public static void usingFileChannel() throws IOException
{
    String fileContent = "Hello Learner !! Welcome to howtodoinjava.com.";
     
    RandomAccessFile stream = new RandomAccessFile("c:/temp/samplefile6.txt", "rw");
    FileChannel channel = stream.getChannel();
    byte[] strBytes = fileContent.getBytes();
    ByteBuffer buffer = ByteBuffer.allocate(strBytes.length);
    buffer.put(strBytes);
    buffer.flip();
    channel.write(buffer);
    stream.close();
    channel.close();
}
Write File using Java 7 Path
Java 7 introduced Files utility class and we can write a file using it’s write function, internally it’s using OutputStream to write byte array into file.
 
Path Example
public static void usingPath() throws IOException
{
    String fileContent = "Hello Learner !! Welcome to howtodoinjava.com.";
     
    Path path = Paths.get("c:/temp/samplefile7.txt");
  
    Files.write(path, fileContent.getBytes());
}
 

Summary
1.	If we try to write to a file that doesn’t exist, the file will be created first and no exception will be thrown (except using Pathmethod).
2.	Always close the output stream after writing the file content to release all resources. It will also help in not corrupting the file.
3.	Use PrintWriter is used to write formatted text.
4.	Use FileOutputStream to write binary data.
5.	Use DataOutputStream to write primitive data types.
6.	Use FileChannel to write larger files.

Security algorithm:
Using Base64:

public class Base64Demo {

	public static void main(String[] args) {
	String name =  "kolle";
	Base64.Encoder en=  Base64.getEncoder();
	String enCode = en.encodeToString(name.getBytes());
	System.out.println(enCode);
	
	Base64.Decoder de = Base64.getDecoder();
	byte[] bb = de.decode(enCode);
	System.out.println(new String(bb));

	}

}

MessagDigest Class provides following cryptographic hash function to find hash value of a text as follows:

MD2
MD5
SHA-1
SHA-224
SHA-256
SHA-384
SHA-512
Using MD5|SHA-1|SHA-256:
public class MD5 { 
    public static String getMd5(String input) 
    { 
        try { 
            // Static getInstance method is called with hashing MD5 
            MessageDigest md = MessageDigest.getInstance("MD5"); //MD5|SHA-1|SHA-256
            // digest() method is called to calculate message digest 
            //  of an input digest() return array of byte 
            byte[] messageDigest = md.digest(input.getBytes()); 
            // Convert byte array into signum representation 
            BigInteger no = new BigInteger(1, messageDigest); 
            // Convert message digest into hex value 
            String hashtext = no.toString(16); 
            while (hashtext.length() < 32) { 
                hashtext = "0" + hashtext; 
            } 
            return hashtext; 
        }  
        // For specifying wrong message digest algorithms 
        catch (NoSuchAlgorithmException e) { 
            throw new RuntimeException(e); 
        } 
    } 
    // Driver code 
    public static void main(String args[]) throws NoSuchAlgorithmException 
    { 
        String s = "GeeksForGeeks"; 
        System.out.println("Your HashCode Generated by MD5 is: " + getMd5(s)); 
    } 
}

How to create new file in java?
public class CreateFileExample {
 private static final Logger LOGGER = LoggerFactory
   .getLogger(CreateFileExample.class);
 
 public static void main(String[] args) {
  createFile();
 }
 
 public static void createFile() {
  File file = new File("C:/workspace/sample.txt");
  try {
   if (file.createNewFile()) {
    LOGGER.info("File is created !!");
   } else {
    LOGGER.info("File is already exist");
   }
  } catch (IOException e) {
   LOGGER.error(e.getMessage());
  }
 }
}

How to Write File in Java?
public class WriteFileExample {
 private static final Logger LOGGER = LoggerFactory.getLogger(WriteFileExample.class);

 public static void main(String[] args) {
  writeFile();
 }

 // Write file using BufferedWriter
 public static void writeFile() {
  try (BufferedWriter bw = new BufferedWriter(
    new FileWriter("C:/workspace/sample.txt"))) {
   String content = "This is the content to write into file\n";
   bw.write(content);
  } catch (IOException e) {
   LOGGER.error(e.getMessage());
  }
 }
}
How to delete a file in Java
public class DeleteFileExample {
 private static final Logger LOGGER = LoggerFactory
   .getLogger(DeleteFileExample.class);
 
 public static void main(String[] args) {
  deleteFile();
 }
 public static void deleteFile() {
  File file = new File("C://workspace/sample.txt");
  if (file.delete()) {
   LOGGER.info(file.getName() + "created !!");
  } else {
   LOGGER.info("Delete operation failed");
  }
 }
}
How to Copy File in Java
public class CopyFileExample {
 private static final Logger LOGGER = LoggerFactory.getLogger(CopyFileExample.class);

 public static void main(String[] args) {
  copyFile();
 }

 public static void copyFile() {
  try (InputStream inStream = new FileInputStream("sample1.txt");
    OutputStream outStream = new FileOutputStream("sample2.txt")) {
   byte[] buffer = new byte[1024];
   int length;
   // copy the file content in bytes
   while ((length = inStream.read(buffer)) > 0) {
    outStream.write(buffer, 0, length);
   }
  } catch (IOException e1) {
   LOGGER.error(e1.getMessage());
  }
 }
}

How to Move a File in Java?
public class MoveFileExample {

 private static final Logger LOGGER = LoggerFactory.getLogger(MoveFileExample.class);

 public static void main(String[] args) {
  moveFile();
 }

 public static void moveFile() {
  File file = new File("C:/workspace/sample.txt");
  boolean move = file.renameTo(new File("C:/workspace/moved/sample.txt"));
  if (move) {
   LOGGER.info("File is moved successful!");
  } else {
   LOGGER.info("File is failed to move!");
  }
 }
}

public class RenameFileExample {
 private static final Logger LOGGER = LoggerFactory.getLogger(DeleteFileExample.class);

 public static void main(String[] args) {
  renameFile();
 }

 // Renames the file denoted by this abstract pathname.
 public static void renameFile() {
  File file = new File("C:/workspace/sample.txt");
  boolean hasRename = file.renameTo(new File("C:/workspace/sample2.txt"));
  if (hasRename) {
   LOGGER.info("File rename successful");
  } else {
   LOGGER.info("File reanme failed");
  }
 }
}
How to Rename File in Java
public class RenameFileExample {
 private static final Logger LOGGER = LoggerFactory.getLogger(DeleteFileExample.class);

 public static void main(String[] args) {
  renameFile();
 }

 // Renames the file denoted by this abstract pathname.
 public static void renameFile() {
  File file = new File("C:/workspace/sample.txt");
  boolean hasRename = file.renameTo(new File("C:/workspace/sample2.txt"));
  if (hasRename) {
   LOGGER.info("File rename successful");
  } else {
   LOGGER.info("File reanme failed");
  }
 }
}

public class AppendFileExample {
 
 private static final Logger LOGGER = LoggerFactory
   .getLogger(AppendFileExample.class);
 
 public static void main(String[] args) {
  appendToExitingFile();
 }
 
 public static void appendToExitingFile(){
  try (Writer writer = new FileWriter("C:/workspace/sample.txt",true);
    BufferedWriter bw = new BufferedWriter(writer)) {
   String content = "append something to existing file\n";
   bw.write(content);
  } catch (IOException e) {
   LOGGER.error(e.getMessage());
  }
 }
}
How to read file in Java – BufferedReader:
public class BufferedReaderExample {
 public static void main(String[] args) {
  try (FileReader fr = new FileReader("C:/workspace/java-io-guide/sample.txt"); 
    BufferedReader br = new BufferedReader(fr);) {
   int i;
   while ((i = br.read()) != -1) {
    System.out.print((char) i);
   }
  } catch (IOException e) {
   e.printStackTrace();
  }
 }
}
or 
public class BufferedReaderExample {
 public static void main(String[] args) {
  try (FileReader fr = new FileReader("C:/workspace/java-io-guide/sample.txt");
    BufferedReader br = new BufferedReader(fr);) {
   String sCurrentLine;

   while ((sCurrentLine = br.readLine()) != null) {
    System.out.println(sCurrentLine);
   }
  } catch (IOException e) {
   e.printStackTrace();
  }
 }
}

How to read file in Java – BufferedInputStream
public class BufferedInputStreamExample {
 public static void main(String[] args) {
  try( FileInputStream fin=new FileInputStream("D:\\testout.txt");    
       BufferedInputStream bin=new BufferedInputStream(fin); ){
   int i;    
      while((i=bin.read())!=-1){    
       System.out.print((char)i);    
      }    
  } catch (IOException e) {
   e.printStackTrace();
  }
 }
}

How to read file in Java – DataInputStream
public class DataInputStreamExample {
 public static void main(String[] args) {
  try(InputStream input = new FileInputStream("C:/sample.txt");  
     DataInputStream inst = new DataInputStream(input);){  
     int count = input.available(); 
     
     byte[] ary = new byte[count];  
     inst.read(ary);  
     for (byte bt : ary) {  
       char k = (char) bt;  
       System.out.print(k+"-");  
     }  
     } catch (IOException e) {
  e.printStackTrace();
     }
 }
}
How to get File Size in Bytes KB MB GB TB:
public class FileUtils {
 /**
     * Given the size of a file outputs as human readable size using SI prefix.
     * <i>Base 1024</i>
     * @param size Size in bytes of a given File.
     * @return SI String representing the file size (B,KB,MB,GB,TB).
     */
    public static String readableFileSize(long size) {
        if (size <= 0) {
            return "0";
        }
        final String[] units = new String[] {"B", "KB", "MB", "GB", "TB"};
        int digitGroups = (int)(Math.log10(size) / Math.log10(1024));
        return new DecimalFormat("#,##0.#").format(size / Math.pow(1024, digitGroups)) 
          + " " + units[digitGroups];
    }
    
    public static void main(String[] args) {
     File file = new File("sample.txt");
     String size = readableFileSize(file.length());
     System.out.println(size);
    }
}

How to write an Object to file in Java
public class ObjectOutputStreamExample {

 public static void main(String[] args) {
  final Employee employee = new Employee();
  employee.setId(100);
  employee.setName("ramesh");
  try (final FileOutputStream fout = new FileOutputStream("employees.txt");
    final ObjectOutputStream out = new ObjectOutputStream(fout)) {
   out.writeObject(employee);
   out.flush();
   System.out.println("success");
  } catch (IOException e) {
   e.printStackTrace();
  }
 }
}
How to Read Object from File
public class ObjectInputStreamExample {
 public static void main(String[] args) {
  try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("employees.txt"))) {
   final Employee employee = (Employee) in.readObject();
   System.out.println(" printing employee object details");
   System.out.println(employee.getId() + " " + employee.getName());
   System.out.println(" printing address object details");
  } catch (IOException | ClassNotFoundException e) {
   e.printStackTrace();
  }
 }
}

How to Compress Files in ZIP format in Java
public class CompressZipFile {
 public static void main(String[] args) {

  try (FileOutputStream fos = new FileOutputStream("C:/Project_Work/samples/src_sample.zip");
    ZipOutputStream zos = new ZipOutputStream(fos);
    FileInputStream in = new FileInputStream("C:/Project_Work/samples/sample.txt");) {
   ZipEntry ze= new ZipEntry("sample.txt");
      zos.putNextEntry(ze);
   byte[] buffer = new byte[1024];
   int len;
   while ((len = in.read(buffer)) > 0) {
    zos.write(buffer, 0, len);
   }

  } catch (IOException e) {
   e.printStackTrace();
  }
 }
}

How to Remove Duplicates from ArrayList in Java?
package com.logical;

import java.util.ArrayList;

public class RemoveDupArrList {
	public static void main(String[] args) {
		ArrayList<String> al = new ArrayList<>();
		al.add("abc");
		al.add("abc");
		al.add("xyz");
		ArrayList<String> al2 = new ArrayList<>();
		for (String s : al) {
			if (!al2.contains(s)) {
				al2.add(s);
			}
		}
		System.out.println(al2);
	}
}
or
public class RemoveDupArrList {
	public static void main(String[] args) {
		ArrayList<String> al = new ArrayList<>();
		al.add("abc");
		al.add("abc");
		al.add("xyz");
		Object[] obj = al.toArray();
		for (Object st : obj) {
			if(al.indexOf(st) != al.lastIndexOf(st)){
				al.remove(al.lastIndexOf(st));
			}
		}
		System.out.println(al);
	}
}
or
package com.logical;

import java.util.ArrayList;
import java.util.stream.Collectors;

public class RemoveDupArrList {
	public static void main(String[] args) {
		ArrayList<String> al = new ArrayList<>();
		al.add("abc");
		al.add("abc");
		al.add("xyz");
		ArrayList<String> list2 = (ArrayList<String>) al.stream().distinct().collect(Collectors.toList());
		System.out.println(list2);
	}
}

or 

public class RemoveDupArrList {
	public static void main(String[] args) {
		String[] str = {"abc", "abc", "xyz"};
		ArrayList<String> al = new ArrayList<>(Arrays.asList(str));
		ArrayList<String> list2 = (ArrayList<String>) al.stream().distinct().collect(Collectors.toList());
		System.out.println(list2);
		for (String string : list2) {
			System.out.println(string);
		}
	}
}
Different ways to create objects:
1) Using new Keyword :
public class NewKeywordExample 
{ 
	String name = "GeeksForGeeks"; 
	public static void main(String[] args) 
	{ 
		NewKeywordExample obj = new NewKeywordExample(); 
		System.out.println(obj.name); 
	} 
} 


2) Using New Instance :

public class NewInstanceExample 
{ 
	String name = "GeeksForGeeks"; 
	public static void main(String[] args) 
	{ 
		try
		{ 
			Class cls = Class.forName("NewInstanceExample"); 
			NewInstanceExample obj = NewInstanceExample) cls.newInstance(); 
			System.out.println(obj.name); 
		} 
		catch (ClassNotFoundException e) 
		{ 
			e.printStackTrace(); 
		} 
		catch (InstantiationException e) 
		{ 
			e.printStackTrace(); 
		} 
		catch (IllegalAccessException e) 
		{ 
			e.printStackTrace(); 
		} 
	} 
} 

3) Using clone() method:
public class CloneExample implements Cloneable 
{ 
    @Override
    protected Object clone() throws CloneNotSupportedException 
    { 
        return super.clone(); 
    } 
    String name = "GeeksForGeeks"; 
  
    public static void main(String[] args) 
    { 
        CloneExample obj1 = new CloneExample(); 
        try
        { 
            CloneExample obj2 = (CloneExample) obj1.clone(); 
            System.out.println(obj2.name); 
        } 
        catch (CloneNotSupportedException e) 
        { 
            e.printStackTrace(); 
        } 
    } 
} 

4) Using deserialization :
public class DeserializationExample 
{ 
    public static void main(String[] args) 
    { 
        try
        { 
            DeserializationExample d; 
            FileInputStream f = new FileInputStream("file.txt"); 
            ObjectInputStream oos = new ObjectInputStream(f); 
            d = (DeserializationExample)oos.readObject(); 
        } 
        catch (Exception e) 
        { 
            e.printStackTrace(); 
        } 
        System.out.println(d.name); 
    } 
} 

5) Using newInstance() method of Constructor class
public class ReflectionExample 
{ 
    private String name; 
    ReflectionExample() 
    { 
    } 
    public void setName(String name) 
    { 
        this.name = name; 
    } 
    public static void main(String[] args) 
    { 
        try
        { 
            Constructor<ReflectionExample> constructor 
                = ReflectionExample.class.getDeclaredConstructor(); 
            ReflectionExample r = constructor.newInstance(); 
            r.setName("GeeksForGeeks"); 
            System.out.println(r.name); 
        } 
        catch (Exception e) 
        { 
            e.printStackTrace(); 
        } 
    } 
}


How to swap or exchange objects in Java?

class Car 
{ 
    int no; 
    Car(int no) { this.no = no; } 
    // To swap c1 and c2 
    public static void swap(Car c1, Car c2) 
    { 
        int temp = c1.no; 
        c1.no = c2.no; 
        c2.no = temp; 
    } 
  
    // Driver method 
    public static void main(String[] args) 
    { 
        Car c1 = new Car(1); 
        Car c2 = new Car(2); 
        swap(c1, c2); 
        System.out.println("c1.no = " + c1.no); 
        System.out.println("c2.no = " + c2.no); 
    } 
} 


class SharedObj
{
   // volatile keyword here makes sure that
   // the changes made in one thread are 
   // immediately reflect in other thread
   static volatile int sharedVar = 6;
}
Binary Search working of Arrays?
public class Demo {
	public static void main(String[] args) {
		int arr[] = { 10, 20, 15, 22, 35 };
		Arrays.sort(arr);
		int key = 22;
		int res = Arrays.binarySearch(arr, key);
		if (res >= 0)
			System.out.println(key + " found at index = " + res);
		else
			System.out.println(key + " Not found");

		key = 40;
		res = Arrays.binarySearch(arr, key);
		if (res >= 0)
			System.out.println(key + " found at index = " + res);
		else
			System.out.println(key + " Not found");
	}
}

Binary Search working of Collections?
public class Demo {
	public static void main(String[] args)
    {
        List<Integer> al = new ArrayList<Integer>();
        al.add(1);
        al.add(2);
        al.add(3);
        al.add(10);
        al.add(20);
        // 10 is present at index 3.
        int key = 10;
        int res = Collections.binarySearch(al, key);
        if (res >= 0)
            System.out.println(key + " found at index = "+ res);
        else
            System.out.println(key + " Not found");
        key = 15;
        res = Collections.binarySearch(al, key);
        if (res >= 0)
            System.out.println(key + " found at index = " + res);
        else
            System.out.println(key + " Not found");
    }
}

Binary search own implementation using recursion?
package folder;

public class Demo {
	int binarySearch(int arr[], int first, int last, int key) {
		if (last >= 1) {
			int mid = 1 + (last - first) / 2;
			if (arr[mid] == key)
				return mid;
			if (arr[mid] > key) {
				return binarySearch(arr, first, mid - first, key);
			} else {
				return binarySearch(arr, mid + 1, last, key);
			}
		}
		return -1;
	}

	public static void main(String args[]) {
		Demo ob = new Demo();
		int arr[] = { 2, 3, 4, 10, 40 };
		int n = arr.length;
		int key = 10;
		int result = ob.binarySearch(arr, 0, n - 1, key);
		if (result == -1)
			System.out.println("Element not present");
		else
			System.out.println("Element found at index " + result);
	}
}

Sort array of elements using Arrays.sort()?
public class Demo {
	public static void main(String[] args) {
		int[] arr = { 13, 7, 6, 45, 21, 9, 101, 102 };
		Arrays.sort(arr);
		System.out.printf(Arrays.toString(arr));
	}
}

Sort array of elements using Arrays.sort()?
public class Demo {
	public static void main(String[] args) {
		ArrayList<String> al = new ArrayList<String>();
		al.add("Geeks For Geeks");
		al.add("Friends");
		al.add("Dear");
		al.add("Is");
		al.add("Superb");
		Collections.sort(al);
		System.out.println(al);
	}
}

Reverse-Sort array of elements using Arrays.sort()?
public class Demo {
	public static void main(String[] args)
    {
        Integer[] arr = { 13, 7, 6, 45, 21, 9, 2, 100 };
        Arrays.sort(arr, Collections.reverseOrder());
        System.out.println(Arrays.toString(arr));
    }
}
Reverse-Sort collection of elements using Arrays.sort()?
public class Demo {
	public static void main(String[] args)
    {
        ArrayList<String> al = new ArrayList<String>();
        al.add("Geeks For Geeks");
        al.add("Friends");
        al.add("Dear");
        al.add("Is");
        al.add("Superb");
        Collections.sort(al, Collections.reverseOrder());
        System.out.println(al);
    }
}

Sort only sub arrays?
public class Demo {
	public static void main(String[] args)
    {
        int[] arr = { 13, 7, 6, 45, 21, 9, 2, 100 };
        Arrays.sort(arr, 1, 5);
        System.out.println(Arrays.toString(arr));
    }
}

